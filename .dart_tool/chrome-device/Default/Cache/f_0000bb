define(['dart_sdk', 'packages/flutter_map/src/layer/tile_provider/network_image_with_retry.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/image_resolution.dart', 'packages/flutter_map/src/core/util.dart', 'packages/flutter_map/src/layer/layer.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter_map/src/geo/crs/crs.dart', 'packages/tuple/tuple.dart', 'packages/flutter_map/src/core/point.dart', 'packages/flutter_map/src/core/bounds.dart', 'packages/collection/src/equality.dart', 'packages/latlong2/latlong.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/widgets/color_filter.dart', 'packages/flutter/src/painting/box_decoration.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter_map/src/geo/latlng_bounds.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/widgets/async.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter_map/src/gestures/map_events.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter_map/src/core/center_zoom.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter_map/src/gestures/interactive_flag.dart', 'packages/flutter_map/src/gestures/multi_finger_gesture.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter_map/src/gestures/latlng_tween.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/scale.dart', 'packages/positioned_tap_detector_2/positioned_tap_detector_2.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/async/src/stream_group.dart'], (function load__packages__flutter_map__src__layer__tile_provider__tile_provider_dart(dart_sdk, packages__flutter_map__src__layer__tile_provider__network_image_with_retry$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__image_resolution$46dart, packages__flutter_map__src__core__util$46dart, packages__flutter_map__src__layer__layer$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter_map__src__geo__crs__crs$46dart, packages__tuple__tuple$46dart, packages__flutter_map__src__core__point$46dart, packages__flutter_map__src__core__bounds$46dart, packages__collection__src__equality$46dart, packages__latlong2__latlong$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__widgets__color_filter$46dart, packages__flutter__src__painting__box_decoration$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter_map__src__geo__latlng_bounds$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__widgets__async$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter_map__src__gestures__map_events$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter_map__src__core__center_zoom$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter_map__src__gestures__interactive_flag$46dart, packages__flutter_map__src__gestures__multi_finger_gesture$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter_map__src__gestures__latlng_tween$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__scale$46dart, packages__positioned_tap_detector_2__positioned_tap_detector_2$46dart, packages__flutter__src__gestures__tap$46dart, packages__async__src__stream_group$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const io = dart_sdk.io;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const _engine = dart_sdk._engine;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const network_image_with_retry = packages__flutter_map__src__layer__tile_provider__network_image_with_retry$46dart.src__layer__tile_provider__network_image_with_retry;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const _network_image_web = packages__flutter__src__painting___network_image_web$46dart.src__painting___network_image_web;
  const image_resolution = packages__flutter__src__painting__image_resolution$46dart.src__painting__image_resolution;
  const util = packages__flutter_map__src__core__util$46dart.src__core__util;
  const layer = packages__flutter_map__src__layer__layer$46dart.src__layer__layer;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const image = packages__flutter__src__widgets__widget_span$46dart.src__widgets__image;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const crs = packages__flutter_map__src__geo__crs__crs$46dart.src__geo__crs__crs;
  const tuple = packages__tuple__tuple$46dart.tuple;
  const point = packages__flutter_map__src__core__point$46dart.src__core__point;
  const bounds = packages__flutter_map__src__core__bounds$46dart.src__core__bounds;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const latlong = packages__latlong2__latlong$46dart.latlong;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const color_filter = packages__flutter__src__widgets__color_filter$46dart.src__widgets__color_filter;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const latlng_bounds = packages__flutter_map__src__geo__latlng_bounds$46dart.src__geo__latlng_bounds;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const async$ = packages__flutter__src__widgets__async$46dart.src__widgets__async;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const map_events = packages__flutter_map__src__gestures__map_events$46dart.src__gestures__map_events;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const center_zoom = packages__flutter_map__src__core__center_zoom$46dart.src__core__center_zoom;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const interactive_flag = packages__flutter_map__src__gestures__interactive_flag$46dart.src__gestures__interactive_flag;
  const multi_finger_gesture = packages__flutter_map__src__gestures__multi_finger_gesture$46dart.src__gestures__multi_finger_gesture;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const latlng_tween = packages__flutter_map__src__gestures__latlng_tween$46dart.src__gestures__latlng_tween;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const scale = packages__flutter__src__gestures__scale$46dart.src__gestures__scale;
  const positioned_tap_detector_2 = packages__positioned_tap_detector_2__positioned_tap_detector_2$46dart.positioned_tap_detector_2;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const stream_group = packages__async__src__stream_group$46dart.src__stream_group;
  var tile_provider = Object.create(dart.library);
  var tile_layer = Object.create(dart.library);
  var tile_builder = Object.create(dart.library);
  var polyline_layer = Object.create(dart.library);
  var polygon_layer = Object.create(dart.library);
  var marker_layer = Object.create(dart.library);
  var circle_layer = Object.create(dart.library);
  var plugin = Object.create(dart.library);
  var overlay_image_layer = Object.create(dart.library);
  var group_layer = Object.create(dart.library);
  var map_state_widget = Object.create(dart.library);
  var map = Object.create(dart.library);
  var gestures = Object.create(dart.library);
  var flutter_map_state = Object.create(dart.library);
  var flutter_map = Object.create(dart.library);
  var $toInt = dartx.toInt;
  var $round = dartx.round;
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $leftShift = dartx['<<'];
  var $isEmpty = dartx.isEmpty;
  var $modulo = dartx['%'];
  var $length = dartx.length;
  var $_get = dartx._get;
  var $floorToDouble = dartx.floorToDouble;
  var $split = dartx.split;
  var $take = dartx.take;
  var $join = dartx.join;
  var $map = dartx.map;
  var $forEach = dartx.forEach;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $add = dartx.add;
  var $toDouble = dartx.toDouble;
  var $entries = dartx.entries;
  var $remove = dartx.remove;
  var $abs = dartx.abs;
  var $keys = dartx.keys;
  var $roundToDouble = dartx.roundToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $_equals = dartx._equals;
  var $compareTo = dartx.compareTo;
  var $hashCode = dartx.hashCode;
  var $floor = dartx.floor;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $first = dartx.first;
  var $indexOf = dartx.indexOf;
  var $runtimeType = dartx.runtimeType;
  var $clamp = dartx.clamp;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    StringAndMapOfString$StringToString: () => (T$.StringAndMapOfString$StringToString = dart.constFn(dart.fnType(core.String, [core.String, T$.MapOfString$String()])))(),
    Tuple2Ofdouble$double: () => (T$.Tuple2Ofdouble$double = dart.constFn(tuple.Tuple2$(core.double, core.double)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    CustomPointOfnum: () => (T$.CustomPointOfnum = dart.constFn(point.CustomPoint$(core.num)))(),
    BoundsOfnum: () => (T$.BoundsOfnum = dart.constFn(bounds.Bounds$(core.num)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    IdentityMapOfString$Tile: () => (T$.IdentityMapOfString$Tile = dart.constFn(_js_helper.IdentityMap$(core.String, tile_layer.Tile)))(),
    IdentityMapOfdouble$Level: () => (T$.IdentityMapOfdouble$Level = dart.constFn(_js_helper.IdentityMap$(core.double, tile_layer.Level)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    LatLngN: () => (T$.LatLngN = dart.constFn(dart.nullable(latlong.LatLng)))(),
    StreamControllerOfLatLngN: () => (T$.StreamControllerOfLatLngN = dart.constFn(async.StreamController$(T$.LatLngN())))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    LinkedHashMapOfString$Tile: () => (T$.LinkedHashMapOfString$Tile = dart.constFn(collection.LinkedHashMap$(core.String, tile_layer.Tile)))(),
    CoordsOfdouble: () => (T$.CoordsOfdouble = dart.constFn(tile_layer.Coords$(core.double)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    CoordsOfnum: () => (T$.CoordsOfnum = dart.constFn(tile_layer.Coords$(core.num)))(),
    JSArrayOfCoordsOfnum: () => (T$.JSArrayOfCoordsOfnum = dart.constFn(_interceptors.JSArray$(T$.CoordsOfnum())))(),
    CoordsOfnumAndCoordsOfnumToint: () => (T$.CoordsOfnumAndCoordsOfnumToint = dart.constFn(dart.fnType(core.int, [T$.CoordsOfnum(), T$.CoordsOfnum()])))(),
    ListOfTile: () => (T$.ListOfTile = dart.constFn(core.List$(tile_layer.Tile)))(),
    BuildContextAndWidgetAndListOfTileToColorFiltered: () => (T$.BuildContextAndWidgetAndListOfTileToColorFiltered = dart.constFn(dart.fnType(color_filter.ColorFiltered, [framework.BuildContext, framework.Widget, T$.ListOfTile()])))(),
    BuildContextAndWidgetAndTileToColorFiltered: () => (T$.BuildContextAndWidgetAndTileToColorFiltered = dart.constFn(dart.fnType(color_filter.ColorFiltered, [framework.BuildContext, framework.Widget, tile_layer.Tile])))(),
    BuildContextAndWidgetAndTileToContainer: () => (T$.BuildContextAndWidgetAndTileToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, framework.Widget, tile_layer.Tile])))(),
    JSArrayOfOffset: () => (T$.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    BuildContextAndBoxConstraintsToWidget: () => (T$.BuildContextAndBoxConstraintsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])))(),
    StreamBuilderOfvoid: () => (T$.StreamBuilderOfvoid = dart.constFn(async$.StreamBuilder$(dart.void)))(),
    AsyncSnapshotOfvoid: () => (T$.AsyncSnapshotOfvoid = dart.constFn(async$.AsyncSnapshot$(dart.void)))(),
    BuildContextAndAsyncSnapshotOfvoidToContainer: () => (T$.BuildContextAndAsyncSnapshotOfvoidToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, T$.AsyncSnapshotOfvoid()])))(),
    ColorTodouble: () => (T$.ColorTodouble = dart.constFn(dart.fnType(core.double, [ui.Color])))(),
    ListOfOffset: () => (T$.ListOfOffset = dart.constFn(core.List$(ui.Offset)))(),
    ListOfListOfOffset: () => (T$.ListOfListOfOffset = dart.constFn(core.List$(T$.ListOfOffset())))(),
    intToListOfOffset: () => (T$.intToListOfOffset = dart.constFn(dart.fnType(T$.ListOfOffset(), [core.int])))(),
    StreamBuilderOfNull: () => (T$.StreamBuilderOfNull = dart.constFn(async$.StreamBuilder$(core.Null)))(),
    AsyncSnapshotOfObjectN: () => (T$.AsyncSnapshotOfObjectN = dart.constFn(async$.AsyncSnapshot$(T$.ObjectN())))(),
    BuildContextAndAsyncSnapshotOfObjectNToContainer: () => (T$.BuildContextAndAsyncSnapshotOfObjectNToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, T$.AsyncSnapshotOfObjectN()])))(),
    JSArrayOfCustomPointOfnum: () => (T$.JSArrayOfCustomPointOfnum = dart.constFn(_interceptors.JSArray$(T$.CustomPointOfnum())))(),
    ListOfCustomPointOfnum: () => (T$.ListOfCustomPointOfnum = dart.constFn(core.List$(T$.CustomPointOfnum())))(),
    intToCustomPointOfnum: () => (T$.intToCustomPointOfnum = dart.constFn(dart.fnType(T$.CustomPointOfnum(), [core.int])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    StreamBuilderOfintN: () => (T$.StreamBuilderOfintN = dart.constFn(async$.StreamBuilder$(T$.intN())))(),
    AsyncSnapshotOfintN: () => (T$.AsyncSnapshotOfintN = dart.constFn(async$.AsyncSnapshot$(T$.intN())))(),
    BuildContextAndAsyncSnapshotOfintNToContainer: () => (T$.BuildContextAndAsyncSnapshotOfintNToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, T$.AsyncSnapshotOfintN()])))(),
    BuildContextAndAsyncSnapshotOfvoidToClipRect: () => (T$.BuildContextAndAsyncSnapshotOfvoidToClipRect = dart.constFn(dart.fnType(basic.ClipRect, [framework.BuildContext, T$.AsyncSnapshotOfvoid()])))(),
    JSArrayOfLayerOptions: () => (T$.JSArrayOfLayerOptions = dart.constFn(_interceptors.JSArray$(layer.LayerOptions)))(),
    CompleterOfNull: () => (T$.CompleterOfNull = dart.constFn(async.Completer$(core.Null)))(),
    StreamControllerOfMapEvent: () => (T$.StreamControllerOfMapEvent = dart.constFn(async.StreamController$(map_events.MapEvent)))(),
    StreamControllerOfNull: () => (T$.StreamControllerOfNull = dart.constFn(async.StreamController$(core.Null)))(),
    CustomPointOfdouble: () => (T$.CustomPointOfdouble = dart.constFn(point.CustomPoint$(core.double)))(),
    TweenOfOffset: () => (T$.TweenOfOffset = dart.constFn(tween.Tween$(ui.Offset)))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    MapControllerImplN: () => (T$.MapControllerImplN = dart.constFn(dart.nullable(map.MapControllerImpl)))(),
    StreamGroupOfNull: () => (T$.StreamGroupOfNull = dart.constFn(stream_group.StreamGroup$(core.Null)))(),
    JSArrayOfStreamGroupOfNull: () => (T$.JSArrayOfStreamGroupOfNull = dart.constFn(_interceptors.JSArray$(T$.StreamGroupOfNull())))(),
    doubleTovoid: () => (T$.doubleTovoid = dart.constFn(dart.fnType(dart.void, [core.double])))(),
    LayerOptionsToWidget: () => (T$.LayerOptionsToWidget = dart.constFn(dart.fnType(framework.Widget, [layer.LayerOptions])))(),
    BuildContextAndBoxConstraintsToMapStateInheritedWidget: () => (T$.BuildContextAndBoxConstraintsToMapStateInheritedWidget = dart.constFn(dart.fnType(map_state_widget.MapStateInheritedWidget, [framework.BuildContext, box.BoxConstraints])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: tile_layer.EvictErrorTileStrategy.prototype,
        [_name$]: "EvictErrorTileStrategy.none",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: tile_layer.EvictErrorTileStrategy.prototype,
        [_name$]: "EvictErrorTileStrategy.dispose",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: tile_layer.EvictErrorTileStrategy.prototype,
        [_name$]: "EvictErrorTileStrategy.notVisibleRespectMargin",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: tile_layer.EvictErrorTileStrategy.prototype,
        [_name$]: "EvictErrorTileStrategy.notVisible",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], tile_layer.EvictErrorTileStrategy);
    },
    get C5() {
      return C[5] = dart.constList([], core.String);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292927712.0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: tile_provider.NonCachingNetworkTileProvider.prototype
      });
    },
    get C8() {
      return C[8] = dart.fn(util.template, T$.StringAndMapOfString$StringToString());
    },
    get C9() {
      return C[9] = dart.constMap(core.String, core.String, []);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: T$.Tuple2Ofdouble$double().prototype,
        [Tuple2_item2]: 180,
        [Tuple2_item1]: -180
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: crs.Transformation.prototype,
        [Transformation_d]: 0.5,
        [Transformation_c]: -2.495320233665337e-8,
        [Transformation_b]: 0.5,
        [Transformation_a]: 2.495320233665337e-8
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: crs.SphericalMercator.prototype
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: crs.Epsg3857.prototype,
        [Earth_wrapLat]: null,
        [Earth_wrapLng]: C[11] || CT.C11,
        [Epsg3857_transformation]: C[12] || CT.C12,
        [Epsg3857_projection]: C[13] || CT.C13,
        [Epsg3857_code]: "EPSG:3857"
      });
    },
    get C14() {
      return C[14] = dart.fn(core.Uri.encodeComponent, T$.StringToString());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 7,
        [_Location_line]: 411,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 412,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "options",
        [_Location_column]: 7,
        [_Location_line]: 413,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19], widget_inspector._Location);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[16] || CT.C16,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 410,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: equality.MapEquality.prototype,
        [MapEquality__valueEquality]: C[21] || CT.C21,
        [MapEquality__keyEquality]: C[21] || CT.C21
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 561,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24], widget_inspector._Location);
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[23] || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 560,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 567,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 568,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27, C[28] || CT.C28], widget_inspector._Location);
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 566,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 7,
        [_Location_line]: 565,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 566,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32], widget_inspector._Location);
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[30] || CT.C30,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 564,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tile",
        [_Location_column]: 7,
        [_Location_line]: 588,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "errorImage",
        [_Location_column]: 7,
        [_Location_line]: 589,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tileBuilder",
        [_Location_column]: 7,
        [_Location_line]: 590,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 28,
        [_Location_line]: 587,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 594,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 595,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 596,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 597,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 598,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 599,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.constList([C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45], widget_inspector._Location);
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[39] || CT.C39,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 593,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: T$.CustomPointOfnum().prototype,
        [Point_y]: 1,
        [Point_x]: 1
      });
    },
    get C48() {
      return C[48] = dart.fn(core.print, T$.ObjectNTovoid());
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 13,
        [_Location_line]: 1339,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 13,
        [_Location_line]: 1340,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.constList([C[51] || CT.C51, C[52] || CT.C52], widget_inspector._Location);
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[50] || CT.C50,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 1338,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 13,
        [_Location_line]: 1343,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 13,
        [_Location_line]: 1344,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.constList([C[55] || CT.C55, C[56] || CT.C56], widget_inspector._Location);
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[54] || CT.C54,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 1342,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 7,
        [_Location_line]: 1348,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1349,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.constList([C[59] || CT.C59, C[60] || CT.C60], widget_inspector._Location);
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[58] || CT.C58,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1347,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart"
      });
    },
    get C62() {
      return C[62] = dart.constList([-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0], core.double);
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: _engine._CkMatrixColorFilter.prototype,
        [_CkMatrixColorFilter_matrix]: C[62] || CT.C62
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "colorFilter",
        [_Location_column]: 5,
        [_Location_line]: 14,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 5,
        [_Location_line]: 36,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.constList([C[65] || CT.C65, C[66] || CT.C66], widget_inspector._Location);
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[64] || CT.C64,
        [_Location_name]: null,
        [_Location_column]: 10,
        [_Location_line]: 13,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "colorFilter",
        [_Location_column]: 5,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 5,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C68() {
      return C[68] = dart.constList([C[69] || CT.C69, C[70] || CT.C70], widget_inspector._Location);
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[68] || CT.C68,
        [_Location_name]: null,
        [_Location_column]: 10,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 13,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 13,
        [_Location_line]: 89,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.constList([C[73] || CT.C73, C[74] || CT.C74], widget_inspector._Location);
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[72] || CT.C72,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 87,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.constList([C[77] || CT.C77], widget_inspector._Location);
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[76] || CT.C76,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 86,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.constList([C[80] || CT.C80, C[81] || CT.C81], widget_inspector._Location);
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[79] || CT.C79,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 82,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 5,
        [_Location_line]: 79,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 5,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.constList([C[84] || CT.C84, C[85] || CT.C85], widget_inspector._Location);
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[83] || CT.C83,
        [_Location_name]: null,
        [_Location_column]: 10,
        [_Location_line]: 78,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 13,
        [_Location_line]: 117,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 13,
        [_Location_line]: 118,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.constList([C[88] || CT.C88, C[89] || CT.C89], widget_inspector._Location);
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[87] || CT.C87,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 116,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.constList([C[92] || CT.C92], widget_inspector._Location);
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[91] || CT.C91,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 115,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 7,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 113,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.constList([C[95] || CT.C95, C[96] || CT.C96], widget_inspector._Location);
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[94] || CT.C94,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 111,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 5,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 5,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C98() {
      return C[98] = dart.constList([C[99] || CT.C99, C[100] || CT.C100], widget_inspector._Location);
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[98] || CT.C98,
        [_Location_name]: null,
        [_Location_column]: 10,
        [_Location_line]: 107,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_builder/tile_builder.dart"
      });
    },
    get C101() {
      return C[101] = dart.constList([], polyline_layer.Polyline);
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255360.0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967040.0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 26,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 54,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.constList([C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108], widget_inspector._Location);
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[105] || CT.C105,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 59,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 74,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.constList([C[111] || CT.C111], widget_inspector._Location);
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[110] || CT.C110,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 73,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 13,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.constList([C[114] || CT.C114, C[115] || CT.C115], widget_inspector._Location);
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[113] || CT.C113,
        [_Location_name]: null,
        [_Location_column]: 25,
        [_Location_line]: 98,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 106,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.constList([C[118] || CT.C118], widget_inspector._Location);
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[117] || CT.C117,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 105,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C120() {
      return C[120] = dart.constList([C[121] || CT.C121], widget_inspector._Location);
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[120] || CT.C120,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 104,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.constList([C[124] || CT.C124, C[125] || CT.C125], widget_inspector._Location);
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[123] || CT.C123,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 82,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C126() {
      return C[126] = dart.constList([], polygon_layer.Polygon);
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 25,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 34,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 53,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C128() {
      return C[128] = dart.constList([C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131], widget_inspector._Location);
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[128] || CT.C128,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 60,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 75,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.constList([C[134] || CT.C134], widget_inspector._Location);
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[133] || CT.C133,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 74,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 15,
        [_Location_line]: 117,
        [_Location_file]: null
      });
    },
    get C136() {
      return C[136] = dart.constList([C[137] || CT.C137, C[138] || CT.C138], widget_inspector._Location);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[136] || CT.C136,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 115,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.constList([C[141] || CT.C141], widget_inspector._Location);
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[140] || CT.C140,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 123,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C143() {
      return C[143] = dart.constList([C[144] || CT.C144], widget_inspector._Location);
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[143] || CT.C143,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 122,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C146() {
      return C[146] = dart.constList([C[147] || CT.C147, C[148] || CT.C148], widget_inspector._Location);
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[146] || CT.C146,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 83,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C149() {
      return C[149] = dart.constList([], marker_layer.Marker);
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.left",
        index: 1
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.right",
        index: 2
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.top",
        index: 3
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.bottom",
        index: 4
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.center",
        index: 5
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$0]: "AnchorAlign.none",
        index: 0
      });
    },
    get C157() {
      return C[157] = dart.constList([C[156] || CT.C156, C[151] || CT.C151, C[152] || CT.C152, C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155], marker_layer.AnchorAlign);
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerLayerOptions",
        [_Location_column]: 24,
        [_Location_line]: 159,
        [_Location_file]: null
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 33,
        [_Location_line]: 159,
        [_Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 52,
        [_Location_line]: 159,
        [_Location_file]: null
      });
    },
    get C159() {
      return C[159] = dart.constList([C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162], widget_inspector._Location);
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[159] || CT.C159,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 159,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "angle",
        [_Location_column]: 23,
        [_Location_line]: 234,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "origin",
        [_Location_column]: 23,
        [_Location_line]: 235,
        [_Location_file]: null
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 23,
        [_Location_line]: 237,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 23,
        [_Location_line]: 239,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.constList([C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167, C[168] || CT.C168], widget_inspector._Location);
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[164] || CT.C164,
        [_Location_name]: null,
        [_Location_column]: 31,
        [_Location_line]: 233,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 15,
        [_Location_line]: 245,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 15,
        [_Location_line]: 246,
        [_Location_file]: null
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 15,
        [_Location_line]: 247,
        [_Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 15,
        [_Location_line]: 248,
        [_Location_file]: null
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 15,
        [_Location_line]: 249,
        [_Location_file]: null
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 250,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.constList([C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173, C[174] || CT.C174, C[175] || CT.C175, C[176] || CT.C176], widget_inspector._Location);
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[170] || CT.C170,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 244,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 257,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.constList([C[179] || CT.C179], widget_inspector._Location);
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[178] || CT.C178,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 256,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 256,
        [_Location_file]: null
      });
    },
    get C181() {
      return C[181] = dart.constList([C[182] || CT.C182], widget_inspector._Location);
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[181] || CT.C181,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 255,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 206,
        [_Location_file]: null
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 207,
        [_Location_file]: null
      });
    },
    get C184() {
      return C[184] = dart.constList([C[185] || CT.C185, C[186] || CT.C186], widget_inspector._Location);
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[184] || CT.C184,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 205,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/marker_layer.dart"
      });
    },
    get C187() {
      return C[187] = dart.constList([], circle_layer.CircleMarker);
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 24,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 33,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 52,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.constList([C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192], widget_inspector._Location);
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[189] || CT.C189,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.constList([C[195] || CT.C195], widget_inspector._Location);
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[194] || CT.C194,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 57,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 15,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C197() {
      return C[197] = dart.constList([C[198] || CT.C198, C[199] || CT.C199], widget_inspector._Location);
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[197] || CT.C197,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 86,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C201() {
      return C[201] = dart.constList([C[202] || CT.C202], widget_inspector._Location);
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[201] || CT.C201,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 94,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C204() {
      return C[204] = dart.constList([C[205] || CT.C205], widget_inspector._Location);
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[204] || CT.C204,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 93,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 68,
        [_Location_file]: null
      });
    },
    get C207() {
      return C[207] = dart.constList([C[208] || CT.C208, C[209] || CT.C209], widget_inspector._Location);
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[207] || CT.C207,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 66,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/circle_layer.dart"
      });
    },
    get C210() {
      return C[210] = dart.constList([], overlay_image_layer.OverlayImage);
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 30,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 39,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 58,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C212() {
      return C[212] = dart.constList([C[213] || CT.C213, C[214] || CT.C214, C[215] || CT.C215], widget_inspector._Location);
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[212] || CT.C212,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 40,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.constList([C[218] || CT.C218], widget_inspector._Location);
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[217] || CT.C217,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 58,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C220() {
      return C[220] = dart.constList([C[221] || CT.C221], widget_inspector._Location);
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[220] || CT.C220,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 57,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 56,
        [_Location_file]: null
      });
    },
    get C223() {
      return C[223] = dart.constList([C[224] || CT.C224, C[225] || CT.C225], widget_inspector._Location);
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[223] || CT.C223,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 54,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 9,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 9,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "colorBlendMode",
        [_Location_column]: 9,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gaplessPlayback",
        [_Location_column]: 9,
        [_Location_line]: 89,
        [_Location_file]: null
      });
    },
    get C227() {
      return C[227] = dart.constList([C[228] || CT.C228, C[229] || CT.C229, C[230] || CT.C230, C[231] || CT.C231, C[232] || CT.C232], widget_inspector._Location);
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[227] || CT.C227,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 81,
        [_Location_file]: null
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C234() {
      return C[234] = dart.constList([C[235] || CT.C235, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239], widget_inspector._Location);
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[234] || CT.C234,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 79,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C240() {
      return C[240] = dart.constList([], layer.LayerOptions);
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "groupOpts",
        [_Location_column]: 23,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 32,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 51,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C242() {
      return C[242] = dart.constList([C[243] || CT.C243, C[244] || CT.C244, C[245] || CT.C245], widget_inspector._Location);
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[242] || CT.C242,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 24,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 46,
        [_Location_file]: null
      });
    },
    get C247() {
      return C[247] = dart.constList([C[248] || CT.C248], widget_inspector._Location);
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[247] || CT.C247,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 45,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C250() {
      return C[250] = dart.constList([C[251] || CT.C251], widget_inspector._Location);
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[250] || CT.C250,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 38,
        [_Location_file]: null
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 39,
        [_Location_file]: null
      });
    },
    get C253() {
      return C[253] = dart.constList([C[254] || CT.C254, C[255] || CT.C255], widget_inspector._Location);
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[253] || CT.C253,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 37,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerLayerOptions",
        [_Location_column]: 26,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 48,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C257() {
      return C[257] = dart.constList([C[258] || CT.C258, C[259] || CT.C259, C[260] || CT.C260], widget_inspector._Location);
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[257] || CT.C257,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 55,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 26,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 48,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C262() {
      return C[262] = dart.constList([C[263] || CT.C263, C[264] || CT.C264, C[265] || CT.C265], widget_inspector._Location);
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[262] || CT.C262,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 58,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 28,
        [_Location_line]: 61,
        [_Location_file]: null
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 37,
        [_Location_line]: 61,
        [_Location_file]: null
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 50,
        [_Location_line]: 61,
        [_Location_file]: null
      });
    },
    get C267() {
      return C[267] = dart.constList([C[268] || CT.C268, C[269] || CT.C269, C[270] || CT.C270], widget_inspector._Location);
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[267] || CT.C267,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 61,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 27,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 36,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 49,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C272() {
      return C[272] = dart.constList([C[273] || CT.C273, C[274] || CT.C274, C[275] || CT.C275], widget_inspector._Location);
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[272] || CT.C272,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 64,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 32,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 41,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 54,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C277() {
      return C[277] = dart.constList([C[278] || CT.C278, C[279] || CT.C279, C[280] || CT.C280], widget_inspector._Location);
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[277] || CT.C277,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 67,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/group_layer.dart"
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: flutter_map.FitBoundsOptions.prototype,
        [FitBoundsOptions_zoom]: null,
        [FitBoundsOptions_maxZoom]: 17,
        [FitBoundsOptions_padding]: C[282] || CT.C282
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 350000
      });
    },
    get C284() {
      return C[284] = dart.constList([], framework.Widget);
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 27,
        [_Location_line]: 114,
        [_Location_file]: null
      });
    },
    get C286() {
      return C[286] = dart.constList([C[287] || CT.C287], widget_inspector._Location);
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[286] || CT.C286,
        [_Location_name]: null,
        [_Location_column]: 32,
        [_Location_line]: 113,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "angle",
        [_Location_column]: 25,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 25,
        [_Location_line]: 113,
        [_Location_file]: null
      });
    },
    get C289() {
      return C[289] = dart.constList([C[290] || CT.C290, C[291] || CT.C291], widget_inspector._Location);
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[289] || CT.C289,
        [_Location_name]: null,
        [_Location_column]: 40,
        [_Location_line]: 111,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minWidth",
        [_Location_column]: 23,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxWidth",
        [_Location_column]: 23,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minHeight",
        [_Location_column]: 23,
        [_Location_line]: 109,
        [_Location_file]: null
      });
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxHeight",
        [_Location_column]: 23,
        [_Location_line]: 110,
        [_Location_file]: null
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 23,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C293() {
      return C[293] = dart.constList([C[294] || CT.C294, C[295] || CT.C295, C[296] || CT.C296, C[297] || CT.C297, C[298] || CT.C298], widget_inspector._Location);
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[293] || CT.C293,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 106,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C301() {
      return C[301] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 23,
        [_Location_line]: 125,
        [_Location_file]: null
      });
    },
    get C300() {
      return C[300] = dart.constList([C[301] || CT.C301], widget_inspector._Location);
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[300] || CT.C300,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 124,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 19,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C303() {
      return C[303] = dart.constList([C[304] || CT.C304], widget_inspector._Location);
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[303] || CT.C303,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 104,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 17,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C306() {
      return C[306] = dart.constList([C[307] || CT.C307], widget_inspector._Location);
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[306] || CT.C306,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 103,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleStart",
        [_Location_column]: 15,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleUpdate",
        [_Location_column]: 15,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleEnd",
        [_Location_column]: 15,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 15,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPress",
        [_Location_column]: 15,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapDown",
        [_Location_column]: 15,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 15,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C317() {
      return C[317] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C309() {
      return C[309] = dart.constList([C[310] || CT.C310, C[311] || CT.C311, C[312] || CT.C312, C[313] || CT.C313, C[314] || CT.C314, C[315] || CT.C315, C[316] || CT.C316, C[317] || CT.C317], widget_inspector._Location);
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[309] || CT.C309,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 95,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 13,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 13,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPress",
        [_Location_column]: 13,
        [_Location_line]: 93,
        [_Location_file]: null
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDoubleTap",
        [_Location_column]: 13,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C319() {
      return C[319] = dart.constList([C[320] || CT.C320, C[321] || CT.C321, C[322] || CT.C322, C[323] || CT.C323, C[324] || CT.C324], widget_inspector._Location);
    },
    get C318() {
      return C[318] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[319] || CT.C319,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 90,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPointerDown",
        [_Location_column]: 11,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPointerCancel",
        [_Location_column]: 11,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C329() {
      return C[329] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPointerUp",
        [_Location_column]: 11,
        [_Location_line]: 89,
        [_Location_file]: null
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C326() {
      return C[326] = dart.constList([C[327] || CT.C327, C[328] || CT.C328, C[329] || CT.C329, C[330] || CT.C330], widget_inspector._Location);
    },
    get C325() {
      return C[325] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[326] || CT.C326,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 86,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 9,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C334() {
      return C[334] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C332() {
      return C[332] = dart.constList([C[333] || CT.C333, C[334] || CT.C334], widget_inspector._Location);
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[332] || CT.C332,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C336() {
      return C[336] = dart.constList([C[337] || CT.C337], widget_inspector._Location);
    },
    get C335() {
      return C[335] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[336] || CT.C336,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 79,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "options",
        [_Location_column]: 11,
        [_Location_line]: 152,
        [_Location_file]: null
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 29,
        [_Location_line]: 152,
        [_Location_file]: null
      });
    },
    get C342() {
      return C[342] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 49,
        [_Location_line]: 152,
        [_Location_file]: null
      });
    },
    get C339() {
      return C[339] = dart.constList([C[340] || CT.C340, C[341] || CT.C341, C[342] || CT.C342], widget_inspector._Location);
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[339] || CT.C339,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 151,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C345() {
      return C[345] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerLayerOptions",
        [_Location_column]: 26,
        [_Location_line]: 155,
        [_Location_file]: null
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 155,
        [_Location_file]: null
      });
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 45,
        [_Location_line]: 155,
        [_Location_file]: null
      });
    },
    get C344() {
      return C[344] = dart.constList([C[345] || CT.C345, C[346] || CT.C346, C[347] || CT.C347], widget_inspector._Location);
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[344] || CT.C344,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 155,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C350() {
      return C[350] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 28,
        [_Location_line]: 158,
        [_Location_file]: null
      });
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 37,
        [_Location_line]: 158,
        [_Location_file]: null
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 47,
        [_Location_line]: 158,
        [_Location_file]: null
      });
    },
    get C349() {
      return C[349] = dart.constList([C[350] || CT.C350, C[351] || CT.C351, C[352] || CT.C352], widget_inspector._Location);
    },
    get C348() {
      return C[348] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[349] || CT.C349,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 158,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 27,
        [_Location_line]: 161,
        [_Location_file]: null
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 36,
        [_Location_line]: 161,
        [_Location_file]: null
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 46,
        [_Location_line]: 161,
        [_Location_file]: null
      });
    },
    get C354() {
      return C[354] = dart.constList([C[355] || CT.C355, C[356] || CT.C356, C[357] || CT.C357], widget_inspector._Location);
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[354] || CT.C354,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 161,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 26,
        [_Location_line]: 164,
        [_Location_file]: null
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 164,
        [_Location_file]: null
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 45,
        [_Location_line]: 164,
        [_Location_file]: null
      });
    },
    get C359() {
      return C[359] = dart.constList([C[360] || CT.C360, C[361] || CT.C361, C[362] || CT.C362], widget_inspector._Location);
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[359] || CT.C359,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 164,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "groupOpts",
        [_Location_column]: 25,
        [_Location_line]: 167,
        [_Location_file]: null
      });
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 34,
        [_Location_line]: 167,
        [_Location_file]: null
      });
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 44,
        [_Location_line]: 167,
        [_Location_file]: null
      });
    },
    get C364() {
      return C[364] = dart.constList([C[365] || CT.C365, C[366] || CT.C366, C[367] || CT.C367], widget_inspector._Location);
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[364] || CT.C364,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 167,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 32,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 41,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 51,
        [_Location_line]: 170,
        [_Location_file]: null
      });
    },
    get C369() {
      return C[369] = dart.constList([C[370] || CT.C370, C[371] || CT.C371, C[372] || CT.C372], widget_inspector._Location);
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[369] || CT.C369,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 170,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C373() {
      return C[373] = dart.const({
        __proto__: flutter_map.FitBoundsOptions.prototype,
        [FitBoundsOptions_zoom]: null,
        [FitBoundsOptions_maxZoom]: 17,
        [FitBoundsOptions_padding]: C[374] || CT.C374
      });
    },
    get C375() {
      return C[375] = dart.constList([], plugin.MapPlugin);
    }
  }, false);
  var C = Array(376).fill(void 0);
  var I = [
    "package:flutter_map/src/layer/tile_provider/tile_provider.dart",
    "package:flutter_map/src/layer/tile_layer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/src/layer/tile_layer.dart",
    "package:flutter_map/src/layer/polyline_layer.dart",
    "package:flutter_map/src/layer/polygon_layer.dart",
    "package:flutter_map/src/layer/marker_layer.dart",
    "package:flutter_map/src/layer/circle_layer.dart",
    "package:flutter_map/src/plugins/plugin.dart",
    "package:flutter_map/src/layer/overlay_image_layer.dart",
    "package:flutter_map/src/layer/group_layer.dart",
    "package:flutter_map/src/map/map_state_widget.dart",
    "package:flutter_map/src/map/map.dart",
    "package:flutter_map/flutter_map.dart",
    "package:flutter_map/src/gestures/gestures.dart",
    "package:flutter_map/src/map/flutter_map_state.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.13.1/lib/flutter_map.dart"
  ];
  var _getZoomForUrl = dart.privateName(tile_provider, "_getZoomForUrl");
  tile_provider.TileProvider = class TileProvider extends core.Object {
    dispose() {
    }
    getTileUrl(coords, options) {
      let t0, t2, t1, t0$;
      let urlTemplate = options.wmsOptions != null ? dart.nullCheck(options.wmsOptions).getUrl(coords, options.tileSize[$toInt](), options.retinaMode) : options.urlTemplate;
      let z = this[_getZoomForUrl](coords, options);
      let data = new (T$.IdentityMapOfString$String()).from(["x", coords.x[$round]()[$toString](), "y", coords.y[$round]()[$toString](), "z", z[$round]()[$toString](), "s", this.getSubdomain(coords, options), "r", "@2x"]);
      if (options.tms) {
        data[$_set]("y", this.invertY(coords.y[$round](), z[$round]())[$toString]());
      }
      let allOpts = (t0 = T$.LinkedHashMapOfString$String().from(data), (() => {
        t0[$addAll](options.additionalOptions);
        return t0;
      })());
      t0$ = options;
      t1 = dart.nullCheck(urlTemplate);
      t2 = allOpts;
      return t0$.templateFunction(t1, t2);
    }
    [_getZoomForUrl](coords, options) {
      let zoom = coords.z;
      if (options.zoomReverse) {
        zoom = options.maxZoom - zoom;
      }
      return zoom = zoom + options.zoomOffset;
    }
    invertY(y, z) {
      return (1)[$leftShift](z) - 1 - y;
    }
    getSubdomain(coords, options) {
      if (options.subdomains[$isEmpty]) {
        return "";
      }
      let index = (coords.x + coords.y)[$round]()[$modulo](options.subdomains[$length]);
      return options.subdomains[$_get](index);
    }
  };
  (tile_provider.TileProvider.new = function() {
    ;
  }).prototype = tile_provider.TileProvider.prototype;
  dart.addTypeTests(tile_provider.TileProvider);
  dart.addTypeCaches(tile_provider.TileProvider);
  dart.setMethodSignature(tile_provider.TileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.TileProvider.__proto__),
    dispose: dart.fnType(dart.void, []),
    getTileUrl: dart.fnType(core.String, [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions]),
    [_getZoomForUrl]: dart.fnType(core.double, [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions]),
    invertY: dart.fnType(core.int, [core.int, core.int]),
    getSubdomain: dart.fnType(core.String, [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.TileProvider, I[0]);
  tile_provider.NetworkTileProvider = class NetworkTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new network_image_with_retry.NetworkImageWithRetry.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.NetworkTileProvider.new = function() {
    tile_provider.NetworkTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.NetworkTileProvider.prototype;
  dart.addTypeTests(tile_provider.NetworkTileProvider);
  dart.addTypeCaches(tile_provider.NetworkTileProvider);
  dart.setMethodSignature(tile_provider.NetworkTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.NetworkTileProvider.__proto__),
    getImage: dart.fnType(image_provider.ImageProvider$(core.Object), [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.NetworkTileProvider, I[0]);
  tile_provider.NonCachingNetworkTileProvider = class NonCachingNetworkTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new _network_image_web.NetworkImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.NonCachingNetworkTileProvider.new = function() {
    tile_provider.NonCachingNetworkTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.NonCachingNetworkTileProvider.prototype;
  dart.addTypeTests(tile_provider.NonCachingNetworkTileProvider);
  dart.addTypeCaches(tile_provider.NonCachingNetworkTileProvider);
  dart.setMethodSignature(tile_provider.NonCachingNetworkTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.NonCachingNetworkTileProvider.__proto__),
    getImage: dart.fnType(image_provider.ImageProvider$(core.Object), [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.NonCachingNetworkTileProvider, I[0]);
  tile_provider.AssetTileProvider = class AssetTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new image_resolution.AssetImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.AssetTileProvider.new = function() {
    tile_provider.AssetTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.AssetTileProvider.prototype;
  dart.addTypeTests(tile_provider.AssetTileProvider);
  dart.addTypeCaches(tile_provider.AssetTileProvider);
  dart.setMethodSignature(tile_provider.AssetTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.AssetTileProvider.__proto__),
    getImage: dart.fnType(image_provider.ImageProvider$(core.Object), [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.AssetTileProvider, I[0]);
  tile_provider.FileTileProvider = class FileTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new image_provider.FileImage.new(io.File.new(this.getTileUrl(coords, options)));
    }
  };
  (tile_provider.FileTileProvider.new = function() {
    tile_provider.FileTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.FileTileProvider.prototype;
  dart.addTypeTests(tile_provider.FileTileProvider);
  dart.addTypeCaches(tile_provider.FileTileProvider);
  dart.setMethodSignature(tile_provider.FileTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.FileTileProvider.__proto__),
    getImage: dart.fnType(image_provider.ImageProvider$(core.Object), [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.FileTileProvider, I[0]);
  var customTileUrl$ = dart.privateName(tile_provider, "CustomTileProvider.customTileUrl");
  tile_provider.CustomTileProvider = class CustomTileProvider extends tile_provider.TileProvider {
    get customTileUrl() {
      return this[customTileUrl$];
    }
    set customTileUrl(value) {
      super.customTileUrl = value;
    }
    getTileUrl(coords, options) {
      let t1, t0;
      t0 = coords;
      t1 = options;
      return this.customTileUrl(t0, t1);
    }
    getImage(coords, options) {
      return new image_resolution.AssetImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.CustomTileProvider.new = function(opts) {
    let customTileUrl = opts && 'customTileUrl' in opts ? opts.customTileUrl : null;
    this[customTileUrl$] = customTileUrl;
    tile_provider.CustomTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.CustomTileProvider.prototype;
  dart.addTypeTests(tile_provider.CustomTileProvider);
  dart.addTypeCaches(tile_provider.CustomTileProvider);
  dart.setMethodSignature(tile_provider.CustomTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.CustomTileProvider.__proto__),
    getImage: dart.fnType(image_provider.ImageProvider$(core.Object), [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions])
  }));
  dart.setLibraryUri(tile_provider.CustomTileProvider, I[0]);
  dart.setFieldSignature(tile_provider.CustomTileProvider, () => ({
    __proto__: dart.getFields(tile_provider.CustomTileProvider.__proto__),
    customTileUrl: dart.finalFieldType(dart.fnType(core.String, [tile_layer.Coords$(core.num), tile_layer.TileLayerOptions]))
  }));
  var _name$ = dart.privateName(tile_layer, "_name");
  tile_layer.EvictErrorTileStrategy = class EvictErrorTileStrategy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (tile_layer.EvictErrorTileStrategy.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = tile_layer.EvictErrorTileStrategy.prototype;
  dart.addTypeTests(tile_layer.EvictErrorTileStrategy);
  dart.addTypeCaches(tile_layer.EvictErrorTileStrategy);
  dart.setLibraryUri(tile_layer.EvictErrorTileStrategy, I[1]);
  dart.setFieldSignature(tile_layer.EvictErrorTileStrategy, () => ({
    __proto__: dart.getFields(tile_layer.EvictErrorTileStrategy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(tile_layer.EvictErrorTileStrategy, ['toString']);
  tile_layer.EvictErrorTileStrategy.none = C[0] || CT.C0;
  tile_layer.EvictErrorTileStrategy.dispose = C[1] || CT.C1;
  tile_layer.EvictErrorTileStrategy.notVisibleRespectMargin = C[2] || CT.C2;
  tile_layer.EvictErrorTileStrategy.notVisible = C[3] || CT.C3;
  tile_layer.EvictErrorTileStrategy.values = C[4] || CT.C4;
  var urlTemplate$ = dart.privateName(tile_layer, "TileLayerOptions.urlTemplate");
  var tms$ = dart.privateName(tile_layer, "TileLayerOptions.tms");
  var wmsOptions$ = dart.privateName(tile_layer, "TileLayerOptions.wmsOptions");
  var tileSize$ = dart.privateName(tile_layer, "TileLayerOptions.tileSize");
  var minZoom$ = dart.privateName(tile_layer, "TileLayerOptions.minZoom");
  var maxZoom$ = dart.privateName(tile_layer, "TileLayerOptions.maxZoom");
  var minNativeZoom$ = dart.privateName(tile_layer, "TileLayerOptions.minNativeZoom");
  var maxNativeZoom$ = dart.privateName(tile_layer, "TileLayerOptions.maxNativeZoom");
  var zoomReverse$ = dart.privateName(tile_layer, "TileLayerOptions.zoomReverse");
  var zoomOffset$ = dart.privateName(tile_layer, "TileLayerOptions.zoomOffset");
  var subdomains$ = dart.privateName(tile_layer, "TileLayerOptions.subdomains");
  var backgroundColor$ = dart.privateName(tile_layer, "TileLayerOptions.backgroundColor");
  var opacity$ = dart.privateName(tile_layer, "TileLayerOptions.opacity");
  var tileProvider$ = dart.privateName(tile_layer, "TileLayerOptions.tileProvider");
  var keepBuffer$ = dart.privateName(tile_layer, "TileLayerOptions.keepBuffer");
  var placeholderImage$ = dart.privateName(tile_layer, "TileLayerOptions.placeholderImage");
  var errorImage$ = dart.privateName(tile_layer, "TileLayerOptions.errorImage");
  var additionalOptions$ = dart.privateName(tile_layer, "TileLayerOptions.additionalOptions");
  var updateInterval$ = dart.privateName(tile_layer, "TileLayerOptions.updateInterval");
  var tileFadeInDuration$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInDuration");
  var tileFadeInStart$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInStart");
  var tileFadeInStartWhenOverride$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInStartWhenOverride");
  var overrideTilesWhenUrlChanges$ = dart.privateName(tile_layer, "TileLayerOptions.overrideTilesWhenUrlChanges");
  var retinaMode$ = dart.privateName(tile_layer, "TileLayerOptions.retinaMode");
  var errorTileCallback$ = dart.privateName(tile_layer, "TileLayerOptions.errorTileCallback");
  var templateFunction$ = dart.privateName(tile_layer, "TileLayerOptions.templateFunction");
  var tileBuilder$ = dart.privateName(tile_layer, "TileLayerOptions.tileBuilder");
  var tilesContainerBuilder$ = dart.privateName(tile_layer, "TileLayerOptions.tilesContainerBuilder");
  var evictErrorTileStrategy$ = dart.privateName(tile_layer, "TileLayerOptions.evictErrorTileStrategy");
  var fastReplace$ = dart.privateName(tile_layer, "TileLayerOptions.fastReplace");
  var Color_value = dart.privateName(ui, "Color.value");
  tile_layer.TileLayerOptions = class TileLayerOptions extends layer.LayerOptions {
    get urlTemplate() {
      return this[urlTemplate$];
    }
    set urlTemplate(value) {
      super.urlTemplate = value;
    }
    get tms() {
      return this[tms$];
    }
    set tms(value) {
      super.tms = value;
    }
    get wmsOptions() {
      return this[wmsOptions$];
    }
    set wmsOptions(value) {
      super.wmsOptions = value;
    }
    get tileSize() {
      return this[tileSize$];
    }
    set tileSize(value) {
      super.tileSize = value;
    }
    get minZoom() {
      return this[minZoom$];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get minNativeZoom() {
      return this[minNativeZoom$];
    }
    set minNativeZoom(value) {
      super.minNativeZoom = value;
    }
    get maxNativeZoom() {
      return this[maxNativeZoom$];
    }
    set maxNativeZoom(value) {
      super.maxNativeZoom = value;
    }
    get zoomReverse() {
      return this[zoomReverse$];
    }
    set zoomReverse(value) {
      super.zoomReverse = value;
    }
    get zoomOffset() {
      return this[zoomOffset$];
    }
    set zoomOffset(value) {
      super.zoomOffset = value;
    }
    get subdomains() {
      return this[subdomains$];
    }
    set subdomains(value) {
      super.subdomains = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get tileProvider() {
      return this[tileProvider$];
    }
    set tileProvider(value) {
      super.tileProvider = value;
    }
    get keepBuffer() {
      return this[keepBuffer$];
    }
    set keepBuffer(value) {
      super.keepBuffer = value;
    }
    get placeholderImage() {
      return this[placeholderImage$];
    }
    set placeholderImage(value) {
      super.placeholderImage = value;
    }
    get errorImage() {
      return this[errorImage$];
    }
    set errorImage(value) {
      super.errorImage = value;
    }
    get additionalOptions() {
      return this[additionalOptions$];
    }
    set additionalOptions(value) {
      super.additionalOptions = value;
    }
    get updateInterval() {
      return this[updateInterval$];
    }
    set updateInterval(value) {
      super.updateInterval = value;
    }
    get tileFadeInDuration() {
      return this[tileFadeInDuration$];
    }
    set tileFadeInDuration(value) {
      super.tileFadeInDuration = value;
    }
    get tileFadeInStart() {
      return this[tileFadeInStart$];
    }
    set tileFadeInStart(value) {
      super.tileFadeInStart = value;
    }
    get tileFadeInStartWhenOverride() {
      return this[tileFadeInStartWhenOverride$];
    }
    set tileFadeInStartWhenOverride(value) {
      super.tileFadeInStartWhenOverride = value;
    }
    get overrideTilesWhenUrlChanges() {
      return this[overrideTilesWhenUrlChanges$];
    }
    set overrideTilesWhenUrlChanges(value) {
      super.overrideTilesWhenUrlChanges = value;
    }
    get retinaMode() {
      return this[retinaMode$];
    }
    set retinaMode(value) {
      super.retinaMode = value;
    }
    get errorTileCallback() {
      return this[errorTileCallback$];
    }
    set errorTileCallback(value) {
      super.errorTileCallback = value;
    }
    get templateFunction() {
      return this[templateFunction$];
    }
    set templateFunction(value) {
      super.templateFunction = value;
    }
    get tileBuilder() {
      return this[tileBuilder$];
    }
    set tileBuilder(value) {
      super.tileBuilder = value;
    }
    get tilesContainerBuilder() {
      return this[tilesContainerBuilder$];
    }
    set tilesContainerBuilder(value) {
      super.tilesContainerBuilder = value;
    }
    get evictErrorTileStrategy() {
      return this[evictErrorTileStrategy$];
    }
    set evictErrorTileStrategy(value) {
      super.evictErrorTileStrategy = value;
    }
    get fastReplace() {
      return this[fastReplace$];
    }
    set fastReplace(value) {
      super.fastReplace = value;
    }
  };
  (tile_layer.TileLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let urlTemplate = opts && 'urlTemplate' in opts ? opts.urlTemplate : null;
    let tileSize = opts && 'tileSize' in opts ? opts.tileSize : 256;
    let minZoom = opts && 'minZoom' in opts ? opts.minZoom : 0;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : 18;
    let minNativeZoom = opts && 'minNativeZoom' in opts ? opts.minNativeZoom : null;
    let maxNativeZoom = opts && 'maxNativeZoom' in opts ? opts.maxNativeZoom : null;
    let zoomReverse = opts && 'zoomReverse' in opts ? opts.zoomReverse : false;
    let zoomOffset = opts && 'zoomOffset' in opts ? opts.zoomOffset : 0;
    let additionalOptions = opts && 'additionalOptions' in opts ? opts.additionalOptions : null;
    let subdomains = opts && 'subdomains' in opts ? opts.subdomains : C[5] || CT.C5;
    let keepBuffer = opts && 'keepBuffer' in opts ? opts.keepBuffer : 2;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[6] || CT.C6;
    let placeholderImage = opts && 'placeholderImage' in opts ? opts.placeholderImage : null;
    let errorImage = opts && 'errorImage' in opts ? opts.errorImage : null;
    let tileProvider = opts && 'tileProvider' in opts ? opts.tileProvider : C[7] || CT.C7;
    let tms = opts && 'tms' in opts ? opts.tms : false;
    let wmsOptions = opts && 'wmsOptions' in opts ? opts.wmsOptions : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    let updateInterval = opts && 'updateInterval' in opts ? opts.updateInterval : 200;
    let tileFadeInDuration = opts && 'tileFadeInDuration' in opts ? opts.tileFadeInDuration : 100;
    let tileFadeInStart = opts && 'tileFadeInStart' in opts ? opts.tileFadeInStart : 0;
    let tileFadeInStartWhenOverride = opts && 'tileFadeInStartWhenOverride' in opts ? opts.tileFadeInStartWhenOverride : 0;
    let overrideTilesWhenUrlChanges = opts && 'overrideTilesWhenUrlChanges' in opts ? opts.overrideTilesWhenUrlChanges : false;
    let retinaMode = opts && 'retinaMode' in opts ? opts.retinaMode : false;
    let errorTileCallback = opts && 'errorTileCallback' in opts ? opts.errorTileCallback : null;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    let templateFunction = opts && 'templateFunction' in opts ? opts.templateFunction : C[8] || CT.C8;
    let tileBuilder = opts && 'tileBuilder' in opts ? opts.tileBuilder : null;
    let tilesContainerBuilder = opts && 'tilesContainerBuilder' in opts ? opts.tilesContainerBuilder : null;
    let evictErrorTileStrategy = opts && 'evictErrorTileStrategy' in opts ? opts.evictErrorTileStrategy : C[0] || CT.C0;
    let fastReplace = opts && 'fastReplace' in opts ? opts.fastReplace : false;
    this[urlTemplate$] = urlTemplate;
    this[minNativeZoom$] = minNativeZoom;
    this[maxNativeZoom$] = maxNativeZoom;
    this[zoomReverse$] = zoomReverse;
    this[subdomains$] = subdomains;
    this[keepBuffer$] = keepBuffer;
    this[backgroundColor$] = backgroundColor;
    this[placeholderImage$] = placeholderImage;
    this[errorImage$] = errorImage;
    this[tileProvider$] = tileProvider;
    this[tms$] = tms;
    this[wmsOptions$] = wmsOptions;
    this[opacity$] = opacity;
    this[tileFadeInStart$] = tileFadeInStart;
    this[tileFadeInStartWhenOverride$] = tileFadeInStartWhenOverride;
    this[overrideTilesWhenUrlChanges$] = overrideTilesWhenUrlChanges;
    this[retinaMode$] = retinaMode;
    this[errorTileCallback$] = errorTileCallback;
    this[templateFunction$] = templateFunction;
    this[tileBuilder$] = tileBuilder;
    this[tilesContainerBuilder$] = tilesContainerBuilder;
    this[evictErrorTileStrategy$] = evictErrorTileStrategy;
    this[fastReplace$] = fastReplace;
    this[updateInterval$] = updateInterval <= 0 ? null : new core.Duration.new({milliseconds: updateInterval});
    this[tileFadeInDuration$] = tileFadeInDuration <= 0 ? null : new core.Duration.new({milliseconds: tileFadeInDuration});
    if (!(tileFadeInStart >= 0.0 && tileFadeInStart <= 1.0)) dart.assertFailed(null, I[2], 292, 16, "tileFadeInStart >= 0.0 && tileFadeInStart <= 1.0");
    if (!(tileFadeInStartWhenOverride >= 0.0 && tileFadeInStartWhenOverride <= 1.0)) dart.assertFailed(null, I[2], 293, 16, "tileFadeInStartWhenOverride >= 0.0 &&\n            tileFadeInStartWhenOverride <= 1.0");
    this[maxZoom$] = wmsOptions == null && retinaMode && maxZoom > 0.0 && !zoomReverse ? maxZoom - 1.0 : maxZoom;
    this[minZoom$] = wmsOptions == null && retinaMode && maxZoom > 0.0 && zoomReverse ? math.max(core.double, minZoom + 1.0, 0.0) : minZoom;
    this[zoomOffset$] = wmsOptions == null && retinaMode && maxZoom > 0.0 ? zoomReverse ? zoomOffset - 1.0 : zoomOffset + 1.0 : zoomOffset;
    this[tileSize$] = wmsOptions == null && retinaMode && maxZoom > 0.0 ? (tileSize / 2.0)[$floorToDouble]() : tileSize;
    this[additionalOptions$] = additionalOptions == null ? C[9] || CT.C9 : T$.LinkedHashMapOfString$String().from(additionalOptions);
    tile_layer.TileLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    ;
  }).prototype = tile_layer.TileLayerOptions.prototype;
  dart.addTypeTests(tile_layer.TileLayerOptions);
  dart.addTypeCaches(tile_layer.TileLayerOptions);
  dart.setLibraryUri(tile_layer.TileLayerOptions, I[1]);
  dart.setFieldSignature(tile_layer.TileLayerOptions, () => ({
    __proto__: dart.getFields(tile_layer.TileLayerOptions.__proto__),
    urlTemplate: dart.finalFieldType(dart.nullable(core.String)),
    tms: dart.finalFieldType(core.bool),
    wmsOptions: dart.finalFieldType(dart.nullable(tile_layer.WMSTileLayerOptions)),
    tileSize: dart.finalFieldType(core.double),
    minZoom: dart.finalFieldType(core.double),
    maxZoom: dart.finalFieldType(core.double),
    minNativeZoom: dart.finalFieldType(dart.nullable(core.double)),
    maxNativeZoom: dart.finalFieldType(dart.nullable(core.double)),
    zoomReverse: dart.finalFieldType(core.bool),
    zoomOffset: dart.finalFieldType(core.double),
    subdomains: dart.finalFieldType(core.List$(core.String)),
    backgroundColor: dart.finalFieldType(ui.Color),
    opacity: dart.finalFieldType(core.double),
    tileProvider: dart.finalFieldType(tile_provider.TileProvider),
    keepBuffer: dart.finalFieldType(core.int),
    placeholderImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    errorImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    additionalOptions: dart.finalFieldType(core.Map$(core.String, core.String)),
    updateInterval: dart.finalFieldType(dart.nullable(core.Duration)),
    tileFadeInDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    tileFadeInStart: dart.finalFieldType(core.double),
    tileFadeInStartWhenOverride: dart.finalFieldType(core.double),
    overrideTilesWhenUrlChanges: dart.finalFieldType(core.bool),
    retinaMode: dart.finalFieldType(core.bool),
    errorTileCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tile_layer.Tile, dart.dynamic]))),
    templateFunction: dart.finalFieldType(dart.fnType(core.String, [core.String, core.Map$(core.String, core.String)])),
    tileBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, tile_layer.Tile]))),
    tilesContainerBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, core.List$(tile_layer.Tile)]))),
    evictErrorTileStrategy: dart.finalFieldType(tile_layer.EvictErrorTileStrategy),
    fastReplace: dart.finalFieldType(core.bool)
  }));
  var service = dart.privateName(tile_layer, "WMSTileLayerOptions.service");
  var request = dart.privateName(tile_layer, "WMSTileLayerOptions.request");
  var baseUrl$ = dart.privateName(tile_layer, "WMSTileLayerOptions.baseUrl");
  var layers$ = dart.privateName(tile_layer, "WMSTileLayerOptions.layers");
  var styles$ = dart.privateName(tile_layer, "WMSTileLayerOptions.styles");
  var format$ = dart.privateName(tile_layer, "WMSTileLayerOptions.format");
  var version$ = dart.privateName(tile_layer, "WMSTileLayerOptions.version");
  var transparent$ = dart.privateName(tile_layer, "WMSTileLayerOptions.transparent");
  var crs$ = dart.privateName(tile_layer, "WMSTileLayerOptions.crs");
  var otherParameters$ = dart.privateName(tile_layer, "WMSTileLayerOptions.otherParameters");
  var Earth_wrapLat = dart.privateName(crs, "Earth.wrapLat");
  var Tuple2_item2 = dart.privateName(tuple, "Tuple2.item2");
  var Tuple2_item1 = dart.privateName(tuple, "Tuple2.item1");
  var Earth_wrapLng = dart.privateName(crs, "Earth.wrapLng");
  var Transformation_d = dart.privateName(crs, "Transformation.d");
  var Transformation_c = dart.privateName(crs, "Transformation.c");
  var Transformation_b = dart.privateName(crs, "Transformation.b");
  var Transformation_a = dart.privateName(crs, "Transformation.a");
  var Epsg3857_transformation = dart.privateName(crs, "Epsg3857.transformation");
  var Epsg3857_projection = dart.privateName(crs, "Epsg3857.projection");
  var Epsg3857_code = dart.privateName(crs, "Epsg3857.code");
  var __WMSTileLayerOptions__encodedBaseUrl = dart.privateName(tile_layer, "_#WMSTileLayerOptions#_encodedBaseUrl");
  var __WMSTileLayerOptions__versionNumber = dart.privateName(tile_layer, "_#WMSTileLayerOptions#_versionNumber");
  var _versionNumber = dart.privateName(tile_layer, "_versionNumber");
  var _encodedBaseUrl = dart.privateName(tile_layer, "_encodedBaseUrl");
  var _buildEncodedBaseUrl = dart.privateName(tile_layer, "_buildEncodedBaseUrl");
  tile_layer.WMSTileLayerOptions = class WMSTileLayerOptions extends core.Object {
    get service() {
      return this[service];
    }
    set service(value) {
      super.service = value;
    }
    get request() {
      return this[request];
    }
    set request(value) {
      super.request = value;
    }
    get baseUrl() {
      return this[baseUrl$];
    }
    set baseUrl(value) {
      super.baseUrl = value;
    }
    get layers() {
      return this[layers$];
    }
    set layers(value) {
      super.layers = value;
    }
    get styles() {
      return this[styles$];
    }
    set styles(value) {
      super.styles = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
    get transparent() {
      return this[transparent$];
    }
    set transparent(value) {
      super.transparent = value;
    }
    get crs() {
      return this[crs$];
    }
    set crs(value) {
      super.crs = value;
    }
    get otherParameters() {
      return this[otherParameters$];
    }
    set otherParameters(value) {
      super.otherParameters = value;
    }
    get [_encodedBaseUrl]() {
      let t0;
      t0 = this[__WMSTileLayerOptions__encodedBaseUrl];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_encodedBaseUrl")) : t0;
    }
    set [_encodedBaseUrl](t0) {
      if (this[__WMSTileLayerOptions__encodedBaseUrl] == null)
        this[__WMSTileLayerOptions__encodedBaseUrl] = t0;
      else
        dart.throw(new _internal.LateError.fieldAI("_encodedBaseUrl"));
    }
    get [_versionNumber]() {
      let t1;
      t1 = this[__WMSTileLayerOptions__versionNumber];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_versionNumber")) : t1;
    }
    set [_versionNumber](t1) {
      if (this[__WMSTileLayerOptions__versionNumber] == null)
        this[__WMSTileLayerOptions__versionNumber] = t1;
      else
        dart.throw(new _internal.LateError.fieldAI("_versionNumber"));
    }
    [_buildEncodedBaseUrl]() {
      let t2;
      let projectionKey = this[_versionNumber] >= 1.3 ? "crs" : "srs";
      let buffer = (t2 = new core.StringBuffer.new(this.baseUrl), (() => {
        t2.write("&service=" + this.service);
        t2.write("&request=" + this.request);
        t2.write("&layers=" + this.layers[$map](core.String, C[14] || CT.C14)[$join](","));
        t2.write("&styles=" + this.styles[$map](core.String, C[14] || CT.C14)[$join](","));
        t2.write("&format=" + core.Uri.encodeComponent(this.format));
        t2.write("&" + projectionKey + "=" + core.Uri.encodeComponent(this.crs.code));
        t2.write("&version=" + core.Uri.encodeComponent(this.version));
        t2.write("&transparent=" + dart.str(this.transparent));
        return t2;
      })());
      this.otherParameters[$forEach](dart.fn((k, v) => buffer.write("&" + k + "=" + core.Uri.encodeComponent(v)), T$.StringAndStringTovoid()));
      return buffer.toString();
    }
    getUrl(coords, tileSize, retinaMode) {
      let tileSizePoint = new (T$.CustomPointOfnum()).new(tileSize, tileSize);
      let nvPoint = coords.scaleBy(tileSizePoint);
      let sePoint = nvPoint['+'](tileSizePoint);
      let nvCoords = dart.nullCheck(this.crs.pointToLatLng(nvPoint, coords.z));
      let seCoords = dart.nullCheck(this.crs.pointToLatLng(sePoint, coords.z));
      let nv = this.crs.projection.project(nvCoords);
      let se = this.crs.projection.project(seCoords);
      let bounds = T$.BoundsOfnum().new(nv, se);
      let bbox = this[_versionNumber] >= 1.3 && crs.Epsg4326.is(this.crs) ? T$.JSArrayOfnum().of([bounds.min.y, bounds.min.x, bounds.max.y, bounds.max.x]) : T$.JSArrayOfnum().of([bounds.min.x, bounds.min.y, bounds.max.x, bounds.max.y]);
      let buffer = new core.StringBuffer.new(this[_encodedBaseUrl]);
      buffer.write("&width=" + dart.str(retinaMode ? tileSize * 2 : tileSize));
      buffer.write("&height=" + dart.str(retinaMode ? tileSize * 2 : tileSize));
      buffer.write("&bbox=" + bbox[$join](","));
      return buffer.toString();
    }
  };
  (tile_layer.WMSTileLayerOptions.new = function(opts) {
    let t0;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let layers = opts && 'layers' in opts ? opts.layers : C[5] || CT.C5;
    let styles = opts && 'styles' in opts ? opts.styles : C[5] || CT.C5;
    let format = opts && 'format' in opts ? opts.format : "image/png";
    let version = opts && 'version' in opts ? opts.version : "1.1.1";
    let transparent = opts && 'transparent' in opts ? opts.transparent : true;
    let crs = opts && 'crs' in opts ? opts.crs : C[10] || CT.C10;
    let otherParameters = opts && 'otherParameters' in opts ? opts.otherParameters : C[9] || CT.C9;
    this[service] = "WMS";
    this[request] = "GetMap";
    this[__WMSTileLayerOptions__encodedBaseUrl] = null;
    this[__WMSTileLayerOptions__versionNumber] = null;
    this[baseUrl$] = baseUrl;
    this[layers$] = layers;
    this[styles$] = styles;
    this[format$] = format;
    this[version$] = version;
    this[transparent$] = transparent;
    this[crs$] = crs;
    this[otherParameters$] = otherParameters;
    this[_versionNumber] = (t0 = core.double.tryParse(this.version[$split](".")[$take](2)[$join](".")), t0 == null ? 0.0 : t0);
    this[_encodedBaseUrl] = this[_buildEncodedBaseUrl]();
  }).prototype = tile_layer.WMSTileLayerOptions.prototype;
  dart.addTypeTests(tile_layer.WMSTileLayerOptions);
  dart.addTypeCaches(tile_layer.WMSTileLayerOptions);
  dart.setMethodSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getMethods(tile_layer.WMSTileLayerOptions.__proto__),
    [_buildEncodedBaseUrl]: dart.fnType(core.String, []),
    getUrl: dart.fnType(core.String, [tile_layer.Coords$(core.num), core.int, core.bool])
  }));
  dart.setGetterSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getGetters(tile_layer.WMSTileLayerOptions.__proto__),
    [_encodedBaseUrl]: core.String,
    [_versionNumber]: core.double
  }));
  dart.setSetterSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getSetters(tile_layer.WMSTileLayerOptions.__proto__),
    [_encodedBaseUrl]: core.String,
    [_versionNumber]: core.double
  }));
  dart.setLibraryUri(tile_layer.WMSTileLayerOptions, I[1]);
  dart.setFieldSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getFields(tile_layer.WMSTileLayerOptions.__proto__),
    service: dart.finalFieldType(core.String),
    request: dart.finalFieldType(core.String),
    baseUrl: dart.finalFieldType(core.String),
    layers: dart.finalFieldType(core.List$(core.String)),
    styles: dart.finalFieldType(core.List$(core.String)),
    format: dart.finalFieldType(core.String),
    version: dart.finalFieldType(core.String),
    transparent: dart.finalFieldType(core.bool),
    crs: dart.finalFieldType(crs.Crs),
    otherParameters: dart.finalFieldType(core.Map$(core.String, core.String)),
    [__WMSTileLayerOptions__encodedBaseUrl]: dart.fieldType(dart.nullable(core.String)),
    [__WMSTileLayerOptions__versionNumber]: dart.fieldType(dart.nullable(core.double))
  }));
  var options$ = dart.privateName(tile_layer, "TileLayerWidget.options");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  tile_layer.TileLayerWidget = class TileLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new tile_layer.TileLayer.new({mapState: mapState, stream: mapState.onMoved, options: this.options, $creationLocationd_0dea112b090073317d4: C[15] || CT.C15});
    }
  };
  (tile_layer.TileLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$] = options;
    tile_layer.TileLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.TileLayerWidget.prototype;
  dart.addTypeTests(tile_layer.TileLayerWidget);
  dart.addTypeCaches(tile_layer.TileLayerWidget);
  dart.setMethodSignature(tile_layer.TileLayerWidget, () => ({
    __proto__: dart.getMethods(tile_layer.TileLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(tile_layer.TileLayerWidget, I[1]);
  dart.setFieldSignature(tile_layer.TileLayerWidget, () => ({
    __proto__: dart.getFields(tile_layer.TileLayerWidget.__proto__),
    options: dart.finalFieldType(tile_layer.TileLayerOptions)
  }));
  var options$0 = dart.privateName(tile_layer, "TileLayer.options");
  var mapState$ = dart.privateName(tile_layer, "TileLayer.mapState");
  var stream$ = dart.privateName(tile_layer, "TileLayer.stream");
  tile_layer.TileLayer = class TileLayer extends framework.StatefulWidget {
    get options() {
      return this[options$0];
    }
    set options(value) {
      super.options = value;
    }
    get mapState() {
      return this[mapState$];
    }
    set mapState(value) {
      super.mapState = value;
    }
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      super.stream = value;
    }
    createState() {
      return new tile_layer._TileLayerState.new();
    }
  };
  (tile_layer.TileLayer.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let mapState = opts && 'mapState' in opts ? opts.mapState : null;
    let stream = opts && 'stream' in opts ? opts.stream : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$0] = options;
    this[mapState$] = mapState;
    this[stream$] = stream;
    tile_layer.TileLayer.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.TileLayer.prototype;
  dart.addTypeTests(tile_layer.TileLayer);
  dart.addTypeCaches(tile_layer.TileLayer);
  dart.setMethodSignature(tile_layer.TileLayer, () => ({
    __proto__: dart.getMethods(tile_layer.TileLayer.__proto__),
    createState: dart.fnType(framework.State$(framework.StatefulWidget), [])
  }));
  dart.setLibraryUri(tile_layer.TileLayer, I[1]);
  dart.setFieldSignature(tile_layer.TileLayer, () => ({
    __proto__: dart.getFields(tile_layer.TileLayer.__proto__),
    options: dart.finalFieldType(tile_layer.TileLayerOptions),
    mapState: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(async.Stream$(core.Null))
  }));
  var ___TileLayerState__globalTileRange = dart.privateName(tile_layer, "_#_TileLayerState#_globalTileRange");
  var _wrapX = dart.privateName(tile_layer, "_wrapX");
  var _wrapY = dart.privateName(tile_layer, "_wrapY");
  var _tileZoom = dart.privateName(tile_layer, "_tileZoom");
  var _level = dart.privateName(tile_layer, "_level");
  var _moveSub = dart.privateName(tile_layer, "_moveSub");
  var _throttleUpdate = dart.privateName(tile_layer, "_throttleUpdate");
  var ___TileLayerState__tileSize = dart.privateName(tile_layer, "_#_TileLayerState#_tileSize");
  var _tiles = dart.privateName(tile_layer, "_tiles");
  var _levels = dart.privateName(tile_layer, "_levels");
  var _pruneLater = dart.privateName(tile_layer, "_pruneLater");
  var _globalTileRange = dart.privateName(tile_layer, "_globalTileRange");
  var _tileSize = dart.privateName(tile_layer, "_tileSize");
  var _resetView = dart.privateName(tile_layer, "_resetView");
  var _update = dart.privateName(tile_layer, "_update");
  var _handleMove = dart.privateName(tile_layer, "_handleMove");
  var _initThrottleUpdate = dart.privateName(tile_layer, "_initThrottleUpdate");
  var _isZoomOutsideMinMax = dart.privateName(tile_layer, "_isZoomOutsideMinMax");
  var MapEquality__valueEquality = dart.privateName(equality, "MapEquality._valueEquality");
  var MapEquality__keyEquality = dart.privateName(equality, "MapEquality._keyEquality");
  var _wrapCoords = dart.privateName(tile_layer, "_wrapCoords");
  var _removeAllTiles = dart.privateName(tile_layer, "_removeAllTiles");
  var _createTileWidget = dart.privateName(tile_layer, "_createTileWidget");
  var _abortLoading = dart.privateName(tile_layer, "_abortLoading");
  var _hasLevelChildren = dart.privateName(tile_layer, "_hasLevelChildren");
  var _removeTilesAtZoom = dart.privateName(tile_layer, "_removeTilesAtZoom");
  var _setZoomTransform = dart.privateName(tile_layer, "_setZoomTransform");
  var _updateLevels = dart.privateName(tile_layer, "_updateLevels");
  var _retainParent = dart.privateName(tile_layer, "_retainParent");
  var _retainChildren = dart.privateName(tile_layer, "_retainChildren");
  var _removeTile = dart.privateName(tile_layer, "_removeTile");
  var _pruneTiles = dart.privateName(tile_layer, "_pruneTiles");
  var _tileCoordsToKey = dart.privateName(tile_layer, "_tileCoordsToKey");
  var _setView = dart.privateName(tile_layer, "_setView");
  var _clampZoom = dart.privateName(tile_layer, "_clampZoom");
  var _resetGrid = dart.privateName(tile_layer, "_resetGrid");
  var _setZoomTransforms = dart.privateName(tile_layer, "_setZoomTransforms");
  var _pxBoundsToTileRange = dart.privateName(tile_layer, "_pxBoundsToTileRange");
  var _getTiledPixelBounds = dart.privateName(tile_layer, "_getTiledPixelBounds");
  var _isValidTile = dart.privateName(tile_layer, "_isValidTile");
  var _evictErrorTilesBasedOnStrategy = dart.privateName(tile_layer, "_evictErrorTilesBasedOnStrategy");
  var _addTile = dart.privateName(tile_layer, "_addTile");
  var _keyToTileCoords = dart.privateName(tile_layer, "_keyToTileCoords");
  var _getTilePos = dart.privateName(tile_layer, "_getTilePos");
  var _tileReady = dart.privateName(tile_layer, "_tileReady");
  var _noTilesToLoad = dart.privateName(tile_layer, "_noTilesToLoad");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Point_y = dart.privateName(math, "Point.y");
  var Point_x = dart.privateName(math, "Point.x");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(tile_layer.TileLayer) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(tile_layer.TileLayer)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(tile_layer.TileLayer));
  tile_layer._TileLayerState = class _TileLayerState extends State_TickerProviderStateMixin$36 {
    get map() {
      return this.widget.mapState;
    }
    get options() {
      return this.widget.options;
    }
    get [_globalTileRange]() {
      let t2;
      t2 = this[___TileLayerState__globalTileRange];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_globalTileRange")) : t2;
    }
    set [_globalTileRange](t2) {
      this[___TileLayerState__globalTileRange] = t2;
    }
    get [_tileSize]() {
      let t3;
      t3 = this[___TileLayerState__tileSize];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_tileSize")) : t3;
    }
    set [_tileSize](t3) {
      this[___TileLayerState__tileSize] = t3;
    }
    initState() {
      super.initState();
      this[_tileSize] = new (T$.CustomPointOfnum()).new(this.options.tileSize, this.options.tileSize);
      this[_resetView]();
      this[_update](null);
      this[_moveSub] = this.widget.stream.listen(dart.fn(_ => this[_handleMove](), T$.ObjectNTovoid()));
      this[_initThrottleUpdate]();
    }
    didUpdateWidget(oldWidget) {
      let t4, t4$, t4$0, t4$1, t4$2;
      tile_layer.TileLayer.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      let reloadTiles = false;
      if (oldWidget.options.tileSize !== this.options.tileSize) {
        this[_tileSize] = new (T$.CustomPointOfnum()).new(this.options.tileSize, this.options.tileSize);
        reloadTiles = true;
      }
      if (oldWidget.options.retinaMode !== this.options.retinaMode) {
        reloadTiles = true;
      }
      reloadTiles = !!(reloadTiles | this[_isZoomOutsideMinMax]());
      if (!dart.equals(oldWidget.options.updateInterval, this.options.updateInterval)) {
        t4 = this[_throttleUpdate];
        t4 == null ? null : t4.close();
        this[_initThrottleUpdate]();
      }
      if (!reloadTiles) {
        let oldUrl = (t4$0 = (t4$ = oldWidget.options.wmsOptions, t4$ == null ? null : t4$[_encodedBaseUrl]), t4$0 == null ? oldWidget.options.urlTemplate : t4$0);
        let newUrl = (t4$2 = (t4$1 = this.options.wmsOptions, t4$1 == null ? null : t4$1[_encodedBaseUrl]), t4$2 == null ? this.options.urlTemplate : t4$2);
        let oldOptions = oldWidget.options.additionalOptions;
        let newOptions = this.options.additionalOptions;
        if (oldUrl != newUrl || !(C[20] || CT.C20).equals(oldOptions, newOptions)) {
          if (this.options.overrideTilesWhenUrlChanges) {
            for (let tile of this[_tiles][$values]) {
              tile.imageProvider = this.options.tileProvider.getImage(this[_wrapCoords](tile.coords), this.options);
              tile.loadTileImage();
            }
          } else {
            reloadTiles = true;
          }
        }
      }
      if (reloadTiles) {
        this[_removeAllTiles]();
        this[_resetView]();
        this[_update](null);
      }
    }
    [_isZoomOutsideMinMax]() {
      for (let tile of this[_tiles][$values]) {
        if (tile.level.zoom > this.options.maxZoom || tile.level.zoom < this.options.minZoom) {
          return true;
        }
      }
      return false;
    }
    [_initThrottleUpdate]() {
      if (this.options.updateInterval == null) {
        this[_throttleUpdate] = null;
      } else {
        this[_throttleUpdate] = T$.StreamControllerOfLatLngN().new({sync: true});
        dart.nullCheck(this[_throttleUpdate]).stream.transform(T$.LatLngN(), util.throttleStreamTransformerWithTrailingCall(T$.LatLngN(), dart.nullCheck(this.options.updateInterval))).listen(dart.bind(this, _update));
      }
    }
    dispose() {
      let t4, t4$, t4$0;
      this[_removeAllTiles]();
      t4 = this[_moveSub];
      t4 == null ? null : t4.cancel();
      t4$ = this[_pruneLater];
      t4$ == null ? null : t4$.cancel();
      this.options.tileProvider.dispose();
      t4$0 = this[_throttleUpdate];
      t4$0 == null ? null : t4$0.close();
      super.dispose();
    }
    build(context) {
      let t4;
      let tilesToRender = (t4 = this[_tiles][$values][$toList](), (() => {
        t4[$sort]();
        return t4;
      })());
      let tileWidgets = (() => {
        let t4 = T$.JSArrayOfWidget().of([]);
        for (let tile of tilesToRender)
          t4[$add](this[_createTileWidget](tile));
        return t4;
      })();
      let tilesContainer = new basic.Stack.new({children: tileWidgets, $creationLocationd_0dea112b090073317d4: C[22] || CT.C22});
      return new basic.Opacity.new({opacity: this.options.opacity, child: new container.Container.new({color: this.options.backgroundColor, child: this.options.tilesContainerBuilder == null ? tilesContainer : dart.nullCheck(this.options.tilesContainerBuilder)(context, tilesContainer, tilesToRender), $creationLocationd_0dea112b090073317d4: C[25] || CT.C25}), $creationLocationd_0dea112b090073317d4: C[29] || CT.C29});
    }
    [_createTileWidget](tile) {
      let tilePos = tile.tilePos;
      let level = tile.level;
      let tileSize = this.getTileSize();
      let pos = tilePos.multiplyBy(level.scale)['+'](level.translatePoint);
      let width = tileSize.x * level.scale;
      let height = tileSize.y * level.scale;
      let content = new tile_layer.AnimatedTile.new({tile: tile, errorImage: this.options.errorImage, tileBuilder: this.options.tileBuilder, $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
      return new basic.Positioned.new({key: new (T$.ValueKeyOfString()).new(tile.coordsKey), left: pos.x[$toDouble](), top: pos.y[$toDouble](), width: width[$toDouble](), height: height[$toDouble](), child: content, $creationLocationd_0dea112b090073317d4: C[38] || CT.C38});
    }
    [_abortLoading]() {
      let toRemove = T$.JSArrayOfString().of([]);
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (tile.coords.z !== this[_tileZoom]) {
          if (tile.loaded == null) {
            toRemove[$add](entry.key);
          }
        }
      }
      for (let key of toRemove) {
        let tile = dart.nullCheck(this[_tiles][$_get](key));
        tile.tileReady = null;
        tile.dispose(tile.loadError && this.options.evictErrorTileStrategy !== tile_layer.EvictErrorTileStrategy.none);
        this[_tiles][$remove](key);
      }
    }
    getTileSize() {
      return this[_tileSize];
    }
    [_hasLevelChildren](lvl) {
      for (let tile of this[_tiles][$values]) {
        if (tile.coords.z === lvl) {
          return true;
        }
      }
      return false;
    }
    [_updateLevels]() {
      let t7, t6, t5;
      let zoom = this[_tileZoom];
      let maxZoom = this.options.maxZoom;
      if (zoom == null) return null;
      let toRemove = T$.JSArrayOfdouble().of([]);
      for (let entry of this[_levels][$entries]) {
        let z = entry.key;
        let lvl = entry.value;
        if (z === zoom || this[_hasLevelChildren](z)) {
          lvl.zIndex = maxZoom - (dart.notNull(zoom) - z)[$abs]();
        } else {
          toRemove[$add](z);
        }
      }
      for (let z of toRemove) {
        this[_removeTilesAtZoom](z);
        this[_levels][$remove](z);
      }
      let level = this[_levels][$_get](zoom);
      let map = this.map;
      if (level == null) {
        level = (t5 = this[_levels], t6 = zoom, t7 = new tile_layer.Level.new(), t5[$_set](t6, t7), t7);
        level.zIndex = maxZoom;
        level.origin = map.project(map.unproject(map.getPixelOrigin()), zoom);
        level.zoom = zoom;
        this[_setZoomTransform](level, map.center, map.zoom);
      }
      return this[_level] = level;
    }
    [_pruneTiles]() {
      let zoom = this[_tileZoom];
      if (zoom == null) {
        this[_removeAllTiles]();
        return;
      }
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        tile.retain = tile.current;
      }
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (tile.current && !tile.active) {
          let coords = tile.coords;
          if (!this[_retainParent](coords.x, coords.y, coords.z, coords.z - 5)) {
            this[_retainChildren](coords.x, coords.y, coords.z, coords.z + 2);
          }
        }
      }
      let toRemove = T$.JSArrayOfString().of([]);
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (!tile.retain) {
          toRemove[$add](entry.key);
        }
      }
      for (let key of toRemove) {
        this[_removeTile](key);
      }
    }
    [_removeTilesAtZoom](zoom) {
      let toRemove = T$.JSArrayOfString().of([]);
      for (let entry of this[_tiles][$entries]) {
        if (entry.value.coords.z !== zoom) {
          continue;
        }
        toRemove[$add](entry.key);
      }
      for (let key of toRemove) {
        this[_removeTile](key);
      }
    }
    [_removeAllTiles]() {
      let toRemove = T$.LinkedHashMapOfString$Tile().from(this[_tiles]);
      for (let key of toRemove[$keys]) {
        this[_removeTile](key);
      }
    }
    [_retainParent](x, y, z, minZoom) {
      let x2 = (x / 2)[$floorToDouble]();
      let y2 = (y / 2)[$floorToDouble]();
      let z2 = z - 1;
      let coords2 = new (T$.CoordsOfdouble()).new(x2, y2);
      coords2.z = z2;
      let key = this[_tileCoordsToKey](coords2);
      let tile = this[_tiles][$_get](key);
      if (tile != null) {
        if (tile.active) {
          tile.retain = true;
          return true;
        } else if (tile.loaded != null) {
          tile.retain = true;
        }
      }
      if (z2 > minZoom) {
        return this[_retainParent](x2, y2, z2, minZoom);
      }
      return false;
    }
    [_retainChildren](x, y, z, maxZoom) {
      for (let i = 2 * x; i < 2 * x + 2; i = i + 1) {
        for (let j = 2 * y; j < 2 * y + 2; j = j + 1) {
          let coords = new (T$.CoordsOfdouble()).new(i, j);
          coords.z = z + 1;
          let key = this[_tileCoordsToKey](coords);
          let tile = this[_tiles][$_get](key);
          if (tile != null) {
            if (tile.active) {
              tile.retain = true;
              continue;
            } else if (tile.loaded != null) {
              tile.retain = true;
            }
          }
          if (z + 1 < maxZoom) {
            this[_retainChildren](i, j, z + 1, maxZoom);
          }
        }
      }
    }
    [_resetView]() {
      this[_setView](this.map.center, this.map.zoom);
    }
    [_clampZoom](zoom) {
      if (this.options.minNativeZoom != null && zoom < dart.nullCheck(this.options.minNativeZoom)) {
        return dart.nullCheck(this.options.minNativeZoom);
      }
      if (this.options.maxNativeZoom != null && dart.nullCheck(this.options.maxNativeZoom) < zoom) {
        return dart.nullCheck(this.options.maxNativeZoom);
      }
      return zoom;
    }
    [_setView](center, zoom) {
      let tileZoom = this[_clampZoom](zoom[$roundToDouble]());
      if (dart.notNull(tileZoom) > this.options.maxZoom || dart.notNull(tileZoom) < this.options.minZoom) {
        tileZoom = null;
      }
      this[_tileZoom] = tileZoom;
      this[_abortLoading]();
      this[_updateLevels]();
      this[_resetGrid]();
      if (this[_tileZoom] != null) {
        this[_update](center);
      }
      this[_pruneTiles]();
    }
    [_setZoomTransforms](center, zoom) {
      for (let i of this[_levels][$keys]) {
        this[_setZoomTransform](dart.nullCheck(this[_levels][$_get](i)), center, zoom);
      }
    }
    [_setZoomTransform](level, center, zoom) {
      let scale = this.map.getZoomScale(zoom, level.zoom);
      let pixelOrigin = this.map.getNewPixelOrigin(center, zoom).round();
      if (level.origin == null) {
        return;
      }
      let translate = dart.nullCheck(level.origin).multiplyBy(scale)['-'](pixelOrigin);
      level.translatePoint = translate;
      level.scale = scale;
    }
    [_resetGrid]() {
      let map = this.map;
      let crs = map.options.crs;
      let tileSize = this.getTileSize();
      let tileZoom = this[_tileZoom];
      let bounds = map.getPixelWorldBounds(this[_tileZoom]);
      if (bounds != null) {
        this[_globalTileRange] = this[_pxBoundsToTileRange](bounds);
      }
      this[_wrapX] = crs.wrapLng;
      if (this[_wrapX] != null) {
        let first = (map.project(new latlong.LatLng.new(0.0, dart.nullCheck(crs.wrapLng).item1), tileZoom).x / tileSize.x)[$floorToDouble]();
        let second = (map.project(new latlong.LatLng.new(0.0, dart.nullCheck(crs.wrapLng).item2), tileZoom).x / tileSize.y)[$ceilToDouble]();
        this[_wrapX] = new (T$.Tuple2Ofdouble$double()).new(first, second);
      }
      this[_wrapY] = crs.wrapLat;
      if (this[_wrapY] != null) {
        let first = (map.project(new latlong.LatLng.new(dart.nullCheck(crs.wrapLat).item1, 0.0), tileZoom).y / tileSize.x)[$floorToDouble]();
        let second = (map.project(new latlong.LatLng.new(dart.nullCheck(crs.wrapLat).item2, 0.0), tileZoom).y / tileSize.y)[$ceilToDouble]();
        this[_wrapY] = new (T$.Tuple2Ofdouble$double()).new(first, second);
      }
    }
    [_handleMove]() {
      let tileZoom = this[_clampZoom](this.map.zoom[$roundToDouble]());
      if (this[_tileZoom] == null) {
        if (tileZoom <= this.options.maxZoom && tileZoom >= this.options.minZoom) {
          this[_tileZoom] = tileZoom;
          this.setState(dart.fn(() => {
            this[_setView](this.map.center, tileZoom);
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          }, T$.VoidTovoid()));
        }
      } else {
        this.setState(dart.fn(() => {
          if ((tileZoom - dart.nullCheck(this[_tileZoom]))[$abs]() >= 1) {
            this[_setView](this.map.center, tileZoom);
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          } else {
            if (this[_throttleUpdate] == null) {
              this[_update](null);
            } else {
              dart.nullCheck(this[_throttleUpdate]).add(null);
            }
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          }
        }, T$.VoidTovoid()));
      }
    }
    [_getTiledPixelBounds](center) {
      let scale = this.map.getZoomScale(this.map.zoom, this[_tileZoom]);
      let pixelCenter = this.map.project(center, this[_tileZoom]).floor();
      let halfSize = this.map.size['/'](scale * 2);
      return T$.BoundsOfnum().new(pixelCenter['-'](halfSize), pixelCenter['+'](halfSize));
    }
    [_update](center) {
      if (this[_tileZoom] == null) {
        return;
      }
      let zoom = this[_clampZoom](this.map.zoom);
      center == null ? center = this.map.center : null;
      let pixelBounds = this[_getTiledPixelBounds](center);
      let tileRange = this[_pxBoundsToTileRange](pixelBounds);
      let tileCenter = tileRange.center;
      let queue = T$.JSArrayOfCoordsOfnum().of([]);
      let margin = this.options.keepBuffer;
      let noPruneRange = T$.BoundsOfnum().new(tileRange.bottomLeft['-'](new (T$.CustomPointOfnum()).new(margin, -margin)), tileRange.topRight['+'](new (T$.CustomPointOfnum()).new(margin, -margin)));
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        let c = tile.coords;
        if (tile.current === true && (c.z !== this[_tileZoom] || !noPruneRange.contains(new (T$.CustomPointOfnum()).new(c.x, c.y)))) {
          tile.current = false;
        }
      }
      if ((zoom - dart.nullCheck(this[_tileZoom]))[$abs]() > 1) {
        this[_setView](center, zoom);
        return;
      }
      for (let j = tileRange.min.y; j <= tileRange.max.y; j = j + 1) {
        for (let i = tileRange.min.x; i <= tileRange.max.x; i = i + 1) {
          let coords = new (T$.CoordsOfdouble()).new(i[$toDouble](), j[$toDouble]());
          coords.z = dart.nullCheck(this[_tileZoom]);
          if (!this[_isValidTile](coords)) {
            continue;
          }
          let tile = this[_tiles][$_get](this[_tileCoordsToKey](coords));
          if (tile != null) {
            tile.current = true;
          } else {
            queue[$add](coords);
          }
        }
      }
      this[_evictErrorTilesBasedOnStrategy](tileRange);
      queue[$sort](dart.fn((a, b) => (a.distanceTo(tileCenter) - b.distanceTo(tileCenter))[$toInt](), T$.CoordsOfnumAndCoordsOfnumToint()));
      for (let i = 0; i < queue[$length]; i = i + 1) {
        this[_addTile](T$.CoordsOfdouble().as(queue[$_get](i)));
      }
    }
    [_isValidTile](coords) {
      let crs = this.map.options.crs;
      if (!crs.infinite) {
        let bounds = this[_globalTileRange];
        if (crs.wrapLng == null && (coords.x < bounds.min.x || coords.x > bounds.max.x) || crs.wrapLat == null && (coords.y < bounds.min.y || coords.y > bounds.max.y)) {
          return false;
        }
      }
      return true;
    }
    [_tileCoordsToKey](coords) {
      return dart.str(coords.x) + ":" + dart.str(coords.y) + ":" + dart.str(coords.z);
    }
    [_keyToTileCoords](key) {
      let k = key[$split](":");
      let coords = new (T$.CoordsOfdouble()).new(core.double.parse(k[$_get](0)), core.double.parse(k[$_get](1)));
      coords.z = core.double.parse(k[$_get](2));
      return coords;
    }
    [_removeTile](key) {
      let tile = this[_tiles][$_get](key);
      if (tile == null) {
        return;
      }
      tile.dispose(tile.loadError && this.options.evictErrorTileStrategy !== tile_layer.EvictErrorTileStrategy.none);
      this[_tiles][$remove](key);
    }
    [_addTile](coords) {
      let t7, t6, t5;
      let tileCoordsToKey = this[_tileCoordsToKey](coords);
      let tile = (t5 = this[_tiles], t6 = tileCoordsToKey, t7 = new tile_layer.Tile.new({coords: coords, coordsKey: tileCoordsToKey, tilePos: this[_getTilePos](coords), current: true, level: dart.nullCheck(this[_levels][$_get](coords.z)), imageProvider: this.options.tileProvider.getImage(this[_wrapCoords](coords), this.options), tileReady: dart.bind(this, _tileReady)}), t5[$_set](t6, t7), t7);
      tile.loadTileImage();
    }
    [_evictErrorTilesBasedOnStrategy](tileRange) {
      if (this.options.evictErrorTileStrategy === tile_layer.EvictErrorTileStrategy.notVisibleRespectMargin) {
        let toRemove = T$.JSArrayOfString().of([]);
        for (let entry of this[_tiles][$entries]) {
          let tile = entry.value;
          if (tile.loadError && !tile.current) {
            toRemove[$add](entry.key);
          }
        }
        for (let key of toRemove) {
          let tile = dart.nullCheck(this[_tiles][$_get](key));
          tile.dispose(true);
          this[_tiles][$remove](key);
        }
      } else if (this.options.evictErrorTileStrategy === tile_layer.EvictErrorTileStrategy.notVisible) {
        let toRemove = T$.JSArrayOfString().of([]);
        for (let entry of this[_tiles][$entries]) {
          let tile = entry.value;
          let c = tile.coords;
          if (tile.loadError && (!tile.current || !tileRange.contains(new (T$.CustomPointOfnum()).new(c.x, c.y)))) {
            toRemove[$add](entry.key);
          }
        }
        for (let key of toRemove) {
          let tile = dart.nullCheck(this[_tiles][$_get](key));
          tile.dispose(true);
          this[_tiles][$remove](key);
        }
      }
    }
    [_tileReady](coords, error, tile) {
      let t5;
      if (error != null) {
        core.print(error);
        dart.nullCheck(tile).loadError = true;
        if (this.options.errorTileCallback != null) {
          dart.nullCheck(this.options.errorTileCallback)(tile, error);
        }
      } else {
        dart.nullCheck(tile).loadError = false;
      }
      let key = this[_tileCoordsToKey](coords);
      tile = this[_tiles][$_get](key);
      if (tile == null) {
        return;
      }
      if (this.options.fastReplace && this.mounted) {
        this.setState(dart.fn(() => {
          dart.nullCheck(tile).active = true;
          if (this[_noTilesToLoad]()) {
            this[_pruneTiles]();
          }
        }, T$.VoidTovoid()));
        return;
      }
      let fadeInStart = tile.loaded == null ? this.options.tileFadeInStart : this.options.tileFadeInStartWhenOverride;
      tile.loaded = new core.DateTime.now();
      if (this.options.tileFadeInDuration == null || fadeInStart === 1.0 || tile.loadError && this.options.errorImage == null) {
        tile.active = true;
      } else {
        tile.startFadeInAnimation(dart.nullCheck(this.options.tileFadeInDuration), this, {from: fadeInStart});
      }
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
      if (this[_noTilesToLoad]()) {
        t5 = this[_pruneLater];
        t5 == null ? null : t5.cancel();
        this[_pruneLater] = async.Timer.new(this.options.tileFadeInDuration != null ? dart.nullCheck(this.options.tileFadeInDuration)['+'](C[46] || CT.C46) : C[46] || CT.C46, dart.fn(() => {
          if (this.mounted) {
            this.setState(dart.bind(this, _pruneTiles));
          }
        }, T$.VoidTovoid()));
      }
    }
    [_getTilePos](coords) {
      let level = dart.nullCheck(this[_levels][$_get](coords.z));
      return coords.scaleBy(this.getTileSize())['-'](dart.nullCheck(level.origin));
    }
    [_wrapCoords](coords) {
      let newCoords = new (T$.CoordsOfdouble()).new(this[_wrapX] != null ? util.wrapNum(coords.x[$toDouble](), dart.nullCheck(this[_wrapX])) : coords.x[$toDouble](), this[_wrapY] != null ? util.wrapNum(coords.y[$toDouble](), dart.nullCheck(this[_wrapY])) : coords.y[$toDouble]());
      newCoords.z = coords.z[$toDouble]();
      return newCoords;
    }
    [_pxBoundsToTileRange](bounds) {
      let tileSize = this.getTileSize();
      return T$.BoundsOfnum().new(bounds.min.unscaleBy(tileSize).floor(), bounds.max.unscaleBy(tileSize).ceil()['-'](C[47] || CT.C47));
    }
    [_noTilesToLoad]() {
      for (let entry of this[_tiles][$entries]) {
        if (entry.value.loaded == null) {
          return false;
        }
      }
      return true;
    }
  };
  (tile_layer._TileLayerState.new = function() {
    this[___TileLayerState__globalTileRange] = null;
    this[_wrapX] = null;
    this[_wrapY] = null;
    this[_tileZoom] = null;
    this[_level] = null;
    this[_moveSub] = null;
    this[_throttleUpdate] = null;
    this[___TileLayerState__tileSize] = null;
    this[_tiles] = new (T$.IdentityMapOfString$Tile()).new();
    this[_levels] = new (T$.IdentityMapOfdouble$Level()).new();
    this[_pruneLater] = null;
    tile_layer._TileLayerState.__proto__.new.call(this);
    ;
  }).prototype = tile_layer._TileLayerState.prototype;
  dart.addTypeTests(tile_layer._TileLayerState);
  dart.addTypeCaches(tile_layer._TileLayerState);
  dart.setMethodSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getMethods(tile_layer._TileLayerState.__proto__),
    [_isZoomOutsideMinMax]: dart.fnType(core.bool, []),
    [_initThrottleUpdate]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_createTileWidget]: dart.fnType(framework.Widget, [tile_layer.Tile]),
    [_abortLoading]: dart.fnType(dart.void, []),
    getTileSize: dart.fnType(point.CustomPoint$(core.num), []),
    [_hasLevelChildren]: dart.fnType(core.bool, [core.double]),
    [_updateLevels]: dart.fnType(dart.nullable(tile_layer.Level), []),
    [_pruneTiles]: dart.fnType(dart.void, []),
    [_removeTilesAtZoom]: dart.fnType(dart.void, [core.double]),
    [_removeAllTiles]: dart.fnType(dart.void, []),
    [_retainParent]: dart.fnType(core.bool, [core.double, core.double, core.double, core.double]),
    [_retainChildren]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    [_resetView]: dart.fnType(dart.void, []),
    [_clampZoom]: dart.fnType(core.double, [core.double]),
    [_setView]: dart.fnType(dart.void, [latlong.LatLng, core.double]),
    [_setZoomTransforms]: dart.fnType(dart.void, [latlong.LatLng, core.double]),
    [_setZoomTransform]: dart.fnType(dart.void, [tile_layer.Level, latlong.LatLng, core.double]),
    [_resetGrid]: dart.fnType(dart.void, []),
    [_handleMove]: dart.fnType(dart.void, []),
    [_getTiledPixelBounds]: dart.fnType(bounds.Bounds$(core.num), [latlong.LatLng]),
    [_update]: dart.fnType(dart.void, [dart.nullable(latlong.LatLng)]),
    [_isValidTile]: dart.fnType(core.bool, [tile_layer.Coords$(core.num)]),
    [_tileCoordsToKey]: dart.fnType(core.String, [tile_layer.Coords$(core.num)]),
    [_keyToTileCoords]: dart.fnType(tile_layer.Coords$(core.num), [core.String]),
    [_removeTile]: dart.fnType(dart.void, [core.String]),
    [_addTile]: dart.fnType(dart.void, [tile_layer.Coords$(core.double)]),
    [_evictErrorTilesBasedOnStrategy]: dart.fnType(dart.void, [bounds.Bounds$(core.num)]),
    [_tileReady]: dart.fnType(dart.void, [tile_layer.Coords$(core.double), dart.dynamic, dart.nullable(tile_layer.Tile)]),
    [_getTilePos]: dart.fnType(point.CustomPoint$(core.num), [tile_layer.Coords$(core.num)]),
    [_wrapCoords]: dart.fnType(tile_layer.Coords$(core.num), [tile_layer.Coords$(core.num)]),
    [_pxBoundsToTileRange]: dart.fnType(bounds.Bounds$(core.num), [bounds.Bounds$(core.num)]),
    [_noTilesToLoad]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getGetters(tile_layer._TileLayerState.__proto__),
    map: map.MapState,
    options: tile_layer.TileLayerOptions,
    [_globalTileRange]: bounds.Bounds$(core.num),
    [_tileSize]: point.CustomPoint$(core.num)
  }));
  dart.setSetterSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getSetters(tile_layer._TileLayerState.__proto__),
    [_globalTileRange]: bounds.Bounds$(core.num),
    [_tileSize]: point.CustomPoint$(core.num)
  }));
  dart.setLibraryUri(tile_layer._TileLayerState, I[1]);
  dart.setFieldSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getFields(tile_layer._TileLayerState.__proto__),
    [___TileLayerState__globalTileRange]: dart.fieldType(dart.nullable(bounds.Bounds$(core.num))),
    [_wrapX]: dart.fieldType(dart.nullable(tuple.Tuple2$(core.double, core.double))),
    [_wrapY]: dart.fieldType(dart.nullable(tuple.Tuple2$(core.double, core.double))),
    [_tileZoom]: dart.fieldType(dart.nullable(core.double)),
    [_level]: dart.fieldType(dart.nullable(tile_layer.Level)),
    [_moveSub]: dart.fieldType(dart.nullable(async.StreamSubscription)),
    [_throttleUpdate]: dart.fieldType(dart.nullable(async.StreamController$(dart.nullable(latlong.LatLng)))),
    [___TileLayerState__tileSize]: dart.fieldType(dart.nullable(point.CustomPoint$(core.num))),
    [_tiles]: dart.finalFieldType(core.Map$(core.String, tile_layer.Tile)),
    [_levels]: dart.finalFieldType(core.Map$(core.double, tile_layer.Level)),
    [_pruneLater]: dart.fieldType(dart.nullable(async.Timer))
  }));
  var coordsKey$ = dart.privateName(tile_layer, "Tile.coordsKey");
  var coords$ = dart.privateName(tile_layer, "Tile.coords");
  var tilePos$ = dart.privateName(tile_layer, "Tile.tilePos");
  var imageProvider$ = dart.privateName(tile_layer, "Tile.imageProvider");
  var level$ = dart.privateName(tile_layer, "Tile.level");
  var current$ = dart.privateName(tile_layer, "Tile.current");
  var retain$ = dart.privateName(tile_layer, "Tile.retain");
  var active$ = dart.privateName(tile_layer, "Tile.active");
  var loadError$ = dart.privateName(tile_layer, "Tile.loadError");
  var loaded = dart.privateName(tile_layer, "Tile.loaded");
  var animationController = dart.privateName(tile_layer, "Tile.animationController");
  var tileReady$ = dart.privateName(tile_layer, "Tile.tileReady");
  var imageInfo = dart.privateName(tile_layer, "Tile.imageInfo");
  var __Tile_loadStarted = dart.privateName(tile_layer, "_#Tile#loadStarted");
  var _imageStream = dart.privateName(tile_layer, "_imageStream");
  var __Tile__listener = dart.privateName(tile_layer, "_#Tile#_listener");
  var _listener = dart.privateName(tile_layer, "_listener");
  var _tileOnLoad = dart.privateName(tile_layer, "_tileOnLoad");
  var _tileOnError = dart.privateName(tile_layer, "_tileOnError");
  var _onAnimateEnd = dart.privateName(tile_layer, "_onAnimateEnd");
  tile_layer.Tile = class Tile extends core.Object {
    get coordsKey() {
      return this[coordsKey$];
    }
    set coordsKey(value) {
      super.coordsKey = value;
    }
    get coords() {
      return this[coords$];
    }
    set coords(value) {
      super.coords = value;
    }
    get tilePos() {
      return this[tilePos$];
    }
    set tilePos(value) {
      super.tilePos = value;
    }
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      this[imageProvider$] = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get current() {
      return this[current$];
    }
    set current(value) {
      this[current$] = value;
    }
    get retain() {
      return this[retain$];
    }
    set retain(value) {
      this[retain$] = value;
    }
    get active() {
      return this[active$];
    }
    set active(value) {
      this[active$] = value;
    }
    get loadError() {
      return this[loadError$];
    }
    set loadError(value) {
      this[loadError$] = value;
    }
    get loaded() {
      return this[loaded];
    }
    set loaded(value) {
      this[loaded] = value;
    }
    get animationController() {
      return this[animationController];
    }
    set animationController(value) {
      this[animationController] = value;
    }
    get tileReady() {
      return this[tileReady$];
    }
    set tileReady(value) {
      this[tileReady$] = value;
    }
    get imageInfo() {
      return this[imageInfo];
    }
    set imageInfo(value) {
      this[imageInfo] = value;
    }
    get loadStarted() {
      let t5;
      t5 = this[__Tile_loadStarted];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("loadStarted")) : t5;
    }
    set loadStarted(t5) {
      this[__Tile_loadStarted] = t5;
    }
    get opacity() {
      return this.animationController == null ? this.active ? 1.0 : 0.0 : dart.nullCheck(this.animationController).value;
    }
    get [_listener]() {
      let t6;
      t6 = this[__Tile__listener];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_listener")) : t6;
    }
    set [_listener](t6) {
      this[__Tile__listener] = t6;
    }
    loadTileImage() {
      let t7, t7$;
      this.loadStarted = new core.DateTime.now();
      try {
        let oldImageStream = this[_imageStream];
        this[_imageStream] = this.imageProvider.resolve(new image_provider.ImageConfiguration.new());
        if (!dart.nullCheck(this[_imageStream]).key[$_equals]((t7 = oldImageStream, t7 == null ? null : t7.key))) {
          t7$ = oldImageStream;
          t7$ == null ? null : t7$.removeListener(this[_listener]);
          this[_listener] = new image_stream.ImageStreamListener.new(dart.bind(this, _tileOnLoad), {onError: dart.bind(this, _tileOnError)});
          dart.nullCheck(this[_imageStream]).addListener(this[_listener]);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_tileOnError](e, s);
        } else
          throw e$;
      }
    }
    dispose(evict = false) {
      let t9, t9$, t9$0;
      if (evict) {
        try {
          this.imageProvider.evict().catchError(C[48] || CT.C48);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            core.print(e);
          } else
            throw e$;
        }
      }
      t9 = this.animationController;
      t9 == null ? null : t9.removeStatusListener(dart.bind(this, _onAnimateEnd));
      t9$ = this.animationController;
      t9$ == null ? null : t9$.dispose();
      t9$0 = this[_imageStream];
      t9$0 == null ? null : t9$0.removeListener(this[_listener]);
    }
    startFadeInAnimation(duration, vsync, opts) {
      let t9, t9$;
      let from = opts && 'from' in opts ? opts.from : null;
      t9 = this.animationController;
      t9 == null ? null : t9.removeStatusListener(dart.bind(this, _onAnimateEnd));
      this.animationController = (t9$ = new animation_controller.AnimationController.new({duration: duration, vsync: vsync}), (() => {
        t9$.addStatusListener(dart.bind(this, _onAnimateEnd));
        return t9$;
      })());
      dart.nullCheck(this.animationController).forward({from: from});
    }
    [_onAnimateEnd](status) {
      if (status === animation.AnimationStatus.completed) {
        this.active = true;
      }
    }
    [_tileOnLoad](imageInfo, synchronousCall) {
      if (this.tileReady != null) {
        this.imageInfo = imageInfo;
        dart.nullCheck(this.tileReady)(this.coords, null, this);
      }
    }
    [_tileOnError](exception, stackTrace) {
      let t9;
      if (this.tileReady != null) {
        dart.nullCheck(this.tileReady)(this.coords, (t9 = exception, t9 == null ? "Unknown exception during loadTileImage" : t9), this);
      }
    }
    compareTo(other) {
      tile_layer.Tile.as(other);
      let zIndexA = this.level.zIndex;
      let zIndexB = other.level.zIndex;
      if (zIndexA === zIndexB) {
        return 0;
      } else {
        return zIndexB[$compareTo](zIndexA);
      }
    }
    get hashCode() {
      return this.coords.hashCode;
    }
    _equals(other) {
      if (other == null) return false;
      return tile_layer.Tile.is(other) && this.coords._equals(other.coords);
    }
  };
  (tile_layer.Tile.new = function(opts) {
    let coordsKey = opts && 'coordsKey' in opts ? opts.coordsKey : null;
    let coords = opts && 'coords' in opts ? opts.coords : null;
    let tilePos = opts && 'tilePos' in opts ? opts.tilePos : null;
    let imageProvider = opts && 'imageProvider' in opts ? opts.imageProvider : null;
    let tileReady = opts && 'tileReady' in opts ? opts.tileReady : null;
    let level = opts && 'level' in opts ? opts.level : null;
    let current = opts && 'current' in opts ? opts.current : false;
    let active = opts && 'active' in opts ? opts.active : false;
    let retain = opts && 'retain' in opts ? opts.retain : false;
    let loadError = opts && 'loadError' in opts ? opts.loadError : false;
    this[loaded] = null;
    this[__Tile_loadStarted] = null;
    this[animationController] = null;
    this[imageInfo] = null;
    this[_imageStream] = null;
    this[__Tile__listener] = null;
    this[coordsKey$] = coordsKey;
    this[coords$] = coords;
    this[tilePos$] = tilePos;
    this[imageProvider$] = imageProvider;
    this[tileReady$] = tileReady;
    this[level$] = level;
    this[current$] = current;
    this[active$] = active;
    this[retain$] = retain;
    this[loadError$] = loadError;
    ;
  }).prototype = tile_layer.Tile.prototype;
  dart.addTypeTests(tile_layer.Tile);
  dart.addTypeCaches(tile_layer.Tile);
  tile_layer.Tile[dart.implements] = () => [core.Comparable$(tile_layer.Tile)];
  dart.setMethodSignature(tile_layer.Tile, () => ({
    __proto__: dart.getMethods(tile_layer.Tile.__proto__),
    loadTileImage: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [], [core.bool]),
    startFadeInAnimation: dart.fnType(dart.void, [core.Duration, ticker.TickerProvider], {from: dart.nullable(core.double)}, {}),
    [_onAnimateEnd]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [_tileOnLoad]: dart.fnType(dart.void, [image_stream.ImageInfo, core.bool]),
    [_tileOnError]: dart.fnType(dart.void, [dart.dynamic, dart.nullable(core.StackTrace)]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(tile_layer.Tile, () => ({
    __proto__: dart.getGetters(tile_layer.Tile.__proto__),
    loadStarted: core.DateTime,
    opacity: core.double,
    [_listener]: image_stream.ImageStreamListener
  }));
  dart.setSetterSignature(tile_layer.Tile, () => ({
    __proto__: dart.getSetters(tile_layer.Tile.__proto__),
    loadStarted: core.DateTime,
    [_listener]: image_stream.ImageStreamListener
  }));
  dart.setLibraryUri(tile_layer.Tile, I[1]);
  dart.setFieldSignature(tile_layer.Tile, () => ({
    __proto__: dart.getFields(tile_layer.Tile.__proto__),
    coordsKey: dart.finalFieldType(core.String),
    coords: dart.finalFieldType(tile_layer.Coords$(core.double)),
    tilePos: dart.finalFieldType(point.CustomPoint$(core.num)),
    imageProvider: dart.fieldType(image_provider.ImageProvider$(core.Object)),
    level: dart.finalFieldType(tile_layer.Level),
    current: dart.fieldType(core.bool),
    retain: dart.fieldType(core.bool),
    active: dart.fieldType(core.bool),
    loadError: dart.fieldType(core.bool),
    loaded: dart.fieldType(dart.nullable(core.DateTime)),
    [__Tile_loadStarted]: dart.fieldType(dart.nullable(core.DateTime)),
    animationController: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    tileReady: dart.fieldType(dart.nullable(dart.fnType(dart.void, [tile_layer.Coords$(core.double), dart.dynamic, tile_layer.Tile]))),
    imageInfo: dart.fieldType(dart.nullable(image_stream.ImageInfo)),
    [_imageStream]: dart.fieldType(dart.nullable(image_stream.ImageStream)),
    [__Tile__listener]: dart.fieldType(dart.nullable(image_stream.ImageStreamListener))
  }));
  dart.defineExtensionMethods(tile_layer.Tile, ['compareTo', '_equals']);
  dart.defineExtensionAccessors(tile_layer.Tile, ['hashCode']);
  var tile$ = dart.privateName(tile_layer, "AnimatedTile.tile");
  var errorImage$0 = dart.privateName(tile_layer, "AnimatedTile.errorImage");
  var tileBuilder$0 = dart.privateName(tile_layer, "AnimatedTile.tileBuilder");
  tile_layer.AnimatedTile = class AnimatedTile extends framework.StatefulWidget {
    get tile() {
      return this[tile$];
    }
    set tile(value) {
      super.tile = value;
    }
    get errorImage() {
      return this[errorImage$0];
    }
    set errorImage(value) {
      super.errorImage = value;
    }
    get tileBuilder() {
      return this[tileBuilder$0];
    }
    set tileBuilder(value) {
      super.tileBuilder = value;
    }
    createState() {
      return new tile_layer._AnimatedTileState.new();
    }
  };
  (tile_layer.AnimatedTile.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let tile = opts && 'tile' in opts ? opts.tile : null;
    let errorImage = opts && 'errorImage' in opts ? opts.errorImage : null;
    let tileBuilder = opts && 'tileBuilder' in opts ? opts.tileBuilder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[tile$] = tile;
    this[errorImage$0] = errorImage;
    this[tileBuilder$0] = tileBuilder;
    tile_layer.AnimatedTile.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.AnimatedTile.prototype;
  dart.addTypeTests(tile_layer.AnimatedTile);
  dart.addTypeCaches(tile_layer.AnimatedTile);
  dart.setMethodSignature(tile_layer.AnimatedTile, () => ({
    __proto__: dart.getMethods(tile_layer.AnimatedTile.__proto__),
    createState: dart.fnType(tile_layer._AnimatedTileState, [])
  }));
  dart.setLibraryUri(tile_layer.AnimatedTile, I[1]);
  dart.setFieldSignature(tile_layer.AnimatedTile, () => ({
    __proto__: dart.getFields(tile_layer.AnimatedTile.__proto__),
    tile: dart.finalFieldType(tile_layer.Tile),
    errorImage: dart.finalFieldType(dart.nullable(image_provider.ImageProvider$(core.Object))),
    tileBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, tile_layer.Tile])))
  }));
  var _handleChange = dart.privateName(tile_layer, "_handleChange");
  tile_layer._AnimatedTileState = class _AnimatedTileState extends framework.State$(tile_layer.AnimatedTile) {
    build(context) {
      let t9;
      let tileWidget = this.widget.tile.loadError && this.widget.errorImage != null ? new image.Image.new({image: dart.nullCheck(this.widget.errorImage), fit: box_fit.BoxFit.fill, $creationLocationd_0dea112b090073317d4: C[49] || CT.C49}) : new basic.RawImage.new({image: (t9 = this.widget.tile.imageInfo, t9 == null ? null : t9.image), fit: box_fit.BoxFit.fill, $creationLocationd_0dea112b090073317d4: C[53] || CT.C53});
      return new basic.Opacity.new({opacity: this.widget.tile.opacity, child: this.widget.tileBuilder == null ? tileWidget : dart.nullCheck(this.widget.tileBuilder)(context, tileWidget, this.widget.tile), $creationLocationd_0dea112b090073317d4: C[57] || CT.C57});
    }
    initState() {
      super.initState();
      if (this.widget.tile.animationController != null) {
        dart.nullCheck(this.widget.tile.animationController).addListener(dart.bind(this, _handleChange));
        this.listenerAttached = true;
      }
    }
    dispose() {
      let t9;
      if (this.listenerAttached) {
        t9 = this.widget.tile.animationController;
        t9 == null ? null : t9.removeListener(dart.bind(this, _handleChange));
      }
      super.dispose();
    }
    didUpdateWidget(oldWidget) {
      tile_layer.AnimatedTile.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!this.listenerAttached && this.widget.tile.animationController != null) {
        dart.nullCheck(this.widget.tile.animationController).addListener(dart.bind(this, _handleChange));
        this.listenerAttached = true;
      }
    }
    [_handleChange]() {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
  };
  (tile_layer._AnimatedTileState.new = function() {
    this.listenerAttached = false;
    tile_layer._AnimatedTileState.__proto__.new.call(this);
    ;
  }).prototype = tile_layer._AnimatedTileState.prototype;
  dart.addTypeTests(tile_layer._AnimatedTileState);
  dart.addTypeCaches(tile_layer._AnimatedTileState);
  dart.setMethodSignature(tile_layer._AnimatedTileState, () => ({
    __proto__: dart.getMethods(tile_layer._AnimatedTileState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_handleChange]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(tile_layer._AnimatedTileState, I[1]);
  dart.setFieldSignature(tile_layer._AnimatedTileState, () => ({
    __proto__: dart.getFields(tile_layer._AnimatedTileState.__proto__),
    listenerAttached: dart.fieldType(core.bool)
  }));
  var origin = dart.privateName(tile_layer, "Level.origin");
  var __Level_zIndex = dart.privateName(tile_layer, "_#Level#zIndex");
  var __Level_zoom = dart.privateName(tile_layer, "_#Level#zoom");
  var __Level_translatePoint = dart.privateName(tile_layer, "_#Level#translatePoint");
  var __Level_scale = dart.privateName(tile_layer, "_#Level#scale");
  tile_layer.Level = class Level extends core.Object {
    get origin() {
      return this[origin];
    }
    set origin(value) {
      this[origin] = value;
    }
    get zIndex() {
      let t9;
      t9 = this[__Level_zIndex];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("zIndex")) : t9;
    }
    set zIndex(t9) {
      this[__Level_zIndex] = t9;
    }
    get zoom() {
      let t10;
      t10 = this[__Level_zoom];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("zoom")) : t10;
    }
    set zoom(t10) {
      this[__Level_zoom] = t10;
    }
    get translatePoint() {
      let t11;
      t11 = this[__Level_translatePoint];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("translatePoint")) : t11;
    }
    set translatePoint(t11) {
      this[__Level_translatePoint] = t11;
    }
    get scale() {
      let t12;
      t12 = this[__Level_scale];
      return t12 == null ? dart.throw(new _internal.LateError.fieldNI("scale")) : t12;
    }
    set scale(t12) {
      this[__Level_scale] = t12;
    }
  };
  (tile_layer.Level.new = function() {
    this[__Level_zIndex] = null;
    this[origin] = null;
    this[__Level_zoom] = null;
    this[__Level_translatePoint] = null;
    this[__Level_scale] = null;
    ;
  }).prototype = tile_layer.Level.prototype;
  dart.addTypeTests(tile_layer.Level);
  dart.addTypeCaches(tile_layer.Level);
  dart.setGetterSignature(tile_layer.Level, () => ({
    __proto__: dart.getGetters(tile_layer.Level.__proto__),
    zIndex: core.double,
    zoom: core.double,
    translatePoint: point.CustomPoint$(core.num),
    scale: core.double
  }));
  dart.setSetterSignature(tile_layer.Level, () => ({
    __proto__: dart.getSetters(tile_layer.Level.__proto__),
    zIndex: core.double,
    zoom: core.double,
    translatePoint: point.CustomPoint$(core.num),
    scale: core.double
  }));
  dart.setLibraryUri(tile_layer.Level, I[1]);
  dart.setFieldSignature(tile_layer.Level, () => ({
    __proto__: dart.getFields(tile_layer.Level.__proto__),
    [__Level_zIndex]: dart.fieldType(dart.nullable(core.double)),
    origin: dart.fieldType(dart.nullable(point.CustomPoint$(core.num))),
    [__Level_zoom]: dart.fieldType(dart.nullable(core.double)),
    [__Level_translatePoint]: dart.fieldType(dart.nullable(point.CustomPoint$(core.num))),
    [__Level_scale]: dart.fieldType(dart.nullable(core.double))
  }));
  var __Coords_z = dart.privateName(tile_layer, "_#Coords#z");
  const _is_Coords_default = Symbol('_is_Coords_default');
  tile_layer.Coords$ = dart.generic(T => {
    class Coords extends point.CustomPoint$(T) {
      get z() {
        let t13;
        t13 = this[__Coords_z];
        return t13 == null ? dart.throw(new _internal.LateError.fieldNI("z")) : t13;
      }
      set z(t13) {
        T.as(t13);
        this[__Coords_z] = t13;
      }
      toString() {
        return "Coords(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ")";
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.CoordsOfnum().is(other)) {
          return this.x === other.x && this.y === other.y && this.z === other.z;
        }
        return false;
      }
      get hashCode() {
        return ui.hashValues(this.x[$hashCode], this.y[$hashCode], this.z[$hashCode]);
      }
    }
    (Coords.new = function(x, y) {
      this[__Coords_z] = null;
      Coords.__proto__.new.call(this, x, y);
      ;
    }).prototype = Coords.prototype;
    dart.addTypeTests(Coords);
    Coords.prototype[_is_Coords_default] = true;
    dart.addTypeCaches(Coords);
    dart.setMethodSignature(Coords, () => ({
      __proto__: dart.getMethods(Coords.__proto__),
      _equals: dart.fnType(core.bool, [dart.dynamic]),
      [$_equals]: dart.fnType(core.bool, [dart.dynamic])
    }));
    dart.setGetterSignature(Coords, () => ({
      __proto__: dart.getGetters(Coords.__proto__),
      z: T
    }));
    dart.setSetterSignature(Coords, () => ({
      __proto__: dart.getSetters(Coords.__proto__),
      z: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(Coords, I[1]);
    dart.setFieldSignature(Coords, () => ({
      __proto__: dart.getFields(Coords.__proto__),
      [__Coords_z]: dart.fieldType(dart.nullable(T))
    }));
    dart.defineExtensionMethods(Coords, ['toString', '_equals']);
    dart.defineExtensionAccessors(Coords, ['hashCode']);
    return Coords;
  });
  tile_layer.Coords = tile_layer.Coords$();
  dart.addTypeTests(tile_layer.Coords, _is_Coords_default);
  var _CkMatrixColorFilter_matrix = dart.privateName(_engine, "_CkMatrixColorFilter.matrix");
  dart.defineLazy(tile_builder, {
    /*tile_builder.darkModeTilesContainerBuilder*/get darkModeTilesContainerBuilder() {
      return dart.fn((context, tilesContainer, tiles) => new color_filter.ColorFiltered.new({colorFilter: C[61] || CT.C61, child: tilesContainer, $creationLocationd_0dea112b090073317d4: C[63] || CT.C63}), T$.BuildContextAndWidgetAndListOfTileToColorFiltered());
    },
    /*tile_builder.darkModeTileBuilder*/get darkModeTileBuilder() {
      return dart.fn((context, tileWidget, tile) => new color_filter.ColorFiltered.new({colorFilter: C[61] || CT.C61, child: tileWidget, $creationLocationd_0dea112b090073317d4: C[67] || CT.C67}), T$.BuildContextAndWidgetAndTileToColorFiltered());
    },
    /*tile_builder.coordinateDebugTileBuilder*/get coordinateDebugTileBuilder() {
      return dart.fn((context, tileWidget, tile) => {
        let coords = tile.coords;
        let readableKey = dart.str(coords.x[$floor]()) + " : " + dart.str(coords.y[$floor]()) + " : " + dart.str(coords.z[$floor]());
        return new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Stack.new({fit: stack.StackFit.passthrough, children: T$.JSArrayOfWidget().of([tileWidget, new basic.Center.new({child: new text.Text.new(readableKey, {style: theme.Theme.of(context).textTheme.headline5, $creationLocationd_0dea112b090073317d4: C[71] || CT.C71}), $creationLocationd_0dea112b090073317d4: C[75] || CT.C75})]), $creationLocationd_0dea112b090073317d4: C[78] || CT.C78}), $creationLocationd_0dea112b090073317d4: C[82] || CT.C82});
      }, T$.BuildContextAndWidgetAndTileToContainer());
    },
    /*tile_builder.loadingTimeDebugTileBuilder*/get loadingTimeDebugTileBuilder() {
      return dart.fn((context, tileWidget, tile) => {
        let loadStarted = tile.loadStarted;
        let loaded = tile.loaded;
        let time = loaded == null ? "Loading" : dart.str((loaded.millisecond - loadStarted.millisecond)[$abs]()) + " ms";
        return new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Stack.new({fit: stack.StackFit.passthrough, children: T$.JSArrayOfWidget().of([tileWidget, new basic.Center.new({child: new text.Text.new(time, {style: theme.Theme.of(context).textTheme.headline5, $creationLocationd_0dea112b090073317d4: C[86] || CT.C86}), $creationLocationd_0dea112b090073317d4: C[90] || CT.C90})]), $creationLocationd_0dea112b090073317d4: C[93] || CT.C93}), $creationLocationd_0dea112b090073317d4: C[97] || CT.C97});
      }, T$.BuildContextAndWidgetAndTileToContainer());
    }
  }, false);
  var polylines$ = dart.privateName(polyline_layer, "PolylineLayerOptions.polylines");
  var polylineCulling$ = dart.privateName(polyline_layer, "PolylineLayerOptions.polylineCulling");
  polyline_layer.PolylineLayerOptions = class PolylineLayerOptions extends layer.LayerOptions {
    get polylines() {
      return this[polylines$];
    }
    set polylines(value) {
      super.polylines = value;
    }
    get polylineCulling() {
      return this[polylineCulling$];
    }
    set polylineCulling(value) {
      super.polylineCulling = value;
    }
  };
  (polyline_layer.PolylineLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let polylines = opts && 'polylines' in opts ? opts.polylines : C[101] || CT.C101;
    let polylineCulling = opts && 'polylineCulling' in opts ? opts.polylineCulling : false;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[polylines$] = polylines;
    this[polylineCulling$] = polylineCulling;
    polyline_layer.PolylineLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    if (this.polylineCulling) {
      for (let polyline of this.polylines) {
        polyline.boundingBox = new latlng_bounds.LatLngBounds.fromPoints(polyline.points);
      }
    }
  }).prototype = polyline_layer.PolylineLayerOptions.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayerOptions);
  dart.addTypeCaches(polyline_layer.PolylineLayerOptions);
  dart.setLibraryUri(polyline_layer.PolylineLayerOptions, I[3]);
  dart.setFieldSignature(polyline_layer.PolylineLayerOptions, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayerOptions.__proto__),
    polylines: dart.finalFieldType(core.List$(polyline_layer.Polyline)),
    polylineCulling: dart.finalFieldType(core.bool)
  }));
  var points$ = dart.privateName(polyline_layer, "Polyline.points");
  var offsets = dart.privateName(polyline_layer, "Polyline.offsets");
  var strokeWidth$ = dart.privateName(polyline_layer, "Polyline.strokeWidth");
  var color$ = dart.privateName(polyline_layer, "Polyline.color");
  var borderStrokeWidth$ = dart.privateName(polyline_layer, "Polyline.borderStrokeWidth");
  var borderColor$ = dart.privateName(polyline_layer, "Polyline.borderColor");
  var gradientColors$ = dart.privateName(polyline_layer, "Polyline.gradientColors");
  var colorsStop$ = dart.privateName(polyline_layer, "Polyline.colorsStop");
  var isDotted$ = dart.privateName(polyline_layer, "Polyline.isDotted");
  var __Polyline_boundingBox = dart.privateName(polyline_layer, "_#Polyline#boundingBox");
  polyline_layer.Polyline = class Polyline extends core.Object {
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get offsets() {
      return this[offsets];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get gradientColors() {
      return this[gradientColors$];
    }
    set gradientColors(value) {
      super.gradientColors = value;
    }
    get colorsStop() {
      return this[colorsStop$];
    }
    set colorsStop(value) {
      super.colorsStop = value;
    }
    get isDotted() {
      return this[isDotted$];
    }
    set isDotted(value) {
      super.isDotted = value;
    }
    get boundingBox() {
      let t14;
      t14 = this[__Polyline_boundingBox];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("boundingBox")) : t14;
    }
    set boundingBox(t14) {
      if (this[__Polyline_boundingBox] == null)
        this[__Polyline_boundingBox] = t14;
      else
        dart.throw(new _internal.LateError.fieldAI("boundingBox"));
    }
  };
  (polyline_layer.Polyline.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    let color = opts && 'color' in opts ? opts.color : C[102] || CT.C102;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[103] || CT.C103;
    let gradientColors = opts && 'gradientColors' in opts ? opts.gradientColors : null;
    let colorsStop = opts && 'colorsStop' in opts ? opts.colorsStop : null;
    let isDotted = opts && 'isDotted' in opts ? opts.isDotted : false;
    this[offsets] = T$.JSArrayOfOffset().of([]);
    this[__Polyline_boundingBox] = null;
    this[points$] = points;
    this[strokeWidth$] = strokeWidth;
    this[color$] = color;
    this[borderStrokeWidth$] = borderStrokeWidth;
    this[borderColor$] = borderColor;
    this[gradientColors$] = gradientColors;
    this[colorsStop$] = colorsStop;
    this[isDotted$] = isDotted;
    ;
  }).prototype = polyline_layer.Polyline.prototype;
  dart.addTypeTests(polyline_layer.Polyline);
  dart.addTypeCaches(polyline_layer.Polyline);
  dart.setGetterSignature(polyline_layer.Polyline, () => ({
    __proto__: dart.getGetters(polyline_layer.Polyline.__proto__),
    boundingBox: latlng_bounds.LatLngBounds
  }));
  dart.setSetterSignature(polyline_layer.Polyline, () => ({
    __proto__: dart.getSetters(polyline_layer.Polyline.__proto__),
    boundingBox: latlng_bounds.LatLngBounds
  }));
  dart.setLibraryUri(polyline_layer.Polyline, I[3]);
  dart.setFieldSignature(polyline_layer.Polyline, () => ({
    __proto__: dart.getFields(polyline_layer.Polyline.__proto__),
    points: dart.finalFieldType(core.List$(latlong.LatLng)),
    offsets: dart.finalFieldType(core.List$(ui.Offset)),
    strokeWidth: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    borderStrokeWidth: dart.finalFieldType(core.double),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    gradientColors: dart.finalFieldType(dart.nullable(core.List$(ui.Color))),
    colorsStop: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    isDotted: dart.finalFieldType(core.bool),
    [__Polyline_boundingBox]: dart.fieldType(dart.nullable(latlng_bounds.LatLngBounds))
  }));
  var options$1 = dart.privateName(polyline_layer, "PolylineLayerWidget.options");
  polyline_layer.PolylineLayerWidget = class PolylineLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$1];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new polyline_layer.PolylineLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[104] || CT.C104});
    }
  };
  (polyline_layer.PolylineLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$1] = options;
    polyline_layer.PolylineLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polyline_layer.PolylineLayerWidget.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayerWidget);
  dart.addTypeCaches(polyline_layer.PolylineLayerWidget);
  dart.setMethodSignature(polyline_layer.PolylineLayerWidget, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylineLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(polyline_layer.PolylineLayerWidget, I[3]);
  dart.setFieldSignature(polyline_layer.PolylineLayerWidget, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayerWidget.__proto__),
    options: dart.finalFieldType(polyline_layer.PolylineLayerOptions)
  }));
  var polylineOpts$ = dart.privateName(polyline_layer, "PolylineLayer.polylineOpts");
  var map$ = dart.privateName(polyline_layer, "PolylineLayer.map");
  var stream$0 = dart.privateName(polyline_layer, "PolylineLayer.stream");
  var _build = dart.privateName(polyline_layer, "_build");
  var _fillOffsets = dart.privateName(polyline_layer, "_fillOffsets");
  polyline_layer.PolylineLayer = class PolylineLayer extends framework.StatelessWidget {
    get polylineOpts() {
      return this[polylineOpts$];
    }
    set polylineOpts(value) {
      super.polylineOpts = value;
    }
    get map() {
      return this[map$];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$0];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build](context, size);
        }, T$.BuildContextAndBoxConstraintsToWidget()), $creationLocationd_0dea112b090073317d4: C[109] || CT.C109});
    }
    [_build](context, size) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let polylines = T$.JSArrayOfWidget().of([]);
          for (let polylineOpt of this.polylineOpts.polylines) {
            polylineOpt.offsets[$clear]();
            if (this.polylineOpts.polylineCulling && !polylineOpt.boundingBox.isOverlapping(this.map.bounds)) {
              continue;
            }
            this[_fillOffsets](polylineOpt.offsets, polylineOpt.points);
            polylines[$add](new basic.CustomPaint.new({painter: new polyline_layer.PolylinePainter.new(polylineOpt), size: size, $creationLocationd_0dea112b090073317d4: C[112] || CT.C112}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: polylines, $creationLocationd_0dea112b090073317d4: C[116] || CT.C116}), $creationLocationd_0dea112b090073317d4: C[119] || CT.C119});
        }, T$.BuildContextAndAsyncSnapshotOfvoidToContainer()), $creationLocationd_0dea112b090073317d4: C[122] || CT.C122});
    }
    [_fillOffsets](offsets, points) {
      for (let i = 0, len = points[$length]; i < len; i = i + 1) {
        let point = points[$_get](i);
        let pos = this.map.project(point);
        pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
        offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        if (i > 0) {
          offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        }
      }
    }
  };
  (polyline_layer.PolylineLayer.new = function(polylineOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[polylineOpts$] = polylineOpts;
    this[map$] = map;
    this[stream$0] = stream;
    polyline_layer.PolylineLayer.__proto__.new.call(this, {key: polylineOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polyline_layer.PolylineLayer.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayer);
  dart.addTypeCaches(polyline_layer.PolylineLayer);
  dart.setMethodSignature(polyline_layer.PolylineLayer, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylineLayer.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_build]: dart.fnType(framework.Widget, [framework.BuildContext, ui.Size]),
    [_fillOffsets]: dart.fnType(dart.void, [core.List$(ui.Offset), core.List$(latlong.LatLng)])
  }));
  dart.setLibraryUri(polyline_layer.PolylineLayer, I[3]);
  dart.setFieldSignature(polyline_layer.PolylineLayer, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayer.__proto__),
    polylineOpts: dart.finalFieldType(polyline_layer.PolylineLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(dart.nullable(async.Stream$(core.Null)))
  }));
  var polylineOpt$ = dart.privateName(polyline_layer, "PolylinePainter.polylineOpt");
  var _paintGradient = dart.privateName(polyline_layer, "_paintGradient");
  var _paintDottedLine = dart.privateName(polyline_layer, "_paintDottedLine");
  var _paintLine = dart.privateName(polyline_layer, "_paintLine");
  var _getColorsStop = dart.privateName(polyline_layer, "_getColorsStop");
  var _calculateColorsStop = dart.privateName(polyline_layer, "_calculateColorsStop");
  polyline_layer.PolylinePainter = class PolylinePainter extends custom_paint.CustomPainter {
    get polylineOpt() {
      return this[polylineOpt$];
    }
    set polylineOpt(value) {
      super.polylineOpt = value;
    }
    paint(canvas, size) {
      let t15, t15$, t16, t15$0, t15$1, t15$2;
      if (this.polylineOpt.offsets[$isEmpty]) {
        return;
      }
      let rect = ui.Offset.zero['&'](size);
      canvas.clipRect(rect);
      let paint = (t15 = ui.Paint.new(), (() => {
        t15.strokeWidth = this.polylineOpt.strokeWidth;
        t15.strokeCap = ui.StrokeCap.round;
        t15.strokeJoin = ui.StrokeJoin.round;
        t15.blendMode = ui.BlendMode.srcOver;
        return t15;
      })());
      if (this.polylineOpt.gradientColors == null) {
        paint.color = this.polylineOpt.color;
      } else {
        dart.nullCheck(this.polylineOpt.gradientColors)[$isNotEmpty] ? paint.shader = this[_paintGradient]() : paint.color = this.polylineOpt.color;
      }
      let filterPaint = null;
      if (this.polylineOpt.borderColor != null) {
        filterPaint = (t15$ = ui.Paint.new(), (() => {
          t15$.color = dart.nullCheck(this.polylineOpt.borderColor).withAlpha(255);
          t15$.strokeWidth = this.polylineOpt.strokeWidth;
          t15$.strokeCap = ui.StrokeCap.round;
          t15$.strokeJoin = ui.StrokeJoin.round;
          t15$.blendMode = ui.BlendMode.dstOut;
          return t15$;
        })());
      }
      let borderPaint = this.polylineOpt.borderStrokeWidth > 0.0 ? (t15$0 = ui.Paint.new(), (() => {
        t15$0.color = (t16 = this.polylineOpt.borderColor, t16 == null ? new ui.Color.new(0) : t16);
        t15$0.strokeWidth = this.polylineOpt.strokeWidth + this.polylineOpt.borderStrokeWidth;
        t15$0.strokeCap = ui.StrokeCap.round;
        t15$0.strokeJoin = ui.StrokeJoin.round;
        t15$0.blendMode = ui.BlendMode.srcOver;
        return t15$0;
      })()) : null;
      let radius = paint.strokeWidth / 2;
      let borderRadius = dart.notNull((t15$2 = (t15$1 = borderPaint, t15$1 == null ? null : t15$1.strokeWidth), t15$2 == null ? 0.0 : t15$2)) / 2;
      if (this.polylineOpt.isDotted) {
        let spacing = this.polylineOpt.strokeWidth * 1.5;
        canvas.saveLayer(rect, ui.Paint.new());
        if (borderPaint != null && filterPaint != null) {
          this[_paintDottedLine](canvas, this.polylineOpt.offsets, borderRadius, spacing, borderPaint);
          this[_paintDottedLine](canvas, this.polylineOpt.offsets, radius, spacing, filterPaint);
        }
        this[_paintDottedLine](canvas, this.polylineOpt.offsets, radius, spacing, paint);
        canvas.restore();
      } else {
        paint.style = ui.PaintingStyle.stroke;
        canvas.saveLayer(rect, ui.Paint.new());
        if (borderPaint != null && filterPaint != null) {
          borderPaint.style = ui.PaintingStyle.stroke;
          this[_paintLine](canvas, this.polylineOpt.offsets, borderPaint);
          filterPaint.style = ui.PaintingStyle.stroke;
          this[_paintLine](canvas, this.polylineOpt.offsets, filterPaint);
        }
        this[_paintLine](canvas, this.polylineOpt.offsets, paint);
        canvas.restore();
      }
    }
    [_paintDottedLine](canvas, offsets, radius, stepLength, paint) {
      let path = ui.Path.new();
      let startDistance = 0.0;
      for (let i = 0; i < offsets[$length] - 1; i = i + 1) {
        let o0 = offsets[$_get](i);
        let o1 = offsets[$_get](i + 1);
        let totalDistance = polyline_layer._dist(o0, o1);
        let distance = startDistance;
        while (distance < totalDistance) {
          let f1 = distance / totalDistance;
          let f0 = 1.0 - f1;
          let offset = new ui.Offset.new(o0.dx * f0 + o1.dx * f1, o0.dy * f0 + o1.dy * f1);
          path.addOval(new ui.Rect.fromCircle({center: offset, radius: radius}));
          distance = distance + stepLength;
        }
        startDistance = distance < totalDistance ? stepLength - (totalDistance - distance) : distance - totalDistance;
      }
      path.addOval(new ui.Rect.fromCircle({center: this.polylineOpt.offsets[$last], radius: radius}));
      canvas.drawPath(path, paint);
    }
    [_paintLine](canvas, offsets, paint) {
      let t15;
      if (offsets[$isNotEmpty]) {
        let path = (t15 = ui.Path.new(), (() => {
          t15.moveTo(offsets[$_get](0).dx, offsets[$_get](0).dy);
          return t15;
        })());
        for (let offset of offsets) {
          path.lineTo(offset.dx, offset.dy);
        }
        canvas.drawPath(path, paint);
      }
    }
    [_paintGradient]() {
      return ui.Gradient.linear(this.polylineOpt.offsets[$first], this.polylineOpt.offsets[$last], dart.nullCheck(this.polylineOpt.gradientColors), this[_getColorsStop]());
    }
    [_getColorsStop]() {
      return this.polylineOpt.colorsStop != null && dart.nullCheck(this.polylineOpt.colorsStop)[$length] === dart.nullCheck(this.polylineOpt.gradientColors)[$length] ? this.polylineOpt.colorsStop : this[_calculateColorsStop]();
    }
    [_calculateColorsStop]() {
      let colorsStopInterval = 1.0 / dart.nullCheck(this.polylineOpt.gradientColors)[$length];
      return dart.nullCheck(this.polylineOpt.gradientColors)[$map](core.double, dart.fn(gradientColor => dart.nullCheck(this.polylineOpt.gradientColors)[$indexOf](gradientColor) * colorsStopInterval, T$.ColorTodouble()))[$toList]();
    }
    shouldRepaint(other) {
      polyline_layer.PolylinePainter.as(other);
      return false;
    }
  };
  (polyline_layer.PolylinePainter.new = function(polylineOpt) {
    this[polylineOpt$] = polylineOpt;
    polyline_layer.PolylinePainter.__proto__.new.call(this);
    ;
  }).prototype = polyline_layer.PolylinePainter.prototype;
  dart.addTypeTests(polyline_layer.PolylinePainter);
  dart.addTypeCaches(polyline_layer.PolylinePainter);
  dart.setMethodSignature(polyline_layer.PolylinePainter, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylinePainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_paintDottedLine]: dart.fnType(dart.void, [ui.Canvas, core.List$(ui.Offset), core.double, core.double, ui.Paint]),
    [_paintLine]: dart.fnType(dart.void, [ui.Canvas, core.List$(ui.Offset), ui.Paint]),
    [_paintGradient]: dart.fnType(ui.Gradient, []),
    [_getColorsStop]: dart.fnType(dart.nullable(core.List$(core.double)), []),
    [_calculateColorsStop]: dart.fnType(core.List$(core.double), []),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(polyline_layer.PolylinePainter, I[3]);
  dart.setFieldSignature(polyline_layer.PolylinePainter, () => ({
    __proto__: dart.getFields(polyline_layer.PolylinePainter.__proto__),
    polylineOpt: dart.finalFieldType(polyline_layer.Polyline)
  }));
  polyline_layer._dist = function _dist(v, w) {
    return math.sqrt(polyline_layer._dist2(v, w));
  };
  polyline_layer._dist2 = function _dist2(v, w) {
    return polyline_layer._sqr(v.dx - w.dx) + polyline_layer._sqr(v.dy - w.dy);
  };
  polyline_layer._sqr = function _sqr(x) {
    return x * x;
  };
  var polygons$ = dart.privateName(polygon_layer, "PolygonLayerOptions.polygons");
  var polygonCulling$ = dart.privateName(polygon_layer, "PolygonLayerOptions.polygonCulling");
  polygon_layer.PolygonLayerOptions = class PolygonLayerOptions extends layer.LayerOptions {
    get polygons() {
      return this[polygons$];
    }
    set polygons(value) {
      super.polygons = value;
    }
    get polygonCulling() {
      return this[polygonCulling$];
    }
    set polygonCulling(value) {
      super.polygonCulling = value;
    }
  };
  (polygon_layer.PolygonLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let polygons = opts && 'polygons' in opts ? opts.polygons : C[126] || CT.C126;
    let polygonCulling = opts && 'polygonCulling' in opts ? opts.polygonCulling : false;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[polygons$] = polygons;
    this[polygonCulling$] = polygonCulling;
    polygon_layer.PolygonLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    if (this.polygonCulling) {
      for (let polygon of this.polygons) {
        polygon.boundingBox = new latlng_bounds.LatLngBounds.fromPoints(polygon.points);
      }
    }
  }).prototype = polygon_layer.PolygonLayerOptions.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayerOptions);
  dart.addTypeCaches(polygon_layer.PolygonLayerOptions);
  dart.setLibraryUri(polygon_layer.PolygonLayerOptions, I[4]);
  dart.setFieldSignature(polygon_layer.PolygonLayerOptions, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayerOptions.__proto__),
    polygons: dart.finalFieldType(core.List$(polygon_layer.Polygon)),
    polygonCulling: dart.finalFieldType(core.bool)
  }));
  var points$0 = dart.privateName(polygon_layer, "Polygon.points");
  var offsets$ = dart.privateName(polygon_layer, "Polygon.offsets");
  var holePointsList$ = dart.privateName(polygon_layer, "Polygon.holePointsList");
  var holeOffsetsList = dart.privateName(polygon_layer, "Polygon.holeOffsetsList");
  var color$0 = dart.privateName(polygon_layer, "Polygon.color");
  var borderStrokeWidth$0 = dart.privateName(polygon_layer, "Polygon.borderStrokeWidth");
  var borderColor$0 = dart.privateName(polygon_layer, "Polygon.borderColor");
  var disableHolesBorder$ = dart.privateName(polygon_layer, "Polygon.disableHolesBorder");
  var isDotted$0 = dart.privateName(polygon_layer, "Polygon.isDotted");
  var __Polygon_boundingBox = dart.privateName(polygon_layer, "_#Polygon#boundingBox");
  polygon_layer.Polygon = class Polygon extends core.Object {
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get offsets() {
      return this[offsets$];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get holePointsList() {
      return this[holePointsList$];
    }
    set holePointsList(value) {
      super.holePointsList = value;
    }
    get holeOffsetsList() {
      return this[holeOffsetsList];
    }
    set holeOffsetsList(value) {
      super.holeOffsetsList = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$0];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$0];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get disableHolesBorder() {
      return this[disableHolesBorder$];
    }
    set disableHolesBorder(value) {
      super.disableHolesBorder = value;
    }
    get isDotted() {
      return this[isDotted$0];
    }
    set isDotted(value) {
      super.isDotted = value;
    }
    get boundingBox() {
      let t15;
      t15 = this[__Polygon_boundingBox];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("boundingBox")) : t15;
    }
    set boundingBox(t15) {
      if (this[__Polygon_boundingBox] == null)
        this[__Polygon_boundingBox] = t15;
      else
        dart.throw(new _internal.LateError.fieldAI("boundingBox"));
    }
  };
  (polygon_layer.Polygon.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let holePointsList = opts && 'holePointsList' in opts ? opts.holePointsList : null;
    let color = opts && 'color' in opts ? opts.color : C[102] || CT.C102;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[103] || CT.C103;
    let disableHolesBorder = opts && 'disableHolesBorder' in opts ? opts.disableHolesBorder : false;
    let isDotted = opts && 'isDotted' in opts ? opts.isDotted : false;
    this[offsets$] = T$.JSArrayOfOffset().of([]);
    this[__Polygon_boundingBox] = null;
    this[points$0] = points;
    this[holePointsList$] = holePointsList;
    this[color$0] = color;
    this[borderStrokeWidth$0] = borderStrokeWidth;
    this[borderColor$0] = borderColor;
    this[disableHolesBorder$] = disableHolesBorder;
    this[isDotted$0] = isDotted;
    this[holeOffsetsList] = holePointsList == null || holePointsList[$isEmpty] ? null : T$.ListOfListOfOffset().generate(holePointsList[$length], dart.fn(_ => T$.JSArrayOfOffset().of([]), T$.intToListOfOffset()));
    ;
  }).prototype = polygon_layer.Polygon.prototype;
  dart.addTypeTests(polygon_layer.Polygon);
  dart.addTypeCaches(polygon_layer.Polygon);
  dart.setGetterSignature(polygon_layer.Polygon, () => ({
    __proto__: dart.getGetters(polygon_layer.Polygon.__proto__),
    boundingBox: latlng_bounds.LatLngBounds
  }));
  dart.setSetterSignature(polygon_layer.Polygon, () => ({
    __proto__: dart.getSetters(polygon_layer.Polygon.__proto__),
    boundingBox: latlng_bounds.LatLngBounds
  }));
  dart.setLibraryUri(polygon_layer.Polygon, I[4]);
  dart.setFieldSignature(polygon_layer.Polygon, () => ({
    __proto__: dart.getFields(polygon_layer.Polygon.__proto__),
    points: dart.finalFieldType(core.List$(latlong.LatLng)),
    offsets: dart.finalFieldType(core.List$(ui.Offset)),
    holePointsList: dart.finalFieldType(dart.nullable(core.List$(core.List$(latlong.LatLng)))),
    holeOffsetsList: dart.finalFieldType(dart.nullable(core.List$(core.List$(ui.Offset)))),
    color: dart.finalFieldType(ui.Color),
    borderStrokeWidth: dart.finalFieldType(core.double),
    borderColor: dart.finalFieldType(ui.Color),
    disableHolesBorder: dart.finalFieldType(core.bool),
    isDotted: dart.finalFieldType(core.bool),
    [__Polygon_boundingBox]: dart.fieldType(dart.nullable(latlng_bounds.LatLngBounds))
  }));
  var options$2 = dart.privateName(polygon_layer, "PolygonLayerWidget.options");
  polygon_layer.PolygonLayerWidget = class PolygonLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$2];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new polygon_layer.PolygonLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[127] || CT.C127});
    }
  };
  (polygon_layer.PolygonLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$2] = options;
    polygon_layer.PolygonLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polygon_layer.PolygonLayerWidget.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayerWidget);
  dart.addTypeCaches(polygon_layer.PolygonLayerWidget);
  dart.setMethodSignature(polygon_layer.PolygonLayerWidget, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(polygon_layer.PolygonLayerWidget, I[4]);
  dart.setFieldSignature(polygon_layer.PolygonLayerWidget, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayerWidget.__proto__),
    options: dart.finalFieldType(polygon_layer.PolygonLayerOptions)
  }));
  var polygonOpts$ = dart.privateName(polygon_layer, "PolygonLayer.polygonOpts");
  var map$0 = dart.privateName(polygon_layer, "PolygonLayer.map");
  var stream$1 = dart.privateName(polygon_layer, "PolygonLayer.stream");
  var _build$ = dart.privateName(polygon_layer, "_build");
  var _fillOffsets$ = dart.privateName(polygon_layer, "_fillOffsets");
  polygon_layer.PolygonLayer = class PolygonLayer extends framework.StatelessWidget {
    get polygonOpts() {
      return this[polygonOpts$];
    }
    set polygonOpts(value) {
      super.polygonOpts = value;
    }
    get map() {
      return this[map$0];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$1];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build$](context, size);
        }, T$.BuildContextAndBoxConstraintsToWidget()), $creationLocationd_0dea112b090073317d4: C[132] || CT.C132});
    }
    [_build$](context, size) {
      return new (T$.StreamBuilderOfNull()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let polygons = T$.JSArrayOfWidget().of([]);
          for (let polygon of this.polygonOpts.polygons) {
            polygon.offsets[$clear]();
            if (polygon.holeOffsetsList != null) {
              for (let offsets of dart.nullCheck(polygon.holeOffsetsList)) {
                offsets[$clear]();
              }
            }
            if (this.polygonOpts.polygonCulling && !polygon.boundingBox.isOverlapping(this.map.bounds)) {
              continue;
            }
            this[_fillOffsets$](polygon.offsets, polygon.points);
            if (polygon.holePointsList != null) {
              for (let i = 0, len = dart.nullCheck(polygon.holePointsList)[$length]; i < len; i = i + 1) {
                this[_fillOffsets$](dart.nullCheck(polygon.holeOffsetsList)[$_get](i), dart.nullCheck(polygon.holePointsList)[$_get](i));
              }
            }
            polygons[$add](new basic.CustomPaint.new({painter: new polygon_layer.PolygonPainter.new(polygon), size: size, $creationLocationd_0dea112b090073317d4: C[135] || CT.C135}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: polygons, $creationLocationd_0dea112b090073317d4: C[139] || CT.C139}), $creationLocationd_0dea112b090073317d4: C[142] || CT.C142});
        }, T$.BuildContextAndAsyncSnapshotOfObjectNToContainer()), $creationLocationd_0dea112b090073317d4: C[145] || CT.C145});
    }
    [_fillOffsets$](offsets, points) {
      for (let i = 0, len = points[$length]; i < len; i = i + 1) {
        let point = points[$_get](i);
        let pos = this.map.project(point);
        pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
        offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        if (i > 0) {
          offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        }
      }
    }
  };
  (polygon_layer.PolygonLayer.new = function(polygonOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[polygonOpts$] = polygonOpts;
    this[map$0] = map;
    this[stream$1] = stream;
    polygon_layer.PolygonLayer.__proto__.new.call(this, {key: polygonOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polygon_layer.PolygonLayer.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayer);
  dart.addTypeCaches(polygon_layer.PolygonLayer);
  dart.setMethodSignature(polygon_layer.PolygonLayer, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonLayer.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_build$]: dart.fnType(framework.Widget, [framework.BuildContext, ui.Size]),
    [_fillOffsets$]: dart.fnType(dart.void, [core.List$(ui.Offset), core.List$(latlong.LatLng)])
  }));
  dart.setLibraryUri(polygon_layer.PolygonLayer, I[4]);
  dart.setFieldSignature(polygon_layer.PolygonLayer, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayer.__proto__),
    polygonOpts: dart.finalFieldType(polygon_layer.PolygonLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(dart.nullable(async.Stream$(core.Null)))
  }));
  var polygonOpt$ = dart.privateName(polygon_layer, "PolygonPainter.polygonOpt");
  var _paintPolygon = dart.privateName(polygon_layer, "_paintPolygon");
  var _paintDottedLine$ = dart.privateName(polygon_layer, "_paintDottedLine");
  var _paintLine$ = dart.privateName(polygon_layer, "_paintLine");
  var _paintBorder = dart.privateName(polygon_layer, "_paintBorder");
  var _dist$ = dart.privateName(polygon_layer, "_dist");
  var _dist2$ = dart.privateName(polygon_layer, "_dist2");
  var _sqr$ = dart.privateName(polygon_layer, "_sqr");
  polygon_layer.PolygonPainter = class PolygonPainter extends custom_paint.CustomPainter {
    get polygonOpt() {
      return this[polygonOpt$];
    }
    set polygonOpt(value) {
      super.polygonOpt = value;
    }
    paint(canvas, size) {
      if (this.polygonOpt.offsets[$isEmpty]) {
        return;
      }
      let rect = ui.Offset.zero['&'](size);
      this[_paintPolygon](canvas, rect);
    }
    [_paintBorder](canvas) {
      let t16;
      if (this.polygonOpt.borderStrokeWidth > 0.0) {
        let borderRadius = this.polygonOpt.borderStrokeWidth / 2;
        let borderPaint = (t16 = ui.Paint.new(), (() => {
          t16.color = this.polygonOpt.borderColor;
          t16.strokeWidth = this.polygonOpt.borderStrokeWidth;
          return t16;
        })());
        if (this.polygonOpt.isDotted) {
          let spacing = this.polygonOpt.borderStrokeWidth * 1.5;
          this[_paintDottedLine$](canvas, this.polygonOpt.offsets, borderRadius, spacing, borderPaint);
          if (!this.polygonOpt.disableHolesBorder && this.polygonOpt.holeOffsetsList != null) {
            for (let offsets of dart.nullCheck(this.polygonOpt.holeOffsetsList)) {
              this[_paintDottedLine$](canvas, offsets, borderRadius, spacing, borderPaint);
            }
          }
        } else {
          this[_paintLine$](canvas, this.polygonOpt.offsets, borderRadius, borderPaint);
          if (!this.polygonOpt.disableHolesBorder && this.polygonOpt.holeOffsetsList != null) {
            for (let offsets of dart.nullCheck(this.polygonOpt.holeOffsetsList)) {
              this[_paintLine$](canvas, offsets, borderRadius, borderPaint);
            }
          }
        }
      }
    }
    [_paintDottedLine$](canvas, offsets, radius, stepLength, paint) {
      let startDistance = 0.0;
      for (let i = 0; i < offsets[$length] - 1; i = i + 1) {
        let o0 = offsets[$_get](i);
        let o1 = offsets[$_get](i + 1);
        let totalDistance = this[_dist$](o0, o1);
        let distance = startDistance;
        while (distance < totalDistance) {
          let f1 = distance / totalDistance;
          let f0 = 1.0 - f1;
          let offset = new ui.Offset.new(o0.dx * f0 + o1.dx * f1, o0.dy * f0 + o1.dy * f1);
          canvas.drawCircle(offset, radius, paint);
          distance = distance + stepLength;
        }
        startDistance = distance < totalDistance ? stepLength - (totalDistance - distance) : distance - totalDistance;
      }
      canvas.drawCircle(offsets[$last], radius, paint);
    }
    [_paintLine$](canvas, offsets, radius, paint) {
      canvas.drawPoints(ui.PointMode.lines, (() => {
        let t16 = T$.ListOfOffset().of(offsets);
        t16[$add](offsets[$_get](0));
        return t16;
      })(), paint);
      for (let offset of offsets) {
        canvas.drawCircle(offset, radius, paint);
      }
    }
    [_paintPolygon](canvas, rect) {
      let t17, t17$;
      let paint = ui.Paint.new();
      if (this.polygonOpt.holeOffsetsList != null) {
        canvas.saveLayer(rect, paint);
        paint.style = ui.PaintingStyle.fill;
        for (let offsets of dart.nullCheck(this.polygonOpt.holeOffsetsList)) {
          let path = ui.Path.new();
          path.addPolygon(offsets, true);
          canvas.drawPath(path, paint);
        }
        t17 = paint;
        (() => {
          t17.color = this.polygonOpt.color;
          t17.blendMode = ui.BlendMode.srcOut;
          return t17;
        })();
        let path = ui.Path.new();
        path.addPolygon(this.polygonOpt.offsets, true);
        canvas.drawPath(path, paint);
        this[_paintBorder](canvas);
        canvas.restore();
      } else {
        canvas.clipRect(rect);
        t17$ = paint;
        (() => {
          t17$.style = ui.PaintingStyle.fill;
          t17$.color = this.polygonOpt.color;
          return t17$;
        })();
        let path = ui.Path.new();
        path.addPolygon(this.polygonOpt.offsets, true);
        canvas.drawPath(path, paint);
        this[_paintBorder](canvas);
      }
    }
    shouldRepaint(other) {
      polygon_layer.PolygonPainter.as(other);
      return false;
    }
    [_dist$](v, w) {
      return math.sqrt(this[_dist2$](v, w));
    }
    [_dist2$](v, w) {
      return this[_sqr$](v.dx - w.dx) + this[_sqr$](v.dy - w.dy);
    }
    [_sqr$](x) {
      return x * x;
    }
  };
  (polygon_layer.PolygonPainter.new = function(polygonOpt) {
    this[polygonOpt$] = polygonOpt;
    polygon_layer.PolygonPainter.__proto__.new.call(this);
    ;
  }).prototype = polygon_layer.PolygonPainter.prototype;
  dart.addTypeTests(polygon_layer.PolygonPainter);
  dart.addTypeCaches(polygon_layer.PolygonPainter);
  dart.setMethodSignature(polygon_layer.PolygonPainter, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_paintBorder]: dart.fnType(dart.void, [ui.Canvas]),
    [_paintDottedLine$]: dart.fnType(dart.void, [ui.Canvas, core.List$(ui.Offset), core.double, core.double, ui.Paint]),
    [_paintLine$]: dart.fnType(dart.void, [ui.Canvas, core.List$(ui.Offset), core.double, ui.Paint]),
    [_paintPolygon]: dart.fnType(dart.void, [ui.Canvas, ui.Rect]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_dist$]: dart.fnType(core.double, [ui.Offset, ui.Offset]),
    [_dist2$]: dart.fnType(core.double, [ui.Offset, ui.Offset]),
    [_sqr$]: dart.fnType(core.double, [core.double])
  }));
  dart.setLibraryUri(polygon_layer.PolygonPainter, I[4]);
  dart.setFieldSignature(polygon_layer.PolygonPainter, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonPainter.__proto__),
    polygonOpt: dart.finalFieldType(polygon_layer.Polygon)
  }));
  var markers$ = dart.privateName(marker_layer, "MarkerLayerOptions.markers");
  var rotate$ = dart.privateName(marker_layer, "MarkerLayerOptions.rotate");
  var rotateOrigin$ = dart.privateName(marker_layer, "MarkerLayerOptions.rotateOrigin");
  var rotateAlignment$ = dart.privateName(marker_layer, "MarkerLayerOptions.rotateAlignment");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  marker_layer.MarkerLayerOptions = class MarkerLayerOptions extends layer.LayerOptions {
    get markers() {
      return this[markers$];
    }
    set markers(value) {
      super.markers = value;
    }
    get rotate() {
      return this[rotate$];
    }
    set rotate(value) {
      super.rotate = value;
    }
    get rotateOrigin() {
      return this[rotateOrigin$];
    }
    set rotateOrigin(value) {
      super.rotateOrigin = value;
    }
    get rotateAlignment() {
      return this[rotateAlignment$];
    }
    set rotateAlignment(value) {
      super.rotateAlignment = value;
    }
  };
  (marker_layer.MarkerLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let markers = opts && 'markers' in opts ? opts.markers : C[149] || CT.C149;
    let rotate = opts && 'rotate' in opts ? opts.rotate : false;
    let rotateOrigin = opts && 'rotateOrigin' in opts ? opts.rotateOrigin : null;
    let rotateAlignment = opts && 'rotateAlignment' in opts ? opts.rotateAlignment : C[150] || CT.C150;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[markers$] = markers;
    this[rotate$] = rotate;
    this[rotateOrigin$] = rotateOrigin;
    this[rotateAlignment$] = rotateAlignment;
    marker_layer.MarkerLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    ;
  }).prototype = marker_layer.MarkerLayerOptions.prototype;
  dart.addTypeTests(marker_layer.MarkerLayerOptions);
  dart.addTypeCaches(marker_layer.MarkerLayerOptions);
  dart.setLibraryUri(marker_layer.MarkerLayerOptions, I[5]);
  dart.setFieldSignature(marker_layer.MarkerLayerOptions, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayerOptions.__proto__),
    markers: dart.finalFieldType(core.List$(marker_layer.Marker)),
    rotate: dart.finalFieldType(dart.nullable(core.bool)),
    rotateOrigin: dart.finalFieldType(dart.nullable(ui.Offset)),
    rotateAlignment: dart.finalFieldType(dart.nullable(alignment.AlignmentGeometry))
  }));
  var left$ = dart.privateName(marker_layer, "Anchor.left");
  var top$ = dart.privateName(marker_layer, "Anchor.top");
  var _name$0 = dart.privateName(marker_layer, "_name");
  marker_layer.Anchor = class Anchor extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    static _leftOffset(width, alignOpt) {
      switch (alignOpt) {
        case C[151] || CT.C151:
        {
          return 0.0;
        }
        case C[152] || CT.C152:
        {
          return width;
        }
        case C[153] || CT.C153:
        case C[154] || CT.C154:
        case C[155] || CT.C155:
        default:
        {
          return width / 2;
        }
      }
    }
    static _topOffset(height, alignOpt) {
      switch (alignOpt) {
        case C[153] || CT.C153:
        {
          return 0.0;
        }
        case C[154] || CT.C154:
        {
          return height;
        }
        case C[151] || CT.C151:
        case C[152] || CT.C152:
        case C[155] || CT.C155:
        default:
        {
          return height / 2;
        }
      }
    }
    static forPos(pos, width, height) {
      if (pos == null) return new marker_layer.Anchor.__(width, height, marker_layer.AnchorAlign.none);
      if (marker_layer.AnchorAlign.is(pos.value)) return new marker_layer.Anchor.__(width, height, marker_layer.AnchorAlign.as(pos.value));
      if (marker_layer.Anchor.is(pos.value)) return marker_layer.Anchor.as(pos.value);
      dart.throw(core.Exception.new("Unsupported AnchorPos value type: " + dart.str(dart.runtimeType(pos)) + "."));
    }
  };
  (marker_layer.Anchor.new = function(left, top) {
    this[left$] = left;
    this[top$] = top;
    ;
  }).prototype = marker_layer.Anchor.prototype;
  (marker_layer.Anchor.__ = function(width, height, alignOpt) {
    this[left$] = marker_layer.Anchor._leftOffset(width, alignOpt);
    this[top$] = marker_layer.Anchor._topOffset(height, alignOpt);
    ;
  }).prototype = marker_layer.Anchor.prototype;
  dart.addTypeTests(marker_layer.Anchor);
  dart.addTypeCaches(marker_layer.Anchor);
  dart.setLibraryUri(marker_layer.Anchor, I[5]);
  dart.setFieldSignature(marker_layer.Anchor, () => ({
    __proto__: dart.getFields(marker_layer.Anchor.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double)
  }));
  var value$ = dart.privateName(marker_layer, "AnchorPos.value");
  const _is_AnchorPos_default = Symbol('_is_AnchorPos_default');
  marker_layer.AnchorPos$ = dart.generic(T => {
    class AnchorPos extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = T.as(value);
      }
      static exactly(anchor) {
        return new marker_layer.AnchorPos.__(anchor);
      }
      static align(alignOpt) {
        return new marker_layer.AnchorPos.__(alignOpt);
      }
    }
    (AnchorPos.__ = function(value) {
      this[value$] = value;
      ;
    }).prototype = AnchorPos.prototype;
    dart.addTypeTests(AnchorPos);
    AnchorPos.prototype[_is_AnchorPos_default] = true;
    dart.addTypeCaches(AnchorPos);
    dart.setLibraryUri(AnchorPos, I[5]);
    dart.setFieldSignature(AnchorPos, () => ({
      __proto__: dart.getFields(AnchorPos.__proto__),
      value: dart.fieldType(T)
    }));
    return AnchorPos;
  });
  marker_layer.AnchorPos = marker_layer.AnchorPos$();
  dart.addTypeTests(marker_layer.AnchorPos, _is_AnchorPos_default);
  marker_layer.AnchorAlign = class AnchorAlign extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (marker_layer.AnchorAlign.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = marker_layer.AnchorAlign.prototype;
  dart.addTypeTests(marker_layer.AnchorAlign);
  dart.addTypeCaches(marker_layer.AnchorAlign);
  dart.setLibraryUri(marker_layer.AnchorAlign, I[5]);
  dart.setFieldSignature(marker_layer.AnchorAlign, () => ({
    __proto__: dart.getFields(marker_layer.AnchorAlign.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(marker_layer.AnchorAlign, ['toString']);
  marker_layer.AnchorAlign.none = C[156] || CT.C156;
  marker_layer.AnchorAlign.left = C[151] || CT.C151;
  marker_layer.AnchorAlign.right = C[152] || CT.C152;
  marker_layer.AnchorAlign.top = C[153] || CT.C153;
  marker_layer.AnchorAlign.bottom = C[154] || CT.C154;
  marker_layer.AnchorAlign.center = C[155] || CT.C155;
  marker_layer.AnchorAlign.values = C[157] || CT.C157;
  var point$ = dart.privateName(marker_layer, "Marker.point");
  var builder$ = dart.privateName(marker_layer, "Marker.builder");
  var key$ = dart.privateName(marker_layer, "Marker.key");
  var width$ = dart.privateName(marker_layer, "Marker.width");
  var height$ = dart.privateName(marker_layer, "Marker.height");
  var anchor = dart.privateName(marker_layer, "Marker.anchor");
  var rotate$0 = dart.privateName(marker_layer, "Marker.rotate");
  var rotateOrigin$0 = dart.privateName(marker_layer, "Marker.rotateOrigin");
  var rotateAlignment$0 = dart.privateName(marker_layer, "Marker.rotateAlignment");
  marker_layer.Marker = class Marker extends core.Object {
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get anchor() {
      return this[anchor];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get rotate() {
      return this[rotate$0];
    }
    set rotate(value) {
      super.rotate = value;
    }
    get rotateOrigin() {
      return this[rotateOrigin$0];
    }
    set rotateOrigin(value) {
      super.rotateOrigin = value;
    }
    get rotateAlignment() {
      return this[rotateAlignment$0];
    }
    set rotateAlignment(value) {
      super.rotateAlignment = value;
    }
  };
  (marker_layer.Marker.new = function(opts) {
    let point = opts && 'point' in opts ? opts.point : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let width = opts && 'width' in opts ? opts.width : 30;
    let height = opts && 'height' in opts ? opts.height : 30;
    let rotate = opts && 'rotate' in opts ? opts.rotate : null;
    let rotateOrigin = opts && 'rotateOrigin' in opts ? opts.rotateOrigin : null;
    let rotateAlignment = opts && 'rotateAlignment' in opts ? opts.rotateAlignment : null;
    let anchorPos = opts && 'anchorPos' in opts ? opts.anchorPos : null;
    this[point$] = point;
    this[builder$] = builder;
    this[key$] = key;
    this[width$] = width;
    this[height$] = height;
    this[rotate$0] = rotate;
    this[rotateOrigin$0] = rotateOrigin;
    this[rotateAlignment$0] = rotateAlignment;
    this[anchor] = marker_layer.Anchor.forPos(anchorPos, width, height);
    ;
  }).prototype = marker_layer.Marker.prototype;
  dart.addTypeTests(marker_layer.Marker);
  dart.addTypeCaches(marker_layer.Marker);
  dart.setLibraryUri(marker_layer.Marker, I[5]);
  dart.setFieldSignature(marker_layer.Marker, () => ({
    __proto__: dart.getFields(marker_layer.Marker.__proto__),
    point: dart.finalFieldType(latlong.LatLng),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext])),
    key: dart.finalFieldType(dart.nullable(key.Key)),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    anchor: dart.finalFieldType(marker_layer.Anchor),
    rotate: dart.finalFieldType(dart.nullable(core.bool)),
    rotateOrigin: dart.finalFieldType(dart.nullable(ui.Offset)),
    rotateAlignment: dart.finalFieldType(dart.nullable(alignment.AlignmentGeometry))
  }));
  var options$3 = dart.privateName(marker_layer, "MarkerLayerWidget.options");
  marker_layer.MarkerLayerWidget = class MarkerLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$3];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new marker_layer.MarkerLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[158] || CT.C158});
    }
  };
  (marker_layer.MarkerLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$3] = options;
    marker_layer.MarkerLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = marker_layer.MarkerLayerWidget.prototype;
  dart.addTypeTests(marker_layer.MarkerLayerWidget);
  dart.addTypeCaches(marker_layer.MarkerLayerWidget);
  dart.setMethodSignature(marker_layer.MarkerLayerWidget, () => ({
    __proto__: dart.getMethods(marker_layer.MarkerLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(marker_layer.MarkerLayerWidget, I[5]);
  dart.setFieldSignature(marker_layer.MarkerLayerWidget, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayerWidget.__proto__),
    options: dart.finalFieldType(marker_layer.MarkerLayerOptions)
  }));
  var markerLayerOptions$ = dart.privateName(marker_layer, "MarkerLayer.markerLayerOptions");
  var map$1 = dart.privateName(marker_layer, "MarkerLayer.map");
  var stream$2 = dart.privateName(marker_layer, "MarkerLayer.stream");
  marker_layer.MarkerLayer = class MarkerLayer extends framework.StatefulWidget {
    get markerLayerOptions() {
      return this[markerLayerOptions$];
    }
    set markerLayerOptions(value) {
      super.markerLayerOptions = value;
    }
    get map() {
      return this[map$1];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$2];
    }
    set stream(value) {
      super.stream = value;
    }
    createState() {
      return new marker_layer._MarkerLayerState.new();
    }
  };
  (marker_layer.MarkerLayer.new = function(markerLayerOptions, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[markerLayerOptions$] = markerLayerOptions;
    this[map$1] = map;
    this[stream$2] = stream;
    marker_layer.MarkerLayer.__proto__.new.call(this, {key: markerLayerOptions.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = marker_layer.MarkerLayer.prototype;
  dart.addTypeTests(marker_layer.MarkerLayer);
  dart.addTypeCaches(marker_layer.MarkerLayer);
  dart.setMethodSignature(marker_layer.MarkerLayer, () => ({
    __proto__: dart.getMethods(marker_layer.MarkerLayer.__proto__),
    createState: dart.fnType(marker_layer._MarkerLayerState, [])
  }));
  dart.setLibraryUri(marker_layer.MarkerLayer, I[5]);
  dart.setFieldSignature(marker_layer.MarkerLayer, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayer.__proto__),
    markerLayerOptions: dart.finalFieldType(marker_layer.MarkerLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(dart.nullable(async.Stream$(core.Null)))
  }));
  var _pxCache = dart.privateName(marker_layer, "_pxCache");
  marker_layer._MarkerLayerState = class _MarkerLayerState extends framework.State$(marker_layer.MarkerLayer) {
    generatePxCache() {
      return T$.ListOfCustomPointOfnum().generate(this.widget.markerLayerOptions.markers[$length], dart.fn(i => this.widget.map.project(this.widget.markerLayerOptions.markers[$_get](i).point), T$.intToCustomPointOfnum()));
    }
    initState() {
      super.initState();
      this[_pxCache] = this.generatePxCache();
    }
    didUpdateWidget(oldWidget) {
      marker_layer.MarkerLayer.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      this.lastZoom = -1.0;
      this[_pxCache] = this.generatePxCache();
    }
    build(context) {
      return new (T$.StreamBuilderOfintN()).new({stream: this.widget.stream, builder: dart.fn((context, snapshot) => {
          let t17, t17$, t17$0, t17$1, t18, t17$2, t18$, t17$3;
          let markers = T$.JSArrayOfWidget().of([]);
          let sameZoom = this.widget.map.zoom === this.lastZoom;
          for (let i = 0; i < this.widget.markerLayerOptions.markers[$length]; i = i + 1) {
            let marker = this.widget.markerLayerOptions.markers[$_get](i);
            let pxPoint = sameZoom ? this[_pxCache][$_get](i) : this.widget.map.project(marker.point);
            if (!sameZoom) {
              this[_pxCache][$_set](i, pxPoint);
            }
            let width = marker.width - marker.anchor.left;
            let height = marker.height - marker.anchor.top;
            let sw = new (T$.CustomPointOfnum()).new(pxPoint.x + width, pxPoint.y - height);
            let ne = new (T$.CustomPointOfnum()).new(pxPoint.x - width, pxPoint.y + height);
            if (!this.widget.map.pixelBounds.containsPartialBounds(T$.BoundsOfnum().new(sw, ne))) {
              continue;
            }
            let pos = pxPoint['-'](this.widget.map.getPixelOrigin());
            let markerWidget = dart.test((t17$ = (t17 = marker.rotate, t17 == null ? this.widget.markerLayerOptions.rotate : t17), t17$ == null ? false : t17$)) ? new basic.Transform.rotate({angle: -this.widget.map.rotationRad, origin: (t17$0 = marker.rotateOrigin, t17$0 == null ? this.widget.markerLayerOptions.rotateOrigin : t17$0), alignment: (t17$1 = marker.rotateAlignment, t17$1 == null ? this.widget.markerLayerOptions.rotateAlignment : t17$1), child: (t17$2 = marker, t18 = context, t17$2.builder(t18)), $creationLocationd_0dea112b090073317d4: C[163] || CT.C163}) : (t17$3 = marker, t18$ = context, t17$3.builder(t18$));
            markers[$add](new basic.Positioned.new({key: marker.key, width: marker.width, height: marker.height, left: pos.x - width, top: pos.y - height, child: markerWidget, $creationLocationd_0dea112b090073317d4: C[169] || CT.C169}));
          }
          this.lastZoom = this.widget.map.zoom;
          return new container.Container.new({child: new basic.Stack.new({children: markers, $creationLocationd_0dea112b090073317d4: C[177] || CT.C177}), $creationLocationd_0dea112b090073317d4: C[180] || CT.C180});
        }, T$.BuildContextAndAsyncSnapshotOfintNToContainer()), $creationLocationd_0dea112b090073317d4: C[183] || CT.C183});
    }
  };
  (marker_layer._MarkerLayerState.new = function() {
    this.lastZoom = -1.0;
    this[_pxCache] = T$.JSArrayOfCustomPointOfnum().of([]);
    marker_layer._MarkerLayerState.__proto__.new.call(this);
    ;
  }).prototype = marker_layer._MarkerLayerState.prototype;
  dart.addTypeTests(marker_layer._MarkerLayerState);
  dart.addTypeCaches(marker_layer._MarkerLayerState);
  dart.setMethodSignature(marker_layer._MarkerLayerState, () => ({
    __proto__: dart.getMethods(marker_layer._MarkerLayerState.__proto__),
    generatePxCache: dart.fnType(core.List$(point.CustomPoint$(core.num)), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(marker_layer._MarkerLayerState, I[5]);
  dart.setFieldSignature(marker_layer._MarkerLayerState, () => ({
    __proto__: dart.getFields(marker_layer._MarkerLayerState.__proto__),
    lastZoom: dart.fieldType(core.double),
    [_pxCache]: dart.fieldType(core.List$(point.CustomPoint$(core.num)))
  }));
  var circles$ = dart.privateName(circle_layer, "CircleLayerOptions.circles");
  circle_layer.CircleLayerOptions = class CircleLayerOptions extends layer.LayerOptions {
    get circles() {
      return this[circles$];
    }
    set circles(value) {
      super.circles = value;
    }
  };
  (circle_layer.CircleLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let circles = opts && 'circles' in opts ? opts.circles : C[187] || CT.C187;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[circles$] = circles;
    circle_layer.CircleLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    ;
  }).prototype = circle_layer.CircleLayerOptions.prototype;
  dart.addTypeTests(circle_layer.CircleLayerOptions);
  dart.addTypeCaches(circle_layer.CircleLayerOptions);
  dart.setLibraryUri(circle_layer.CircleLayerOptions, I[6]);
  dart.setFieldSignature(circle_layer.CircleLayerOptions, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayerOptions.__proto__),
    circles: dart.finalFieldType(core.List$(circle_layer.CircleMarker))
  }));
  var point$0 = dart.privateName(circle_layer, "CircleMarker.point");
  var radius$ = dart.privateName(circle_layer, "CircleMarker.radius");
  var color$1 = dart.privateName(circle_layer, "CircleMarker.color");
  var borderStrokeWidth$1 = dart.privateName(circle_layer, "CircleMarker.borderStrokeWidth");
  var borderColor$1 = dart.privateName(circle_layer, "CircleMarker.borderColor");
  var useRadiusInMeter$ = dart.privateName(circle_layer, "CircleMarker.useRadiusInMeter");
  var offset = dart.privateName(circle_layer, "CircleMarker.offset");
  var realRadius = dart.privateName(circle_layer, "CircleMarker.realRadius");
  circle_layer.CircleMarker = class CircleMarker extends core.Object {
    get point() {
      return this[point$0];
    }
    set point(value) {
      super.point = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$1];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$1];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get useRadiusInMeter() {
      return this[useRadiusInMeter$];
    }
    set useRadiusInMeter(value) {
      super.useRadiusInMeter = value;
    }
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    get realRadius() {
      return this[realRadius];
    }
    set realRadius(value) {
      this[realRadius] = value;
    }
  };
  (circle_layer.CircleMarker.new = function(opts) {
    let point = opts && 'point' in opts ? opts.point : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let useRadiusInMeter = opts && 'useRadiusInMeter' in opts ? opts.useRadiusInMeter : false;
    let color = opts && 'color' in opts ? opts.color : C[102] || CT.C102;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[103] || CT.C103;
    this[offset] = ui.Offset.zero;
    this[realRadius] = 0;
    this[point$0] = point;
    this[radius$] = radius;
    this[useRadiusInMeter$] = useRadiusInMeter;
    this[color$1] = color;
    this[borderStrokeWidth$1] = borderStrokeWidth;
    this[borderColor$1] = borderColor;
    ;
  }).prototype = circle_layer.CircleMarker.prototype;
  dart.addTypeTests(circle_layer.CircleMarker);
  dart.addTypeCaches(circle_layer.CircleMarker);
  dart.setLibraryUri(circle_layer.CircleMarker, I[6]);
  dart.setFieldSignature(circle_layer.CircleMarker, () => ({
    __proto__: dart.getFields(circle_layer.CircleMarker.__proto__),
    point: dart.finalFieldType(latlong.LatLng),
    radius: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    borderStrokeWidth: dart.finalFieldType(core.double),
    borderColor: dart.finalFieldType(ui.Color),
    useRadiusInMeter: dart.finalFieldType(core.bool),
    offset: dart.fieldType(ui.Offset),
    realRadius: dart.fieldType(core.num)
  }));
  var options$4 = dart.privateName(circle_layer, "CircleLayerWidget.options");
  circle_layer.CircleLayerWidget = class CircleLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$4];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new circle_layer.CircleLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[188] || CT.C188});
    }
  };
  (circle_layer.CircleLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$4] = options;
    circle_layer.CircleLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = circle_layer.CircleLayerWidget.prototype;
  dart.addTypeTests(circle_layer.CircleLayerWidget);
  dart.addTypeCaches(circle_layer.CircleLayerWidget);
  dart.setMethodSignature(circle_layer.CircleLayerWidget, () => ({
    __proto__: dart.getMethods(circle_layer.CircleLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(circle_layer.CircleLayerWidget, I[6]);
  dart.setFieldSignature(circle_layer.CircleLayerWidget, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayerWidget.__proto__),
    options: dart.finalFieldType(circle_layer.CircleLayerOptions)
  }));
  var circleOpts$ = dart.privateName(circle_layer, "CircleLayer.circleOpts");
  var map$2 = dart.privateName(circle_layer, "CircleLayer.map");
  var stream$3 = dart.privateName(circle_layer, "CircleLayer.stream");
  var _build$0 = dart.privateName(circle_layer, "_build");
  circle_layer.CircleLayer = class CircleLayer extends framework.StatelessWidget {
    get circleOpts() {
      return this[circleOpts$];
    }
    set circleOpts(value) {
      super.circleOpts = value;
    }
    get map() {
      return this[map$2];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$3];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build$0](context, size);
        }, T$.BuildContextAndBoxConstraintsToWidget()), $creationLocationd_0dea112b090073317d4: C[193] || CT.C193});
    }
    [_build$0](context, size) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let circleWidgets = T$.JSArrayOfWidget().of([]);
          for (let circle of this.circleOpts.circles) {
            let pos = this.map.project(circle.point);
            pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
            circle.offset = new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]());
            if (circle.useRadiusInMeter) {
              let r = new latlong.Distance.new().offset(circle.point, circle.radius, 180);
              let rpos = this.map.project(r);
              rpos = rpos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
              circle.realRadius = rpos.y - pos.y;
            }
            circleWidgets[$add](new basic.CustomPaint.new({painter: new circle_layer.CirclePainter.new(circle), size: size, $creationLocationd_0dea112b090073317d4: C[196] || CT.C196}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: circleWidgets, $creationLocationd_0dea112b090073317d4: C[200] || CT.C200}), $creationLocationd_0dea112b090073317d4: C[203] || CT.C203});
        }, T$.BuildContextAndAsyncSnapshotOfvoidToContainer()), $creationLocationd_0dea112b090073317d4: C[206] || CT.C206});
    }
  };
  (circle_layer.CircleLayer.new = function(circleOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[circleOpts$] = circleOpts;
    this[map$2] = map;
    this[stream$3] = stream;
    circle_layer.CircleLayer.__proto__.new.call(this, {key: circleOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = circle_layer.CircleLayer.prototype;
  dart.addTypeTests(circle_layer.CircleLayer);
  dart.addTypeCaches(circle_layer.CircleLayer);
  dart.setMethodSignature(circle_layer.CircleLayer, () => ({
    __proto__: dart.getMethods(circle_layer.CircleLayer.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_build$0]: dart.fnType(framework.Widget, [framework.BuildContext, ui.Size])
  }));
  dart.setLibraryUri(circle_layer.CircleLayer, I[6]);
  dart.setFieldSignature(circle_layer.CircleLayer, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayer.__proto__),
    circleOpts: dart.finalFieldType(circle_layer.CircleLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(dart.nullable(async.Stream$(core.Null)))
  }));
  var circle$ = dart.privateName(circle_layer, "CirclePainter.circle");
  var _paintCircle = dart.privateName(circle_layer, "_paintCircle");
  circle_layer.CirclePainter = class CirclePainter extends custom_paint.CustomPainter {
    get circle() {
      return this[circle$];
    }
    set circle(value) {
      super.circle = value;
    }
    paint(canvas, size) {
      let t17, t17$;
      let rect = ui.Offset.zero['&'](size);
      canvas.clipRect(rect);
      let paint = (t17 = ui.Paint.new(), (() => {
        t17.style = ui.PaintingStyle.fill;
        t17.color = this.circle.color;
        return t17;
      })());
      this[_paintCircle](canvas, this.circle.offset, this.circle.useRadiusInMeter ? this.circle.realRadius : this.circle.radius, paint);
      if (this.circle.borderStrokeWidth > 0) {
        let paint = (t17$ = ui.Paint.new(), (() => {
          t17$.style = ui.PaintingStyle.stroke;
          t17$.color = this.circle.borderColor;
          t17$.strokeWidth = this.circle.borderStrokeWidth;
          return t17$;
        })());
        this[_paintCircle](canvas, this.circle.offset, this.circle.useRadiusInMeter ? this.circle.realRadius : this.circle.radius, paint);
      }
    }
    [_paintCircle](canvas, offset, radius, paint) {
      canvas.drawCircle(offset, radius, paint);
    }
    shouldRepaint(other) {
      circle_layer.CirclePainter.as(other);
      return false;
    }
  };
  (circle_layer.CirclePainter.new = function(circle) {
    this[circle$] = circle;
    circle_layer.CirclePainter.__proto__.new.call(this);
    ;
  }).prototype = circle_layer.CirclePainter.prototype;
  dart.addTypeTests(circle_layer.CirclePainter);
  dart.addTypeCaches(circle_layer.CirclePainter);
  dart.setMethodSignature(circle_layer.CirclePainter, () => ({
    __proto__: dart.getMethods(circle_layer.CirclePainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_paintCircle]: dart.fnType(dart.void, [ui.Canvas, ui.Offset, core.double, ui.Paint]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(circle_layer.CirclePainter, I[6]);
  dart.setFieldSignature(circle_layer.CirclePainter, () => ({
    __proto__: dart.getFields(circle_layer.CirclePainter.__proto__),
    circle: dart.finalFieldType(circle_layer.CircleMarker)
  }));
  plugin.MapPlugin = class MapPlugin extends core.Object {};
  (plugin.MapPlugin.new = function() {
    ;
  }).prototype = plugin.MapPlugin.prototype;
  dart.addTypeTests(plugin.MapPlugin);
  dart.addTypeCaches(plugin.MapPlugin);
  dart.setLibraryUri(plugin.MapPlugin, I[7]);
  var overlayImages$ = dart.privateName(overlay_image_layer, "OverlayImageLayerOptions.overlayImages");
  overlay_image_layer.OverlayImageLayerOptions = class OverlayImageLayerOptions extends layer.LayerOptions {
    get overlayImages() {
      return this[overlayImages$];
    }
    set overlayImages(value) {
      super.overlayImages = value;
    }
  };
  (overlay_image_layer.OverlayImageLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let overlayImages = opts && 'overlayImages' in opts ? opts.overlayImages : C[210] || CT.C210;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[overlayImages$] = overlayImages;
    overlay_image_layer.OverlayImageLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayerOptions.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayerOptions);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayerOptions);
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayerOptions, I[8]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayerOptions, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayerOptions.__proto__),
    overlayImages: dart.finalFieldType(core.List$(overlay_image_layer.OverlayImage))
  }));
  var bounds$ = dart.privateName(overlay_image_layer, "OverlayImage.bounds");
  var imageProvider$0 = dart.privateName(overlay_image_layer, "OverlayImage.imageProvider");
  var opacity$0 = dart.privateName(overlay_image_layer, "OverlayImage.opacity");
  var gaplessPlayback$ = dart.privateName(overlay_image_layer, "OverlayImage.gaplessPlayback");
  overlay_image_layer.OverlayImage = class OverlayImage extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get imageProvider() {
      return this[imageProvider$0];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get opacity() {
      return this[opacity$0];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get gaplessPlayback() {
      return this[gaplessPlayback$];
    }
    set gaplessPlayback(value) {
      super.gaplessPlayback = value;
    }
  };
  (overlay_image_layer.OverlayImage.new = function(opts) {
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let imageProvider = opts && 'imageProvider' in opts ? opts.imageProvider : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    let gaplessPlayback = opts && 'gaplessPlayback' in opts ? opts.gaplessPlayback : false;
    this[bounds$] = bounds;
    this[imageProvider$0] = imageProvider;
    this[opacity$0] = opacity;
    this[gaplessPlayback$] = gaplessPlayback;
    ;
  }).prototype = overlay_image_layer.OverlayImage.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImage);
  dart.addTypeCaches(overlay_image_layer.OverlayImage);
  dart.setLibraryUri(overlay_image_layer.OverlayImage, I[8]);
  dart.setFieldSignature(overlay_image_layer.OverlayImage, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImage.__proto__),
    bounds: dart.finalFieldType(latlng_bounds.LatLngBounds),
    imageProvider: dart.finalFieldType(image_provider.ImageProvider$(core.Object)),
    opacity: dart.finalFieldType(core.double),
    gaplessPlayback: dart.finalFieldType(core.bool)
  }));
  var options$5 = dart.privateName(overlay_image_layer, "OverlayImageLayerWidget.options");
  overlay_image_layer.OverlayImageLayerWidget = class OverlayImageLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$5];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new overlay_image_layer.OverlayImageLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[211] || CT.C211});
    }
  };
  (overlay_image_layer.OverlayImageLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$5] = options;
    overlay_image_layer.OverlayImageLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayerWidget.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayerWidget);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayerWidget);
  dart.setMethodSignature(overlay_image_layer.OverlayImageLayerWidget, () => ({
    __proto__: dart.getMethods(overlay_image_layer.OverlayImageLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayerWidget, I[8]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayerWidget, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayerWidget.__proto__),
    options: dart.finalFieldType(overlay_image_layer.OverlayImageLayerOptions)
  }));
  var overlayImageOpts$ = dart.privateName(overlay_image_layer, "OverlayImageLayer.overlayImageOpts");
  var map$3 = dart.privateName(overlay_image_layer, "OverlayImageLayer.map");
  var stream$4 = dart.privateName(overlay_image_layer, "OverlayImageLayer.stream");
  var _positionedForOverlay = dart.privateName(overlay_image_layer, "_positionedForOverlay");
  overlay_image_layer.OverlayImageLayer = class OverlayImageLayer extends framework.StatelessWidget {
    get overlayImageOpts() {
      return this[overlayImageOpts$];
    }
    set overlayImageOpts(value) {
      super.overlayImageOpts = value;
    }
    get map() {
      return this[map$3];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$4];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => new basic.ClipRect.new({child: new basic.Stack.new({children: (() => {
              let t17 = T$.JSArrayOfWidget().of([]);
              for (let overlayImage of this.overlayImageOpts.overlayImages)
                t17[$add](this[_positionedForOverlay](overlayImage));
              return t17;
            })(), $creationLocationd_0dea112b090073317d4: C[216] || CT.C216}), $creationLocationd_0dea112b090073317d4: C[219] || CT.C219}), T$.BuildContextAndAsyncSnapshotOfvoidToClipRect()), $creationLocationd_0dea112b090073317d4: C[222] || CT.C222});
    }
    [_positionedForOverlay](overlayImage) {
      let zoomScale = this.map.getZoomScale(this.map.zoom, this.map.zoom);
      let pixelOrigin = this.map.getPixelOrigin();
      let upperLeftPixel = this.map.project(overlayImage.bounds.northWest).multiplyBy(zoomScale)['-'](pixelOrigin);
      let bottomRightPixel = this.map.project(overlayImage.bounds.southEast).multiplyBy(zoomScale)['-'](pixelOrigin);
      return new basic.Positioned.new({left: upperLeftPixel.x[$toDouble](), top: upperLeftPixel.y[$toDouble](), width: (bottomRightPixel.x - upperLeftPixel.x)[$toDouble](), height: (bottomRightPixel.y - upperLeftPixel.y)[$toDouble](), child: new image.Image.new({image: overlayImage.imageProvider, fit: box_fit.BoxFit.fill, color: new ui.Color.fromRGBO(255, 255, 255, overlayImage.opacity), colorBlendMode: ui.BlendMode.modulate, gaplessPlayback: overlayImage.gaplessPlayback, $creationLocationd_0dea112b090073317d4: C[226] || CT.C226}), $creationLocationd_0dea112b090073317d4: C[233] || CT.C233});
    }
  };
  (overlay_image_layer.OverlayImageLayer.new = function(overlayImageOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[overlayImageOpts$] = overlayImageOpts;
    this[map$3] = map;
    this[stream$4] = stream;
    overlay_image_layer.OverlayImageLayer.__proto__.new.call(this, {key: overlayImageOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayer.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayer);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayer);
  dart.setMethodSignature(overlay_image_layer.OverlayImageLayer, () => ({
    __proto__: dart.getMethods(overlay_image_layer.OverlayImageLayer.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_positionedForOverlay]: dart.fnType(basic.Positioned, [overlay_image_layer.OverlayImage])
  }));
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayer, I[8]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayer, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayer.__proto__),
    overlayImageOpts: dart.finalFieldType(overlay_image_layer.OverlayImageLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(dart.nullable(async.Stream$(core.Null)))
  }));
  var group$ = dart.privateName(group_layer, "GroupLayerOptions.group");
  group_layer.GroupLayerOptions = class GroupLayerOptions extends layer.LayerOptions {
    get group() {
      return this[group$];
    }
    set group(value) {
      this[group$] = value;
    }
  };
  (group_layer.GroupLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let group = opts && 'group' in opts ? opts.group : C[240] || CT.C240;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[group$] = T$.JSArrayOfLayerOptions().of([]);
    this[group$] = group;
    group_layer.GroupLayerOptions.__proto__.new.call(this, {key: key, rebuild: rebuild});
    ;
  }).prototype = group_layer.GroupLayerOptions.prototype;
  dart.addTypeTests(group_layer.GroupLayerOptions);
  dart.addTypeCaches(group_layer.GroupLayerOptions);
  dart.setLibraryUri(group_layer.GroupLayerOptions, I[9]);
  dart.setFieldSignature(group_layer.GroupLayerOptions, () => ({
    __proto__: dart.getFields(group_layer.GroupLayerOptions.__proto__),
    group: dart.fieldType(core.List$(layer.LayerOptions))
  }));
  var options$6 = dart.privateName(group_layer, "GroupLayerWidget.options");
  group_layer.GroupLayerWidget = class GroupLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$6];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = dart.nullCheck(map.MapState.maybeOf(context));
      return new group_layer.GroupLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[241] || CT.C241});
    }
  };
  (group_layer.GroupLayerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$6] = options;
    group_layer.GroupLayerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = group_layer.GroupLayerWidget.prototype;
  dart.addTypeTests(group_layer.GroupLayerWidget);
  dart.addTypeCaches(group_layer.GroupLayerWidget);
  dart.setMethodSignature(group_layer.GroupLayerWidget, () => ({
    __proto__: dart.getMethods(group_layer.GroupLayerWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(group_layer.GroupLayerWidget, I[9]);
  dart.setFieldSignature(group_layer.GroupLayerWidget, () => ({
    __proto__: dart.getFields(group_layer.GroupLayerWidget.__proto__),
    options: dart.finalFieldType(group_layer.GroupLayerOptions)
  }));
  var groupOpts$ = dart.privateName(group_layer, "GroupLayer.groupOpts");
  var map$4 = dart.privateName(group_layer, "GroupLayer.map");
  var stream$5 = dart.privateName(group_layer, "GroupLayer.stream");
  var _createLayer = dart.privateName(group_layer, "_createLayer");
  group_layer.GroupLayer = class GroupLayer extends framework.StatelessWidget {
    get groupOpts() {
      return this[groupOpts$];
    }
    set groupOpts(value) {
      super.groupOpts = value;
    }
    get map() {
      return this[map$4];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$5];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new (T$.StreamBuilderOfNull()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let layers = (() => {
            let t18 = T$.JSArrayOfWidget().of([]);
            for (let options of this.groupOpts.group)
              t18[$add](this[_createLayer](options));
            return t18;
          })();
          return new container.Container.new({child: new basic.Stack.new({children: layers, $creationLocationd_0dea112b090073317d4: C[246] || CT.C246}), $creationLocationd_0dea112b090073317d4: C[249] || CT.C249});
        }, T$.BuildContextAndAsyncSnapshotOfObjectNToContainer()), $creationLocationd_0dea112b090073317d4: C[252] || CT.C252});
    }
    [_createLayer](options) {
      if (marker_layer.MarkerLayerOptions.is(options)) {
        return new marker_layer.MarkerLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[256] || CT.C256});
      }
      if (circle_layer.CircleLayerOptions.is(options)) {
        return new circle_layer.CircleLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[261] || CT.C261});
      }
      if (polyline_layer.PolylineLayerOptions.is(options)) {
        return new polyline_layer.PolylineLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[266] || CT.C266});
      }
      if (polygon_layer.PolygonLayerOptions.is(options)) {
        return new polygon_layer.PolygonLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[271] || CT.C271});
      }
      if (overlay_image_layer.OverlayImageLayerOptions.is(options)) {
        return new overlay_image_layer.OverlayImageLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[276] || CT.C276});
      }
      dart.throw(core.Exception.new("Unknown options type for GeometryLayer: " + dart.str(options)));
    }
  };
  (group_layer.GroupLayer.new = function(groupOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[groupOpts$] = groupOpts;
    this[map$4] = map;
    this[stream$5] = stream;
    group_layer.GroupLayer.__proto__.new.call(this, {key: groupOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = group_layer.GroupLayer.prototype;
  dart.addTypeTests(group_layer.GroupLayer);
  dart.addTypeCaches(group_layer.GroupLayer);
  dart.setMethodSignature(group_layer.GroupLayer, () => ({
    __proto__: dart.getMethods(group_layer.GroupLayer.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_createLayer]: dart.fnType(framework.Widget, [layer.LayerOptions])
  }));
  dart.setLibraryUri(group_layer.GroupLayer, I[9]);
  dart.setFieldSignature(group_layer.GroupLayer, () => ({
    __proto__: dart.getFields(group_layer.GroupLayer.__proto__),
    groupOpts: dart.finalFieldType(group_layer.GroupLayerOptions),
    map: dart.finalFieldType(map.MapState),
    stream: dart.finalFieldType(async.Stream$(core.Null))
  }));
  var mapState$0 = dart.privateName(map_state_widget, "MapStateInheritedWidget.mapState");
  map_state_widget.MapStateInheritedWidget = class MapStateInheritedWidget extends framework.InheritedWidget {
    get mapState() {
      return this[mapState$0];
    }
    set mapState(value) {
      super.mapState = value;
    }
    updateShouldNotify(oldWidget) {
      map_state_widget.MapStateInheritedWidget.as(oldWidget);
      return true;
    }
    static maybeOf(context) {
      return context.dependOnInheritedWidgetOfExactType(map_state_widget.MapStateInheritedWidget);
    }
  };
  (map_state_widget.MapStateInheritedWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let mapState = opts && 'mapState' in opts ? opts.mapState : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[mapState$0] = mapState;
    map_state_widget.MapStateInheritedWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = map_state_widget.MapStateInheritedWidget.prototype;
  dart.addTypeTests(map_state_widget.MapStateInheritedWidget);
  dart.addTypeCaches(map_state_widget.MapStateInheritedWidget);
  dart.setMethodSignature(map_state_widget.MapStateInheritedWidget, () => ({
    __proto__: dart.getMethods(map_state_widget.MapStateInheritedWidget.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(map_state_widget.MapStateInheritedWidget, I[10]);
  dart.setFieldSignature(map_state_widget.MapStateInheritedWidget, () => ({
    __proto__: dart.getFields(map_state_widget.MapStateInheritedWidget.__proto__),
    mapState: dart.finalFieldType(map.MapState)
  }));
  var _readyCompleter = dart.privateName(map, "_readyCompleter");
  var _mapEventSink$ = dart.privateName(map, "_mapEventSink");
  var __MapControllerImpl__state = dart.privateName(map, "_#MapControllerImpl#_state");
  var _state = dart.privateName(map, "_state");
  var FitBoundsOptions_zoom = dart.privateName(flutter_map, "FitBoundsOptions.zoom");
  var FitBoundsOptions_maxZoom = dart.privateName(flutter_map, "FitBoundsOptions.maxZoom");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var FitBoundsOptions_padding = dart.privateName(flutter_map, "FitBoundsOptions.padding");
  map.MapControllerImpl = class MapControllerImpl extends core.Object {
    get mapEventSink() {
      return this[_mapEventSink$].sink;
    }
    get [_state]() {
      let t19;
      t19 = this[__MapControllerImpl__state];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_state")) : t19;
    }
    set [_state](t19) {
      if (this[__MapControllerImpl__state] == null)
        this[__MapControllerImpl__state] = t19;
      else
        dart.throw(new _internal.LateError.fieldAI("_state"));
    }
    get onReady() {
      return this[_readyCompleter].future;
    }
    dispose() {
      this[_mapEventSink$].close();
    }
    set state(state) {
      this[_state] = state;
      if (!this[_readyCompleter].isCompleted) {
        this[_readyCompleter].complete();
      }
    }
    moveAndRotate(center, zoom, degree, opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      return this[_state].moveAndRotate(center, zoom, degree, {source: map_events.MapEventSource.mapController, id: dart.nullCheck(id)});
    }
    move(center, zoom, opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      return this[_state].move(center, zoom, {id: id, source: map_events.MapEventSource.mapController});
    }
    fitBounds(bounds, opts) {
      let options = opts && 'options' in opts ? opts.options : C[281] || CT.C281;
      this[_state].fitBounds(bounds, dart.nullCheck(options));
    }
    get center() {
      return this[_state].center;
    }
    get bounds() {
      return this[_state].bounds;
    }
    get zoom() {
      return this[_state].zoom;
    }
    get rotation() {
      return this[_state].rotation;
    }
    rotate(degree, opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      return this[_state].rotate(degree, {id: id, source: map_events.MapEventSource.mapController});
    }
    get mapEventStream() {
      return this[_mapEventSink$].stream;
    }
  };
  (map.MapControllerImpl.new = function() {
    this[_readyCompleter] = T$.CompleterOfNull().new();
    this[_mapEventSink$] = T$.StreamControllerOfMapEvent().broadcast();
    this[__MapControllerImpl__state] = null;
    ;
  }).prototype = map.MapControllerImpl.prototype;
  dart.addTypeTests(map.MapControllerImpl);
  dart.addTypeCaches(map.MapControllerImpl);
  map.MapControllerImpl[dart.implements] = () => [flutter_map.MapController];
  dart.setMethodSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getMethods(map.MapControllerImpl.__proto__),
    dispose: dart.fnType(dart.void, []),
    moveAndRotate: dart.fnType(flutter_map.MoveAndRotateResult, [latlong.LatLng, core.double, core.double], {id: dart.nullable(core.String)}, {}),
    move: dart.fnType(core.bool, [latlong.LatLng, core.double], {id: dart.nullable(core.String)}, {}),
    fitBounds: dart.fnType(dart.void, [latlng_bounds.LatLngBounds], {options: dart.nullable(flutter_map.FitBoundsOptions)}, {}),
    rotate: dart.fnType(core.bool, [core.double], {id: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getGetters(map.MapControllerImpl.__proto__),
    mapEventSink: async.StreamSink$(map_events.MapEvent),
    [_state]: map.MapState,
    onReady: async.Future$(core.Null),
    center: latlong.LatLng,
    bounds: dart.nullable(latlng_bounds.LatLngBounds),
    zoom: core.double,
    rotation: core.double,
    mapEventStream: async.Stream$(map_events.MapEvent)
  }));
  dart.setSetterSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getSetters(map.MapControllerImpl.__proto__),
    [_state]: map.MapState,
    state: map.MapState
  }));
  dart.setLibraryUri(map.MapControllerImpl, I[11]);
  dart.setFieldSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getFields(map.MapControllerImpl.__proto__),
    [_readyCompleter]: dart.finalFieldType(async.Completer$(core.Null)),
    [_mapEventSink$]: dart.finalFieldType(async.StreamController$(map_events.MapEvent)),
    [__MapControllerImpl__state]: dart.fieldType(dart.nullable(map.MapState))
  }));
  var options$7 = dart.privateName(map, "MapState.options");
  var onRotationChanged$ = dart.privateName(map, "MapState.onRotationChanged");
  var _lastCenter = dart.privateName(map, "_lastCenter");
  var _lastBounds = dart.privateName(map, "_lastBounds");
  var _lastPixelBounds = dart.privateName(map, "_lastPixelBounds");
  var __MapState__pixelOrigin = dart.privateName(map, "_#MapState#_pixelOrigin");
  var _initialized = dart.privateName(map, "_initialized");
  var _originalSize = dart.privateName(map, "_originalSize");
  var _size = dart.privateName(map, "_size");
  var _rotation = dart.privateName(map, "_rotation");
  var _rotationRad = dart.privateName(map, "_rotationRad");
  var _zoom = dart.privateName(map, "_zoom");
  var _onMoveSink = dart.privateName(map, "_onMoveSink");
  var _pixelOrigin = dart.privateName(map, "_pixelOrigin");
  var _updateSizeByOriginalSizeAndRotation = dart.privateName(map, "_updateSizeByOriginalSizeAndRotation");
  var _init = dart.privateName(map, "_init");
  var _handleMoveEmit = dart.privateName(map, "_handleMoveEmit");
  var _calculateBounds = dart.privateName(map, "_calculateBounds");
  var _centerLayerPoint = dart.privateName(map, "_centerLayerPoint");
  map.MapState = class MapState extends core.Object {
    get options() {
      return this[options$7];
    }
    set options(value) {
      this[options$7] = value;
    }
    get onRotationChanged() {
      return this[onRotationChanged$];
    }
    set onRotationChanged(value) {
      super.onRotationChanged = value;
    }
    get zoom() {
      return this[_zoom];
    }
    get rotation() {
      return this[_rotation];
    }
    set rotation(rotation) {
      this[_rotation] = rotation;
      this[_rotationRad] = latlong.degToRadian(rotation);
    }
    get rotationRad() {
      return this[_rotationRad];
    }
    get [_pixelOrigin]() {
      let t20;
      t20 = this[__MapState__pixelOrigin];
      return t20 == null ? dart.throw(new _internal.LateError.fieldNI("_pixelOrigin")) : t20;
    }
    set [_pixelOrigin](t20) {
      this[__MapState__pixelOrigin] = t20;
    }
    get onMoved() {
      return this[_onMoveSink].stream;
    }
    get originalSize() {
      return this[_originalSize];
    }
    setOriginalSize(width, height) {
      let isCurrSizeNull = this[_originalSize] == null;
      if (isCurrSizeNull || dart.nullCheck(this[_originalSize]).x !== width || dart.nullCheck(this[_originalSize]).y !== height) {
        this[_originalSize] = new (T$.CustomPointOfdouble()).new(width, height);
        this[_updateSizeByOriginalSizeAndRotation]();
        if (!isCurrSizeNull) {
          this[_onMoveSink].add(null);
        }
      }
    }
    get size() {
      let t21;
      t21 = this[_size];
      return t21 == null ? new (T$.CustomPointOfnum()).new(0.0, 0.0) : t21;
    }
    [_updateSizeByOriginalSizeAndRotation]() {
      let originalWidth = dart.nullCheck(this[_originalSize]).x;
      let originalHeight = dart.nullCheck(this[_originalSize]).y;
      if (this[_rotation] !== 0.0) {
        let cosAngle = math.cos(this[_rotationRad])[$abs]();
        let sinAngle = math.sin(this[_rotationRad])[$abs]();
        let width = originalWidth * cosAngle + originalHeight * sinAngle;
        let height = originalHeight * cosAngle + originalWidth * sinAngle;
        this[_size] = new (T$.CustomPointOfdouble()).new(width, height);
      } else {
        this[_size] = new (T$.CustomPointOfdouble()).new(originalWidth, originalHeight);
      }
      if (!this[_initialized]) {
        this[_init]();
        this[_initialized] = true;
      }
      this[_pixelOrigin] = this.getNewPixelOrigin(dart.nullCheck(this[_lastCenter]));
    }
    get center() {
      return this.getCenter();
    }
    get bounds() {
      return this.getBounds();
    }
    get pixelBounds() {
      return this.getLastPixelBounds();
    }
    [_init]() {
      if (this.options.bounds != null) {
        this.fitBounds(dart.nullCheck(this.options.bounds), this.options.boundsOptions);
      } else {
        this.move(this.options.center, this.zoom, {source: map_events.MapEventSource.initialization});
      }
    }
    [_handleMoveEmit](targetCenter, targetZoom, hasGesture, source, id) {
      if (source === map_events.MapEventSource.flingAnimationController) {
        this.emitMapEvent(new map_events.MapEventFlingAnimation.new({center: dart.nullCheck(this[_lastCenter]), zoom: this[_zoom], targetCenter: targetCenter, targetZoom: targetZoom, source: source}));
      } else if (source === map_events.MapEventSource.doubleTapZoomAnimationController) {
        this.emitMapEvent(new map_events.MapEventDoubleTapZoom.new({center: dart.nullCheck(this[_lastCenter]), zoom: this[_zoom], targetCenter: targetCenter, targetZoom: targetZoom, source: source}));
      } else if (source === map_events.MapEventSource.onDrag || source === map_events.MapEventSource.onMultiFinger) {
        this.emitMapEvent(new map_events.MapEventMove.new({center: dart.nullCheck(this[_lastCenter]), zoom: this[_zoom], targetCenter: targetCenter, targetZoom: targetZoom, source: source}));
      } else if (source === map_events.MapEventSource.mapController) {
        this.emitMapEvent(new map_events.MapEventMove.new({id: id, center: dart.nullCheck(this[_lastCenter]), zoom: this[_zoom], targetCenter: targetCenter, targetZoom: targetZoom, source: source}));
      }
    }
    emitMapEvent(event) {
      this[_mapEventSink$].add(event);
    }
    dispose() {
      this[_onMoveSink].close();
      this[_mapEventSink$].close();
    }
    rebuildLayers() {
      this[_onMoveSink].add(null);
    }
    rotate(degree, opts) {
      let t21;
      let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
      let callOnMoveSink = opts && 'callOnMoveSink' in opts ? opts.callOnMoveSink : true;
      let source = opts && 'source' in opts ? opts.source : null;
      let id = opts && 'id' in opts ? opts.id : null;
      if (degree !== this[_rotation]) {
        let oldRotation = this[_rotation];
        this.rotation = degree;
        this[_updateSizeByOriginalSizeAndRotation]();
        t21 = this[_rotation];
        this.onRotationChanged(t21);
        this.emitMapEvent(new map_events.MapEventRotate.new({id: id, currentRotation: oldRotation, targetRotation: this[_rotation], center: dart.nullCheck(this[_lastCenter]), zoom: this[_zoom], source: source}));
        if (dart.dtest(callOnMoveSink)) {
          this[_onMoveSink].add(null);
        }
        return true;
      }
      return false;
    }
    moveAndRotate(center, zoom, degree, opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let moveSucc = this.move(center, zoom, {id: id, source: source, callOnMoveSink: false});
      let rotateSucc = this.rotate(degree, {id: id, source: source, callOnMoveSink: false});
      if (moveSucc || rotateSucc) {
        this[_onMoveSink].add(null);
      }
      return new flutter_map.MoveAndRotateResult.new(moveSucc, rotateSucc);
    }
    move(center, zoom, opts) {
      let t21;
      let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
      let callOnMoveSink = opts && 'callOnMoveSink' in opts ? opts.callOnMoveSink : true;
      let source = opts && 'source' in opts ? opts.source : null;
      let id = opts && 'id' in opts ? opts.id : null;
      zoom = this.fitZoomToBounds(zoom);
      let mapMoved = !center._equals(this[_lastCenter]) || zoom !== this[_zoom];
      if (this[_lastCenter] != null && (!mapMoved || !this.bounds.isValid)) {
        return false;
      }
      if (this.options.isOutOfBounds(center)) {
        if (!this.options.slideOnBoundaries) {
          return false;
        }
        center = this.options.containPoint(center, (t21 = this[_lastCenter], t21 == null ? center : t21));
      }
      this[_handleMoveEmit](center, zoom, hasGesture, source, id);
      this[_zoom] = zoom;
      this[_lastCenter] = center;
      this[_lastPixelBounds] = this.getPixelBounds(this[_zoom]);
      this[_lastBounds] = this[_calculateBounds]();
      this[_pixelOrigin] = this.getNewPixelOrigin(center);
      if (dart.dtest(callOnMoveSink)) {
        this[_onMoveSink].add(null);
      }
      if (this.options.onPositionChanged != null) {
        let mapPosition = new flutter_map.MapPosition.new({center: center, bounds: this.bounds, zoom: zoom, hasGesture: core.bool.as(hasGesture)});
        dart.nullCheck(this.options.onPositionChanged)(mapPosition, core.bool.as(hasGesture));
      }
      return true;
    }
    fitZoomToBounds(zoom) {
      zoom == null ? zoom = this[_zoom] : null;
      if (this.options.maxZoom != null) {
        zoom = dart.notNull(zoom) > dart.nullCheck(this.options.maxZoom) ? dart.nullCheck(this.options.maxZoom) : zoom;
      }
      if (this.options.minZoom != null) {
        zoom = dart.notNull(zoom) < dart.nullCheck(this.options.minZoom) ? dart.nullCheck(this.options.minZoom) : zoom;
      }
      return zoom;
    }
    fitBounds(bounds, options) {
      if (!bounds.isValid) {
        dart.throw(core.Exception.new("Bounds are not valid."));
      }
      let target = this.getBoundsCenterZoom(bounds, options);
      this.move(target.center, target.zoom, {source: map_events.MapEventSource.fitBounds});
    }
    getCenter() {
      if (this[_lastCenter] != null) {
        return dart.nullCheck(this[_lastCenter]);
      }
      return this.layerPointToLatLng(this[_centerLayerPoint]);
    }
    getBounds() {
      if (this[_lastBounds] != null) {
        return dart.nullCheck(this[_lastBounds]);
      }
      return this[_calculateBounds]();
    }
    getLastPixelBounds() {
      if (this[_lastPixelBounds] != null) {
        return dart.nullCheck(this[_lastPixelBounds]);
      }
      return this.getPixelBounds(this.zoom);
    }
    [_calculateBounds]() {
      let bounds = this.getLastPixelBounds();
      return new latlng_bounds.LatLngBounds.new(this.unproject(bounds.bottomLeft), this.unproject(bounds.topRight));
    }
    getBoundsCenterZoom(bounds, options) {
      let paddingTL = new (T$.CustomPointOfdouble()).new(options.padding.left, options.padding.top);
      let paddingBR = new (T$.CustomPointOfdouble()).new(options.padding.right, options.padding.bottom);
      let paddingTotalXY = paddingTL['+'](paddingBR);
      let zoom = this.getBoundsZoom(bounds, paddingTotalXY, {inside: false});
      zoom = math.min(core.double, options.maxZoom, zoom);
      let paddingOffset = paddingBR['-'](paddingTL)['/'](2);
      let swPoint = this.project(dart.nullCheck(bounds.southWest), zoom);
      let nePoint = this.project(dart.nullCheck(bounds.northEast), zoom);
      let center = this.unproject(swPoint['+'](nePoint)['/'](2)['+'](paddingOffset), zoom);
      return new center_zoom.CenterZoom.new({center: center, zoom: zoom});
    }
    getBoundsZoom(bounds, padding, opts) {
      let t21, t21$;
      let inside = opts && 'inside' in opts ? opts.inside : false;
      let zoom = this.zoom;
      let min = (t21 = this.options.minZoom, t21 == null ? 0.0 : t21);
      let max = (t21$ = this.options.maxZoom, t21$ == null ? 1 / 0 : t21$);
      let nw = bounds.northWest;
      let se = bounds.southEast;
      let size = this.size['-'](padding);
      size = new (T$.CustomPointOfnum()).new(math.max(core.num, 0, size.x), math.max(core.num, 0, size.y));
      let boundsSize = T$.BoundsOfnum().new(this.project(se, zoom), this.project(nw, zoom)).size;
      let scaleX = size.x / boundsSize.x;
      let scaleY = size.y / boundsSize.y;
      let scale = inside ? math.max(core.double, scaleX, scaleY) : math.min(core.double, scaleX, scaleY);
      zoom = this.getScaleZoom(scale, zoom);
      return math.max(core.double, min, math.min(core.double, max, zoom));
    }
    project(latlng, zoom = null) {
      zoom == null ? zoom = this[_zoom] : null;
      return this.options.crs.latLngToPoint(latlng, zoom);
    }
    unproject(point, zoom = null) {
      zoom == null ? zoom = this[_zoom] : null;
      return dart.nullCheck(this.options.crs.pointToLatLng(point, zoom));
    }
    layerPointToLatLng(point) {
      return this.unproject(point);
    }
    get [_centerLayerPoint]() {
      return this.size['/'](2);
    }
    getZoomScale(toZoom, fromZoom) {
      let t21;
      let crs = this.options.crs;
      fromZoom = (t21 = fromZoom, t21 == null ? this[_zoom] : t21);
      return crs.scale(toZoom) / crs.scale(fromZoom);
    }
    getScaleZoom(scale, fromZoom) {
      let t21;
      let crs = this.options.crs;
      fromZoom = (t21 = fromZoom, t21 == null ? this[_zoom] : t21);
      return crs.zoom(scale * crs.scale(fromZoom));
    }
    getPixelWorldBounds(zoom) {
      let t21;
      return this.options.crs.getProjectedBounds((t21 = zoom, t21 == null ? this[_zoom] : t21));
    }
    getPixelOrigin() {
      return this[_pixelOrigin];
    }
    getNewPixelOrigin(center, zoom = null) {
      let viewHalf = this.size['/'](2.0);
      return this.project(center, zoom)['-'](viewHalf).round();
    }
    getPixelBounds(zoom) {
      let mapZoom = zoom;
      let scale = this.getZoomScale(mapZoom, zoom);
      let pixelCenter = this.project(this.center, zoom).floor();
      let halfSize = this.size['/'](scale * 2);
      return T$.BoundsOfnum().new(pixelCenter['-'](halfSize), pixelCenter['+'](halfSize));
    }
    static maybeOf(context, opts) {
      let t21;
      let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
      let widget = context.dependOnInheritedWidgetOfExactType(map_state_widget.MapStateInheritedWidget);
      if (nullOk || widget != null) {
        t21 = widget;
        return t21 == null ? null : t21.mapState;
      }
      dart.throw(assertions.FlutterError.new("MapState.of() called with a context that does not contain a FlutterMap."));
    }
  };
  (map.MapState.new = function(options, onRotationChanged, _mapEventSink) {
    this[_lastCenter] = null;
    this[_lastBounds] = null;
    this[_lastPixelBounds] = null;
    this[__MapState__pixelOrigin] = null;
    this[_initialized] = false;
    this[_originalSize] = null;
    this[_size] = null;
    this[options$7] = options;
    this[onRotationChanged$] = onRotationChanged;
    this[_mapEventSink$] = _mapEventSink;
    this[_rotation] = options.rotation;
    this[_rotationRad] = latlong.degToRadian(options.rotation);
    this[_zoom] = options.zoom;
    this[_onMoveSink] = T$.StreamControllerOfNull().broadcast();
    ;
  }).prototype = map.MapState.prototype;
  dart.addTypeTests(map.MapState);
  dart.addTypeCaches(map.MapState);
  dart.setMethodSignature(map.MapState, () => ({
    __proto__: dart.getMethods(map.MapState.__proto__),
    setOriginalSize: dart.fnType(dart.void, [core.double, core.double]),
    [_updateSizeByOriginalSizeAndRotation]: dart.fnType(dart.void, []),
    [_init]: dart.fnType(dart.void, []),
    [_handleMoveEmit]: dart.fnType(dart.void, [latlong.LatLng, core.double, dart.dynamic, map_events.MapEventSource, dart.nullable(core.String)]),
    emitMapEvent: dart.fnType(dart.void, [map_events.MapEvent]),
    dispose: dart.fnType(dart.void, []),
    rebuildLayers: dart.fnType(dart.void, []),
    rotate: dart.fnType(core.bool, [core.double], {callOnMoveSink: dart.dynamic, hasGesture: dart.dynamic, id: dart.nullable(core.String)}, {source: map_events.MapEventSource}),
    moveAndRotate: dart.fnType(flutter_map.MoveAndRotateResult, [latlong.LatLng, core.double, core.double], {}, {id: core.String, source: map_events.MapEventSource}),
    move: dart.fnType(core.bool, [latlong.LatLng, core.double], {callOnMoveSink: dart.dynamic, hasGesture: dart.dynamic, id: dart.nullable(core.String)}, {source: map_events.MapEventSource}),
    fitZoomToBounds: dart.fnType(core.double, [dart.nullable(core.double)]),
    fitBounds: dart.fnType(dart.void, [latlng_bounds.LatLngBounds, flutter_map.FitBoundsOptions]),
    getCenter: dart.fnType(latlong.LatLng, []),
    getBounds: dart.fnType(latlng_bounds.LatLngBounds, []),
    getLastPixelBounds: dart.fnType(bounds.Bounds$(core.num), []),
    [_calculateBounds]: dart.fnType(latlng_bounds.LatLngBounds, []),
    getBoundsCenterZoom: dart.fnType(center_zoom.CenterZoom, [latlng_bounds.LatLngBounds, flutter_map.FitBoundsOptions]),
    getBoundsZoom: dart.fnType(core.double, [latlng_bounds.LatLngBounds, point.CustomPoint$(core.double)], {inside: core.bool}, {}),
    project: dart.fnType(point.CustomPoint$(core.num), [latlong.LatLng], [dart.nullable(core.double)]),
    unproject: dart.fnType(latlong.LatLng, [point.CustomPoint$(core.num)], [dart.nullable(core.double)]),
    layerPointToLatLng: dart.fnType(latlong.LatLng, [point.CustomPoint$(core.num)]),
    getZoomScale: dart.fnType(core.double, [core.double, dart.nullable(core.double)]),
    getScaleZoom: dart.fnType(core.double, [core.double, dart.nullable(core.double)]),
    getPixelWorldBounds: dart.fnType(dart.nullable(bounds.Bounds$(core.num)), [dart.nullable(core.double)]),
    getPixelOrigin: dart.fnType(point.CustomPoint$(core.num), []),
    getNewPixelOrigin: dart.fnType(point.CustomPoint$(core.num), [latlong.LatLng], [dart.nullable(core.double)]),
    getPixelBounds: dart.fnType(bounds.Bounds$(core.num), [core.double])
  }));
  dart.setGetterSignature(map.MapState, () => ({
    __proto__: dart.getGetters(map.MapState.__proto__),
    zoom: core.double,
    rotation: core.double,
    rotationRad: core.double,
    [_pixelOrigin]: point.CustomPoint$(core.num),
    onMoved: async.Stream$(core.Null),
    originalSize: dart.nullable(point.CustomPoint$(core.num)),
    size: point.CustomPoint$(core.num),
    center: latlong.LatLng,
    bounds: latlng_bounds.LatLngBounds,
    pixelBounds: bounds.Bounds$(core.num),
    [_centerLayerPoint]: point.CustomPoint$(core.num)
  }));
  dart.setSetterSignature(map.MapState, () => ({
    __proto__: dart.getSetters(map.MapState.__proto__),
    rotation: core.double,
    [_pixelOrigin]: point.CustomPoint$(core.num)
  }));
  dart.setLibraryUri(map.MapState, I[11]);
  dart.setFieldSignature(map.MapState, () => ({
    __proto__: dart.getFields(map.MapState.__proto__),
    options: dart.fieldType(flutter_map.MapOptions),
    onRotationChanged: dart.finalFieldType(dart.fnType(dart.void, [core.double])),
    [_onMoveSink]: dart.finalFieldType(async.StreamController$(core.Null)),
    [_mapEventSink$]: dart.finalFieldType(async.StreamSink$(map_events.MapEvent)),
    [_zoom]: dart.fieldType(core.double),
    [_rotation]: dart.fieldType(core.double),
    [_rotationRad]: dart.fieldType(core.double),
    [_lastCenter]: dart.fieldType(dart.nullable(latlong.LatLng)),
    [_lastBounds]: dart.fieldType(dart.nullable(latlng_bounds.LatLngBounds)),
    [_lastPixelBounds]: dart.fieldType(dart.nullable(bounds.Bounds$(core.num))),
    [__MapState__pixelOrigin]: dart.fieldType(dart.nullable(point.CustomPoint$(core.num))),
    [_initialized]: dart.fieldType(core.bool),
    [_originalSize]: dart.fieldType(dart.nullable(point.CustomPoint$(core.num))),
    [_size]: dart.fieldType(dart.nullable(point.CustomPoint$(core.num)))
  }));
  var _dragMode = dart.privateName(gestures, "_dragMode");
  var _gestureWinner = dart.privateName(gestures, "_gestureWinner");
  var _pointerCounter = dart.privateName(gestures, "_pointerCounter");
  var _rotationStarted = dart.privateName(gestures, "_rotationStarted");
  var _pinchZoomStarted = dart.privateName(gestures, "_pinchZoomStarted");
  var _pinchMoveStarted = dart.privateName(gestures, "_pinchMoveStarted");
  var _dragStarted = dart.privateName(gestures, "_dragStarted");
  var _flingAnimationStarted = dart.privateName(gestures, "_flingAnimationStarted");
  var __MapGestureMixin__scaleCorrector = dart.privateName(gestures, "_#MapGestureMixin#_scaleCorrector");
  var __MapGestureMixin__lastRotation = dart.privateName(gestures, "_#MapGestureMixin#_lastRotation");
  var __MapGestureMixin__lastScale = dart.privateName(gestures, "_#MapGestureMixin#_lastScale");
  var __MapGestureMixin__lastFocalLocal = dart.privateName(gestures, "_#MapGestureMixin#_lastFocalLocal");
  var __MapGestureMixin__mapCenterStart = dart.privateName(gestures, "_#MapGestureMixin#_mapCenterStart");
  var __MapGestureMixin__mapZoomStart = dart.privateName(gestures, "_#MapGestureMixin#_mapZoomStart");
  var __MapGestureMixin__focalStartLocal = dart.privateName(gestures, "_#MapGestureMixin#_focalStartLocal");
  var __MapGestureMixin__flingController = dart.privateName(gestures, "_#MapGestureMixin#_flingController");
  var __MapGestureMixin__flingAnimation = dart.privateName(gestures, "_#MapGestureMixin#_flingAnimation");
  var __MapGestureMixin__doubleTapController = dart.privateName(gestures, "_#MapGestureMixin#_doubleTapController");
  var __MapGestureMixin__doubleTapZoomAnimation = dart.privateName(gestures, "_#MapGestureMixin#_doubleTapZoomAnimation");
  var __MapGestureMixin__doubleTapCenterAnimation = dart.privateName(gestures, "_#MapGestureMixin#_doubleTapCenterAnimation");
  var _tapUpCounter = dart.privateName(gestures, "_tapUpCounter");
  var _doubleTapHoldMaxDelay = dart.privateName(gestures, "_doubleTapHoldMaxDelay");
  var _scaleCorrector = dart.privateName(gestures, "_scaleCorrector");
  var _lastRotation = dart.privateName(gestures, "_lastRotation");
  var _lastScale = dart.privateName(gestures, "_lastScale");
  var _lastFocalLocal = dart.privateName(gestures, "_lastFocalLocal");
  var _mapCenterStart = dart.privateName(gestures, "_mapCenterStart");
  var _mapZoomStart = dart.privateName(gestures, "_mapZoomStart");
  var _focalStartLocal = dart.privateName(gestures, "_focalStartLocal");
  var _flingController = dart.privateName(gestures, "_flingController");
  var _flingAnimation = dart.privateName(gestures, "_flingAnimation");
  var _doubleTapController = dart.privateName(gestures, "_doubleTapController");
  var _doubleTapZoomAnimation = dart.privateName(gestures, "_doubleTapZoomAnimation");
  var _doubleTapCenterAnimation = dart.privateName(gestures, "_doubleTapCenterAnimation");
  var _handleFlingAnimation = dart.privateName(gestures, "_handleFlingAnimation");
  var _flingAnimationStatusListener = dart.privateName(gestures, "_flingAnimationStatusListener");
  var _handleDoubleTapZoomAnimation = dart.privateName(gestures, "_handleDoubleTapZoomAnimation");
  var _doubleTapZoomStatusListener = dart.privateName(gestures, "_doubleTapZoomStatusListener");
  var _getMultiFingerGestureFlags = dart.privateName(gestures, "_getMultiFingerGestureFlags");
  var _yieldMultiFingerGestureWinner = dart.privateName(gestures, "_yieldMultiFingerGestureWinner");
  var _handleDoubleTapHold = dart.privateName(gestures, "_handleDoubleTapHold");
  var _rotateOffset = dart.privateName(gestures, "_rotateOffset");
  var _offsetToPoint = dart.privateName(gestures, "_offsetToPoint");
  var _getZoomForScale = dart.privateName(gestures, "_getZoomForScale");
  var _resetDoubleTapHold = dart.privateName(gestures, "_resetDoubleTapHold");
  var _offsetToCrs = dart.privateName(gestures, "_offsetToCrs");
  var _pointToOffset = dart.privateName(gestures, "_pointToOffset");
  var _getDoubleTapFocalDelta = dart.privateName(gestures, "_getDoubleTapFocalDelta");
  var _startDoubleTapAnimation = dart.privateName(gestures, "_startDoubleTapAnimation");
  var _projectDeltaOnBounds = dart.privateName(gestures, "_projectDeltaOnBounds");
  var layers$0 = dart.privateName(flutter_map, "FlutterMap.layers");
  var nonRotatedLayers$ = dart.privateName(flutter_map, "FlutterMap.nonRotatedLayers");
  var children$ = dart.privateName(flutter_map, "FlutterMap.children");
  var nonRotatedChildren$ = dart.privateName(flutter_map, "FlutterMap.nonRotatedChildren");
  var options$8 = dart.privateName(flutter_map, "FlutterMap.options");
  var _mapController = dart.privateName(flutter_map, "_mapController");
  flutter_map.FlutterMap = class FlutterMap extends framework.StatefulWidget {
    get layers() {
      return this[layers$0];
    }
    set layers(value) {
      super.layers = value;
    }
    get nonRotatedLayers() {
      return this[nonRotatedLayers$];
    }
    set nonRotatedLayers(value) {
      super.nonRotatedLayers = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get nonRotatedChildren() {
      return this[nonRotatedChildren$];
    }
    set nonRotatedChildren(value) {
      super.nonRotatedChildren = value;
    }
    get options() {
      return this[options$8];
    }
    set options(value) {
      super.options = value;
    }
    createState() {
      return new flutter_map_state.FlutterMapState.new(this[_mapController]);
    }
  };
  (flutter_map.FlutterMap.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let layers = opts && 'layers' in opts ? opts.layers : C[240] || CT.C240;
    let nonRotatedLayers = opts && 'nonRotatedLayers' in opts ? opts.nonRotatedLayers : C[240] || CT.C240;
    let children = opts && 'children' in opts ? opts.children : C[284] || CT.C284;
    let nonRotatedChildren = opts && 'nonRotatedChildren' in opts ? opts.nonRotatedChildren : C[284] || CT.C284;
    let mapController = opts && 'mapController' in opts ? opts.mapController : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$8] = options;
    this[layers$0] = layers;
    this[nonRotatedLayers$] = nonRotatedLayers;
    this[children$] = children;
    this[nonRotatedChildren$] = nonRotatedChildren;
    this[_mapController] = T$.MapControllerImplN().as(mapController);
    flutter_map.FlutterMap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = flutter_map.FlutterMap.prototype;
  dart.addTypeTests(flutter_map.FlutterMap);
  dart.addTypeCaches(flutter_map.FlutterMap);
  dart.setMethodSignature(flutter_map.FlutterMap, () => ({
    __proto__: dart.getMethods(flutter_map.FlutterMap.__proto__),
    createState: dart.fnType(flutter_map_state.FlutterMapState, [])
  }));
  dart.setLibraryUri(flutter_map.FlutterMap, I[12]);
  dart.setFieldSignature(flutter_map.FlutterMap, () => ({
    __proto__: dart.getFields(flutter_map.FlutterMap.__proto__),
    layers: dart.finalFieldType(core.List$(layer.LayerOptions)),
    nonRotatedLayers: dart.finalFieldType(core.List$(layer.LayerOptions)),
    children: dart.finalFieldType(core.List$(framework.Widget)),
    nonRotatedChildren: dart.finalFieldType(core.List$(framework.Widget)),
    options: dart.finalFieldType(flutter_map.MapOptions),
    [_mapController]: dart.finalFieldType(dart.nullable(map.MapControllerImpl))
  }));
  const State_TickerProviderStateMixin$36$ = class State_TickerProviderStateMixin extends framework.State$(flutter_map.FlutterMap) {};
  (State_TickerProviderStateMixin$36$.new = function() {
    ticker_provider.TickerProviderStateMixin$(flutter_map.FlutterMap)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$, ticker_provider.TickerProviderStateMixin$(flutter_map.FlutterMap));
  gestures.MapGestureMixin = class MapGestureMixin extends State_TickerProviderStateMixin$36$ {
    savePointer(event) {
      return this[_pointerCounter] = this[_pointerCounter] + 1;
    }
    removePointer(event) {
      return this[_pointerCounter] = this[_pointerCounter] - 1;
    }
    get [_scaleCorrector]() {
      let t21;
      t21 = this[__MapGestureMixin__scaleCorrector];
      return t21 == null ? dart.throw(new _internal.LateError.fieldNI("_scaleCorrector")) : t21;
    }
    set [_scaleCorrector](t21) {
      this[__MapGestureMixin__scaleCorrector] = t21;
    }
    get [_lastRotation]() {
      let t22;
      t22 = this[__MapGestureMixin__lastRotation];
      return t22 == null ? dart.throw(new _internal.LateError.fieldNI("_lastRotation")) : t22;
    }
    set [_lastRotation](t22) {
      this[__MapGestureMixin__lastRotation] = t22;
    }
    get [_lastScale]() {
      let t23;
      t23 = this[__MapGestureMixin__lastScale];
      return t23 == null ? dart.throw(new _internal.LateError.fieldNI("_lastScale")) : t23;
    }
    set [_lastScale](t23) {
      this[__MapGestureMixin__lastScale] = t23;
    }
    get [_lastFocalLocal]() {
      let t24;
      t24 = this[__MapGestureMixin__lastFocalLocal];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_lastFocalLocal")) : t24;
    }
    set [_lastFocalLocal](t24) {
      this[__MapGestureMixin__lastFocalLocal] = t24;
    }
    get [_mapCenterStart]() {
      let t25;
      t25 = this[__MapGestureMixin__mapCenterStart];
      return t25 == null ? dart.throw(new _internal.LateError.fieldNI("_mapCenterStart")) : t25;
    }
    set [_mapCenterStart](t25) {
      this[__MapGestureMixin__mapCenterStart] = t25;
    }
    get [_mapZoomStart]() {
      let t26;
      t26 = this[__MapGestureMixin__mapZoomStart];
      return t26 == null ? dart.throw(new _internal.LateError.fieldNI("_mapZoomStart")) : t26;
    }
    set [_mapZoomStart](t26) {
      this[__MapGestureMixin__mapZoomStart] = t26;
    }
    get [_focalStartLocal]() {
      let t27;
      t27 = this[__MapGestureMixin__focalStartLocal];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("_focalStartLocal")) : t27;
    }
    set [_focalStartLocal](t27) {
      this[__MapGestureMixin__focalStartLocal] = t27;
    }
    get [_flingController]() {
      let t28;
      t28 = this[__MapGestureMixin__flingController];
      return t28 == null ? dart.throw(new _internal.LateError.fieldNI("_flingController")) : t28;
    }
    set [_flingController](t28) {
      if (this[__MapGestureMixin__flingController] == null)
        this[__MapGestureMixin__flingController] = t28;
      else
        dart.throw(new _internal.LateError.fieldAI("_flingController"));
    }
    set [_flingAnimation](t29) {
      this[__MapGestureMixin__flingAnimation] = t29;
    }
    get [_flingAnimation]() {
      let t30;
      t30 = this[__MapGestureMixin__flingAnimation];
      return t30 == null ? dart.throw(new _internal.LateError.fieldNI("_flingAnimation")) : t30;
    }
    get [_doubleTapController]() {
      let t30;
      t30 = this[__MapGestureMixin__doubleTapController];
      return t30 == null ? dart.throw(new _internal.LateError.fieldNI("_doubleTapController")) : t30;
    }
    set [_doubleTapController](t30) {
      if (this[__MapGestureMixin__doubleTapController] == null)
        this[__MapGestureMixin__doubleTapController] = t30;
      else
        dart.throw(new _internal.LateError.fieldAI("_doubleTapController"));
    }
    get [_doubleTapZoomAnimation]() {
      let t31;
      t31 = this[__MapGestureMixin__doubleTapZoomAnimation];
      return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_doubleTapZoomAnimation")) : t31;
    }
    set [_doubleTapZoomAnimation](t31) {
      this[__MapGestureMixin__doubleTapZoomAnimation] = t31;
    }
    get [_doubleTapCenterAnimation]() {
      let t32;
      t32 = this[__MapGestureMixin__doubleTapCenterAnimation];
      return t32 == null ? dart.throw(new _internal.LateError.fieldNI("_doubleTapCenterAnimation")) : t32;
    }
    set [_doubleTapCenterAnimation](t32) {
      this[__MapGestureMixin__doubleTapCenterAnimation] = t32;
    }
    initState() {
      let t33, t33$;
      super.initState();
      this[_flingController] = (t33 = new animation_controller.AnimationController.new({vsync: this}), (() => {
        t33.addListener(dart.bind(this, _handleFlingAnimation));
        t33.addStatusListener(dart.bind(this, _flingAnimationStatusListener));
        return t33;
      })());
      this[_doubleTapController] = (t33$ = new animation_controller.AnimationController.new({vsync: this, duration: new core.Duration.new({milliseconds: 200})}), (() => {
        t33$.addListener(dart.bind(this, _handleDoubleTapZoomAnimation));
        t33$.addStatusListener(dart.bind(this, _doubleTapZoomStatusListener));
        return t33$;
      })());
    }
    didUpdateWidget(oldWidget) {
      flutter_map.FlutterMap.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      let oldFlags = oldWidget.options.interactiveFlags;
      let flags = this.options.interactiveFlags;
      let oldGestures = this[_getMultiFingerGestureFlags]({mapOptions: oldWidget.options});
      let gestures = this[_getMultiFingerGestureFlags]();
      if (flags !== oldFlags || gestures !== oldGestures) {
        let emitMapEventMoveEnd = false;
        if (!interactive_flag.InteractiveFlag.hasFlag(flags, 2)) {
          this.closeFlingAnimationController(map_events.MapEventSource.interactiveFlagsChanged);
        }
        if (!interactive_flag.InteractiveFlag.hasFlag(flags, 16)) {
          this.closeDoubleTapController(map_events.MapEventSource.interactiveFlagsChanged);
        }
        if (this[_rotationStarted] && !(interactive_flag.InteractiveFlag.hasFlag(flags, 32) && multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 4))) {
          this[_rotationStarted] = false;
          if (this[_gestureWinner] === 4) {
            this[_gestureWinner] = 0;
          }
          this.mapState.emitMapEvent(new map_events.MapEventRotateEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.interactiveFlagsChanged}));
        }
        if (this[_pinchZoomStarted] && !(interactive_flag.InteractiveFlag.hasFlag(flags, 8) && multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 2))) {
          this[_pinchZoomStarted] = false;
          emitMapEventMoveEnd = true;
          if (this[_gestureWinner] === 2) {
            this[_gestureWinner] = 0;
          }
        }
        if (this[_pinchMoveStarted] && !(interactive_flag.InteractiveFlag.hasFlag(flags, 4) && multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 1))) {
          this[_pinchMoveStarted] = false;
          emitMapEventMoveEnd = true;
          if (this[_gestureWinner] === 1) {
            this[_gestureWinner] = 0;
          }
        }
        if (this[_dragStarted] && !interactive_flag.InteractiveFlag.hasFlag(flags, 1)) {
          this[_dragStarted] = false;
          emitMapEventMoveEnd = true;
        }
        if (emitMapEventMoveEnd) {
          this.mapState.emitMapEvent(new map_events.MapEventRotateEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.interactiveFlagsChanged}));
        }
      }
    }
    [_yieldMultiFingerGestureWinner](gestureWinner, resetStartVariables) {
      this[_gestureWinner] = gestureWinner;
      if (resetStartVariables) {
        this[_scaleCorrector] = 1.0 - this[_lastScale];
      }
    }
    [_getMultiFingerGestureFlags](opts) {
      let gestureWinner = opts && 'gestureWinner' in opts ? opts.gestureWinner : null;
      let mapOptions = opts && 'mapOptions' in opts ? opts.mapOptions : null;
      gestureWinner == null ? gestureWinner = this[_gestureWinner] : null;
      mapOptions == null ? mapOptions = this.options : null;
      if (mapOptions.enableMultiFingerGestureRace) {
        if (gestureWinner === 2) {
          return mapOptions.pinchZoomWinGestures;
        } else if (gestureWinner === 4) {
          return mapOptions.rotationWinGestures;
        } else if (gestureWinner === 1) {
          return mapOptions.pinchMoveWinGestures;
        }
        return 0;
      } else {
        return 7;
      }
    }
    closeFlingAnimationController(source) {
      this[_flingAnimationStarted] = false;
      if (this[_flingController].isAnimating) {
        this[_flingController].stop();
        this.mapState.emitMapEvent(new map_events.MapEventFlingAnimationEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: source}));
      }
    }
    closeDoubleTapController(source) {
      if (this[_doubleTapController].isAnimating) {
        this[_doubleTapController].stop();
        this.mapState.emitMapEvent(new map_events.MapEventDoubleTapZoomEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: source}));
      }
    }
    handleScaleStart(details) {
      this[_dragMode] = this[_pointerCounter] === 1;
      let eventSource = this[_dragMode] ? map_events.MapEventSource.dragStart : map_events.MapEventSource.multiFingerGestureStart;
      this.closeFlingAnimationController(eventSource);
      this.closeDoubleTapController(eventSource);
      this[_gestureWinner] = 0;
      this[_mapZoomStart] = this.mapState.zoom;
      this[_mapCenterStart] = this.mapState.center;
      this[_focalStartLocal] = this[_lastFocalLocal] = details.localFocalPoint;
      this[_dragStarted] = false;
      this[_pinchZoomStarted] = false;
      this[_pinchMoveStarted] = false;
      this[_rotationStarted] = false;
      this[_lastRotation] = 0.0;
      this[_scaleCorrector] = 0.0;
      this[_lastScale] = 1.0;
    }
    handleScaleUpdate(details) {
      if (this[_tapUpCounter] === 1) {
        this[_handleDoubleTapHold](details);
        return;
      }
      let eventSource = this[_dragMode] ? map_events.MapEventSource.onDrag : map_events.MapEventSource.onMultiFinger;
      let flags = this.options.interactiveFlags;
      let focalOffset = details.localFocalPoint;
      let currentRotation = latlong.radianToDeg(details.rotation);
      if (this[_dragMode]) {
        if (interactive_flag.InteractiveFlag.hasFlag(flags, 1)) {
          if (!this[_dragStarted]) {
            this[_dragStarted] = true;
            this.mapState.emitMapEvent(new map_events.MapEventMoveStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
          }
          let oldCenterPt = this.mapState.project(this.mapState.center, this.mapState.zoom);
          let localDistanceOffset = this[_rotateOffset](this[_lastFocalLocal]['-'](focalOffset));
          let newCenterPt = oldCenterPt['+'](this[_offsetToPoint](localDistanceOffset));
          let newCenter = this.mapState.unproject(newCenterPt, this.mapState.zoom);
          this.mapState.move(newCenter, this.mapState.zoom, {hasGesture: true, source: eventSource});
        }
      } else {
        let hasIntPinchMove = interactive_flag.InteractiveFlag.hasFlag(flags, 4);
        let hasIntPinchZoom = interactive_flag.InteractiveFlag.hasFlag(flags, 8);
        let hasIntRotate = interactive_flag.InteractiveFlag.hasFlag(flags, 32);
        if (hasIntPinchMove || hasIntPinchZoom || hasIntRotate) {
          let hasGestureRace = this.options.enableMultiFingerGestureRace;
          if (hasGestureRace && this[_gestureWinner] === 0) {
            if (hasIntPinchZoom && (this[_getZoomForScale](this[_mapZoomStart], details.scale) - this[_mapZoomStart])[$abs]() >= this.options.pinchZoomThreshold) {
              if (this.options.debugMultiFingerGestureWinner) {
                core.print("Multi Finger Gesture winner: Pinch Zoom");
              }
              this[_yieldMultiFingerGestureWinner](2, true);
            } else if (hasIntRotate && currentRotation[$abs]() >= this.options.rotationThreshold) {
              if (this.options.debugMultiFingerGestureWinner) {
                core.print("Multi Finger Gesture winner: Rotate");
              }
              this[_yieldMultiFingerGestureWinner](4, true);
            } else if (hasIntPinchMove && this[_focalStartLocal]['-'](focalOffset).distance >= this.options.pinchMoveThreshold) {
              if (this.options.debugMultiFingerGestureWinner) {
                core.print("Multi Finger Gesture winner: Pinch Move");
              }
              this[_yieldMultiFingerGestureWinner](1, true);
            }
          }
          if (!hasGestureRace || this[_gestureWinner] !== 0) {
            let gestures = this[_getMultiFingerGestureFlags]();
            let hasGesturePinchMove = multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 1);
            let hasGesturePinchZoom = multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 2);
            let hasGestureRotate = multi_finger_gesture.MultiFingerGesture.hasFlag(gestures, 4);
            let hasMove = hasIntPinchMove && hasGesturePinchMove;
            let hasZoom = hasIntPinchZoom && hasGesturePinchZoom;
            let hasRotate = hasIntRotate && hasGestureRotate;
            let mapMoved = false;
            let mapRotated = false;
            if (hasMove || hasZoom) {
              let newZoom = null;
              if (hasZoom) {
                newZoom = this[_getZoomForScale](this[_mapZoomStart], details.scale + this[_scaleCorrector]);
                if (!this[_pinchZoomStarted]) {
                  if (newZoom !== this[_mapZoomStart]) {
                    this[_pinchZoomStarted] = true;
                    if (!this[_pinchMoveStarted]) {
                      this.mapState.emitMapEvent(new map_events.MapEventMoveStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
                    }
                  }
                }
              } else {
                newZoom = this.mapState.zoom;
              }
              let newCenter = null;
              if (hasMove) {
                if (!this[_pinchMoveStarted] && !this[_lastFocalLocal]._equals(focalOffset)) {
                  this[_pinchMoveStarted] = true;
                  if (!this[_pinchZoomStarted]) {
                    this.mapState.emitMapEvent(new map_events.MapEventMoveStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
                  }
                }
                if (this[_pinchMoveStarted]) {
                  let oldCenterPt = this.mapState.project(this.mapState.center, newZoom);
                  let localDistanceOffset = this[_rotateOffset](this[_lastFocalLocal]['-'](focalOffset));
                  let newCenterPt = oldCenterPt['+'](this[_offsetToPoint](localDistanceOffset));
                  newCenter = this.mapState.unproject(newCenterPt, newZoom);
                } else {
                  newCenter = this.mapState.center;
                }
              } else {
                newCenter = this.mapState.center;
              }
              if (this[_pinchZoomStarted] || this[_pinchMoveStarted]) {
                mapMoved = this.mapState.move(newCenter, newZoom, {hasGesture: true, callOnMoveSink: false, source: eventSource});
              }
            }
            if (hasRotate) {
              if (!this[_rotationStarted] && currentRotation !== 0.0) {
                this[_rotationStarted] = true;
                this.mapState.emitMapEvent(new map_events.MapEventRotateStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
              }
              if (this[_rotationStarted]) {
                let rotationDiff = currentRotation - this[_lastRotation];
                mapRotated = this.mapState.rotate(this.mapState.rotation + rotationDiff, {hasGesture: true, callOnMoveSink: false, source: eventSource});
              }
            }
            if (mapMoved || mapRotated) {
              this.mapState.rebuildLayers();
            }
          }
        }
      }
      this[_lastRotation] = currentRotation;
      this[_lastScale] = details.scale;
      this[_lastFocalLocal] = focalOffset;
    }
    handleScaleEnd(details) {
      let t33;
      this[_resetDoubleTapHold]();
      if (!this.options.allowPanning) {
        return;
      }
      let eventSource = this[_dragMode] ? map_events.MapEventSource.dragEnd : map_events.MapEventSource.multiFingerEnd;
      if (this[_rotationStarted]) {
        this[_rotationStarted] = false;
        this.mapState.emitMapEvent(new map_events.MapEventRotateEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
      }
      if (this[_dragStarted] || this[_pinchZoomStarted] || this[_pinchMoveStarted]) {
        this[_dragStarted] = this[_pinchZoomStarted] = this[_pinchMoveStarted] = false;
        this.mapState.emitMapEvent(new map_events.MapEventMoveEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
      }
      let hasFling = interactive_flag.InteractiveFlag.hasFlag(this.options.interactiveFlags, 2);
      let magnitude = details.velocity.pixelsPerSecond.distance;
      if (magnitude < 800 || !hasFling) {
        if (hasFling) {
          this.mapState.emitMapEvent(new map_events.MapEventFlingAnimationNotStarted.new({center: this.mapState.center, zoom: this.mapState.zoom, source: eventSource}));
        }
        return;
      }
      let direction = details.velocity.pixelsPerSecond['/'](magnitude);
      let distance = ui.Offset.zero['&'](new ui.Size.new(dart.nullCheck(this.mapState.originalSize).x, dart.nullCheck(this.mapState.originalSize).y)).shortestSide;
      let _flingOffset = this[_focalStartLocal]['-'](this[_lastFocalLocal]);
      this[_flingAnimation] = new (T$.TweenOfOffset()).new({begin: _flingOffset, end: _flingOffset['-'](direction['*'](distance))}).animate(this[_flingController]);
      t33 = this[_flingController];
      (() => {
        t33.value = 0.0;
        t33.fling({velocity: magnitude / 1000.0, springDescription: new spring_simulation.SpringDescription.withDampingRatio({mass: 1.0, stiffness: 1000.0, ratio: 5.0})});
        return t33;
      })();
    }
    handleTap(position) {
      this.closeFlingAnimationController(map_events.MapEventSource.tap);
      this.closeDoubleTapController(map_events.MapEventSource.tap);
      let latlng = this[_offsetToCrs](dart.nullCheck(position.relative));
      if (this.options.onTap != null) {
        dart.nullCheck(this.options.onTap)(latlng);
      }
      this.mapState.emitMapEvent(new map_events.MapEventTap.new({tapPosition: latlng, center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.tap}));
    }
    handleLongPress(position) {
      this[_resetDoubleTapHold]();
      this.closeFlingAnimationController(map_events.MapEventSource.longPress);
      this.closeDoubleTapController(map_events.MapEventSource.longPress);
      let latlng = this[_offsetToCrs](dart.nullCheck(position.relative));
      if (this.options.onLongPress != null) {
        dart.nullCheck(this.options.onLongPress)(latlng);
      }
      this.mapState.emitMapEvent(new map_events.MapEventLongPress.new({tapPosition: latlng, center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.longPress}));
    }
    [_offsetToCrs](offset) {
      let focalStartPt = this.mapState.project(this.mapState.center, this.mapState.zoom);
      let point = this[_offsetToPoint](offset)['-'](dart.nullCheck(this.mapState.originalSize)['/'](2.0)).rotate(this.mapState.rotationRad);
      let newCenterPt = focalStartPt['+'](point);
      return this.mapState.unproject(newCenterPt, this.mapState.zoom);
    }
    handleDoubleTap(tapPosition) {
      this[_resetDoubleTapHold]();
      if (!this.options.allowPanning) {
        return;
      }
      this.closeFlingAnimationController(map_events.MapEventSource.doubleTap);
      this.closeDoubleTapController(map_events.MapEventSource.doubleTap);
      if (interactive_flag.InteractiveFlag.hasFlag(this.options.interactiveFlags, 16)) {
        let centerPos = this[_pointToOffset](dart.nullCheck(this.mapState.originalSize))['/'](2.0);
        let newZoom = this[_getZoomForScale](this.mapState.zoom, 2.0);
        let focalDelta = this[_getDoubleTapFocalDelta](centerPos, dart.nullCheck(tapPosition.relative), newZoom - this.mapState.zoom);
        let newCenter = this[_offsetToCrs](centerPos['+'](focalDelta));
        this[_startDoubleTapAnimation](newZoom, newCenter);
      }
    }
    [_getDoubleTapFocalDelta](centerPos, tapPos, zoomDiff) {
      let tapDelta = tapPos['-'](centerPos);
      let zoomScale = 1 / math.pow(2, zoomDiff);
      let maxDelta = centerPos['*'](1 - zoomScale);
      let tappedOutExtent = tapDelta.dx[$abs]() > maxDelta.dx || tapDelta.dy[$abs]() > maxDelta.dy;
      return tappedOutExtent ? this[_projectDeltaOnBounds](tapDelta, maxDelta) : tapDelta;
    }
    [_projectDeltaOnBounds](delta, maxDelta) {
      let weightX = delta.dx[$abs]() / maxDelta.dx;
      let weightY = delta.dy[$abs]() / maxDelta.dy;
      return delta['/'](math.max(core.double, weightX, weightY));
    }
    [_startDoubleTapAnimation](newZoom, newCenter) {
      this[_doubleTapZoomAnimation] = new (T$.TweenOfdouble()).new({begin: this.mapState.zoom, end: newZoom}).chain(new tween.CurveTween.new({curve: curves.Curves.fastOutSlowIn})).animate(this[_doubleTapController]);
      this[_doubleTapCenterAnimation] = new latlng_tween.LatLngTween.new({begin: this.mapState.center, end: newCenter}).chain(new tween.CurveTween.new({curve: curves.Curves.fastOutSlowIn})).animate(this[_doubleTapController]);
      this[_doubleTapController].forward({from: 0.0});
    }
    [_doubleTapZoomStatusListener](status) {
      if (status === animation.AnimationStatus.forward) {
        this.mapState.emitMapEvent(new map_events.MapEventDoubleTapZoomStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.doubleTapZoomAnimationController}));
      } else if (status === animation.AnimationStatus.completed) {
        this.mapState.emitMapEvent(new map_events.MapEventDoubleTapZoomEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.doubleTapZoomAnimationController}));
      }
    }
    [_handleDoubleTapZoomAnimation]() {
      this.mapState.move(latlong.LatLng.as(this[_doubleTapCenterAnimation].value), core.double.as(this[_doubleTapZoomAnimation].value), {hasGesture: true, source: map_events.MapEventSource.doubleTapZoomAnimationController});
    }
    handleOnTapUp(details) {
      let t33;
      t33 = this[_doubleTapHoldMaxDelay];
      t33 == null ? null : t33.cancel();
      if ((this[_tapUpCounter] = this[_tapUpCounter] + 1) === 1) {
        this[_doubleTapHoldMaxDelay] = async.Timer.new(C[283] || CT.C283, dart.bind(this, _resetDoubleTapHold));
      }
    }
    [_handleDoubleTapHold](details) {
      let t33, t33$, t33$0;
      t33 = this[_doubleTapHoldMaxDelay];
      t33 == null ? null : t33.cancel();
      let flags = this.options.interactiveFlags;
      if (interactive_flag.InteractiveFlag.hasFlag(flags, 8)) {
        let zoom = this.mapState.zoom;
        let focalOffset = details.localFocalPoint;
        let verticalOffset = this[_focalStartLocal]['-'](focalOffset).dy;
        let newZoom = this[_mapZoomStart] - verticalOffset / 360 * zoom;
        let min = (t33$ = this.options.minZoom, t33$ == null ? 0.0 : t33$);
        let max = (t33$0 = this.options.maxZoom, t33$0 == null ? 1 / 0 : t33$0);
        let actualZoom = math.max(core.double, min, math.min(core.double, max, newZoom));
        this.mapState.move(this.mapState.center, actualZoom, {hasGesture: true, source: map_events.MapEventSource.doubleTapHold});
      }
    }
    [_resetDoubleTapHold]() {
      let t33;
      t33 = this[_doubleTapHoldMaxDelay];
      t33 == null ? null : t33.cancel();
      this[_tapUpCounter] = 0;
    }
    [_flingAnimationStatusListener](status) {
      if (status === animation.AnimationStatus.completed) {
        this[_flingAnimationStarted] = false;
        this.mapState.emitMapEvent(new map_events.MapEventFlingAnimationEnd.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.flingAnimationController}));
      }
    }
    [_handleFlingAnimation]() {
      if (!this[_flingAnimationStarted]) {
        this[_flingAnimationStarted] = true;
        this.mapState.emitMapEvent(new map_events.MapEventFlingAnimationStart.new({center: this.mapState.center, zoom: this.mapState.zoom, source: map_events.MapEventSource.flingAnimationController}));
      }
      let newCenterPoint = this.mapState.project(this[_mapCenterStart])['+'](this[_offsetToPoint](this[_flingAnimation].value).rotate(this.mapState.rotationRad));
      let newCenter = this.mapState.unproject(newCenterPoint);
      this.mapState.move(newCenter, this.mapState.zoom, {hasGesture: true, source: map_events.MapEventSource.flingAnimationController});
    }
    [_offsetToPoint](offset) {
      return new (T$.CustomPointOfnum()).new(offset.dx, offset.dy);
    }
    [_pointToOffset](point) {
      return new ui.Offset.new(point.x[$toDouble](), point.y[$toDouble]());
    }
    [_getZoomForScale](startZoom, scale) {
      let resultZoom = scale === 1.0 ? startZoom : startZoom + math.log(scale) / 0.6931471805599453;
      return this.mapState.fitZoomToBounds(resultZoom);
    }
    [_rotateOffset](offset) {
      let radians = this.mapState.rotationRad;
      if (radians !== 0.0) {
        let cos = math.cos(radians);
        let sin = math.sin(radians);
        let nx = cos * offset.dx + sin * offset.dy;
        let ny = cos * offset.dy - sin * offset.dx;
        return new ui.Offset.new(nx, ny);
      }
      return offset;
    }
    dispose() {
      this[_flingController].dispose();
      this[_doubleTapController].dispose();
      super.dispose();
    }
  };
  (gestures.MapGestureMixin.new = function() {
    this[_dragMode] = false;
    this[_gestureWinner] = 0;
    this[_pointerCounter] = 0;
    this[_rotationStarted] = false;
    this[_pinchZoomStarted] = false;
    this[_pinchMoveStarted] = false;
    this[_dragStarted] = false;
    this[_flingAnimationStarted] = false;
    this[__MapGestureMixin__scaleCorrector] = null;
    this[__MapGestureMixin__lastRotation] = null;
    this[__MapGestureMixin__lastScale] = null;
    this[__MapGestureMixin__lastFocalLocal] = null;
    this[__MapGestureMixin__mapCenterStart] = null;
    this[__MapGestureMixin__mapZoomStart] = null;
    this[__MapGestureMixin__focalStartLocal] = null;
    this[__MapGestureMixin__flingController] = null;
    this[__MapGestureMixin__flingAnimation] = null;
    this[__MapGestureMixin__doubleTapController] = null;
    this[__MapGestureMixin__doubleTapZoomAnimation] = null;
    this[__MapGestureMixin__doubleTapCenterAnimation] = null;
    this[_tapUpCounter] = 0;
    this[_doubleTapHoldMaxDelay] = null;
    gestures.MapGestureMixin.__proto__.new.call(this);
    ;
  }).prototype = gestures.MapGestureMixin.prototype;
  dart.addTypeTests(gestures.MapGestureMixin);
  dart.addTypeCaches(gestures.MapGestureMixin);
  dart.setMethodSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getMethods(gestures.MapGestureMixin.__proto__),
    savePointer: dart.fnType(dart.void, [events.PointerEvent]),
    removePointer: dart.fnType(dart.void, [events.PointerEvent]),
    [_yieldMultiFingerGestureWinner]: dart.fnType(dart.void, [core.int, core.bool]),
    [_getMultiFingerGestureFlags]: dart.fnType(core.int, [], {gestureWinner: dart.nullable(core.int), mapOptions: dart.nullable(flutter_map.MapOptions)}, {}),
    closeFlingAnimationController: dart.fnType(dart.void, [map_events.MapEventSource]),
    closeDoubleTapController: dart.fnType(dart.void, [map_events.MapEventSource]),
    handleScaleStart: dart.fnType(dart.void, [scale.ScaleStartDetails]),
    handleScaleUpdate: dart.fnType(dart.void, [scale.ScaleUpdateDetails]),
    handleScaleEnd: dart.fnType(dart.void, [scale.ScaleEndDetails]),
    handleTap: dart.fnType(dart.void, [positioned_tap_detector_2.TapPosition]),
    handleLongPress: dart.fnType(dart.void, [positioned_tap_detector_2.TapPosition]),
    [_offsetToCrs]: dart.fnType(latlong.LatLng, [ui.Offset]),
    handleDoubleTap: dart.fnType(dart.void, [positioned_tap_detector_2.TapPosition]),
    [_getDoubleTapFocalDelta]: dart.fnType(ui.Offset, [ui.Offset, ui.Offset, core.double]),
    [_projectDeltaOnBounds]: dart.fnType(ui.Offset, [ui.Offset, ui.Offset]),
    [_startDoubleTapAnimation]: dart.fnType(dart.void, [core.double, latlong.LatLng]),
    [_doubleTapZoomStatusListener]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [_handleDoubleTapZoomAnimation]: dart.fnType(dart.void, []),
    handleOnTapUp: dart.fnType(dart.void, [tap.TapUpDetails]),
    [_handleDoubleTapHold]: dart.fnType(dart.void, [scale.ScaleUpdateDetails]),
    [_resetDoubleTapHold]: dart.fnType(dart.void, []),
    [_flingAnimationStatusListener]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [_handleFlingAnimation]: dart.fnType(dart.void, []),
    [_offsetToPoint]: dart.fnType(point.CustomPoint$(core.num), [ui.Offset]),
    [_pointToOffset]: dart.fnType(ui.Offset, [point.CustomPoint$(core.num)]),
    [_getZoomForScale]: dart.fnType(core.double, [core.double, core.double]),
    [_rotateOffset]: dart.fnType(ui.Offset, [ui.Offset])
  }));
  dart.setGetterSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getGetters(gestures.MapGestureMixin.__proto__),
    [_scaleCorrector]: core.double,
    [_lastRotation]: core.double,
    [_lastScale]: core.double,
    [_lastFocalLocal]: ui.Offset,
    [_mapCenterStart]: latlong.LatLng,
    [_mapZoomStart]: core.double,
    [_focalStartLocal]: ui.Offset,
    [_flingController]: animation_controller.AnimationController,
    [_flingAnimation]: animation.Animation$(ui.Offset),
    [_doubleTapController]: animation_controller.AnimationController,
    [_doubleTapZoomAnimation]: animation.Animation,
    [_doubleTapCenterAnimation]: animation.Animation
  }));
  dart.setSetterSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getSetters(gestures.MapGestureMixin.__proto__),
    [_scaleCorrector]: core.double,
    [_lastRotation]: core.double,
    [_lastScale]: core.double,
    [_lastFocalLocal]: ui.Offset,
    [_mapCenterStart]: latlong.LatLng,
    [_mapZoomStart]: core.double,
    [_focalStartLocal]: ui.Offset,
    [_flingController]: animation_controller.AnimationController,
    [_flingAnimation]: animation.Animation$(ui.Offset),
    [_doubleTapController]: animation_controller.AnimationController,
    [_doubleTapZoomAnimation]: animation.Animation,
    [_doubleTapCenterAnimation]: animation.Animation
  }));
  dart.setLibraryUri(gestures.MapGestureMixin, I[13]);
  dart.setFieldSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getFields(gestures.MapGestureMixin.__proto__),
    [_dragMode]: dart.fieldType(core.bool),
    [_gestureWinner]: dart.fieldType(core.int),
    [_pointerCounter]: dart.fieldType(core.int),
    [_rotationStarted]: dart.fieldType(core.bool),
    [_pinchZoomStarted]: dart.fieldType(core.bool),
    [_pinchMoveStarted]: dart.fieldType(core.bool),
    [_dragStarted]: dart.fieldType(core.bool),
    [_flingAnimationStarted]: dart.fieldType(core.bool),
    [__MapGestureMixin__scaleCorrector]: dart.fieldType(dart.nullable(core.double)),
    [__MapGestureMixin__lastRotation]: dart.fieldType(dart.nullable(core.double)),
    [__MapGestureMixin__lastScale]: dart.fieldType(dart.nullable(core.double)),
    [__MapGestureMixin__lastFocalLocal]: dart.fieldType(dart.nullable(ui.Offset)),
    [__MapGestureMixin__mapCenterStart]: dart.fieldType(dart.nullable(latlong.LatLng)),
    [__MapGestureMixin__mapZoomStart]: dart.fieldType(dart.nullable(core.double)),
    [__MapGestureMixin__focalStartLocal]: dart.fieldType(dart.nullable(ui.Offset)),
    [__MapGestureMixin__flingController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__MapGestureMixin__flingAnimation]: dart.fieldType(dart.nullable(animation.Animation$(ui.Offset))),
    [__MapGestureMixin__doubleTapController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__MapGestureMixin__doubleTapZoomAnimation]: dart.fieldType(dart.nullable(animation.Animation)),
    [__MapGestureMixin__doubleTapCenterAnimation]: dart.fieldType(dart.nullable(animation.Animation)),
    [_tapUpCounter]: dart.fieldType(core.int),
    [_doubleTapHoldMaxDelay]: dart.fieldType(dart.nullable(async.Timer))
  }));
  dart.defineLazy(gestures.MapGestureMixin, {
    /*gestures.MapGestureMixin._kMinFlingVelocity*/get _kMinFlingVelocity() {
      return 800;
    }
  }, false);
  var mapController$ = dart.privateName(flutter_map_state, "FlutterMapState.mapController");
  var groups = dart.privateName(flutter_map_state, "FlutterMapState.groups");
  var _positionedTapController = dart.privateName(flutter_map_state, "_positionedTapController");
  var __FlutterMapState_mapState = dart.privateName(flutter_map_state, "_#FlutterMapState#mapState");
  var _disposeStreamGroups = dart.privateName(flutter_map_state, "_disposeStreamGroups");
  var _merge = dart.privateName(flutter_map_state, "_merge");
  var _createLayer$ = dart.privateName(flutter_map_state, "_createLayer");
  flutter_map_state.FlutterMapState = class FlutterMapState extends gestures.MapGestureMixin {
    get mapController() {
      return this[mapController$];
    }
    set mapController(value) {
      super.mapController = value;
    }
    get groups() {
      return this[groups];
    }
    set groups(value) {
      super.groups = value;
    }
    get options() {
      return this.widget.options;
    }
    get mapState() {
      let t33;
      t33 = this[__FlutterMapState_mapState];
      return t33 == null ? dart.throw(new _internal.LateError.fieldNI("mapState")) : t33;
    }
    set mapState(t33) {
      if (this[__FlutterMapState_mapState] == null)
        this[__FlutterMapState_mapState] = t33;
      else
        dart.throw(new _internal.LateError.fieldAI("mapState"));
    }
    didUpdateWidget(oldWidget) {
      flutter_map.FlutterMap.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      this.mapState.options = this.options;
    }
    initState() {
      super.initState();
      this.mapState = new map.MapState.new(this.options, dart.fn(degree => {
        if (this.mounted) this.setState(dart.fn(() => new _js_helper.LinkedMap.new(), T$.VoidTovoid()));
      }, T$.doubleTovoid()), this.mapController.mapEventSink);
      this.mapController.state = this.mapState;
      if (this.options.onMapCreated != null) {
        dart.nullCheck(this.options.onMapCreated)(this.mapController);
      }
    }
    [_disposeStreamGroups]() {
      for (let group of this.groups) {
        group.close();
      }
      this.groups[$clear]();
    }
    dispose() {
      this[_disposeStreamGroups]();
      this.mapState.dispose();
      this.mapController.dispose();
      super.dispose();
    }
    [_merge](options) {
      if (options.rebuild == null) return this.mapState.onMoved;
      let group = new (T$.StreamGroupOfNull()).new();
      group.add(this.mapState.onMoved);
      group.add(dart.nullCheck(options.rebuild));
      this.groups[$add](group);
      return group.stream;
    }
    build(context) {
      this[_disposeStreamGroups]();
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          this.mapState.setOriginalSize(constraints.maxWidth, constraints.maxHeight);
          let size = this.mapState.size;
          return new map_state_widget.MapStateInheritedWidget.new({mapState: this.mapState, child: new basic.Listener.new({onPointerDown: dart.bind(this, 'savePointer'), onPointerCancel: dart.bind(this, 'removePointer'), onPointerUp: dart.bind(this, 'removePointer'), child: new positioned_tap_detector_2.PositionedTapDetector2.new({controller: this[_positionedTapController], onTap: dart.bind(this, 'handleTap'), onLongPress: dart.bind(this, 'handleLongPress'), onDoubleTap: dart.bind(this, 'handleDoubleTap'), child: new gesture_detector.GestureDetector.new({onScaleStart: dart.bind(this, 'handleScaleStart'), onScaleUpdate: dart.bind(this, 'handleScaleUpdate'), onScaleEnd: dart.bind(this, 'handleScaleEnd'), onTap: dart.bind(this[_positionedTapController], 'onTap'), onLongPress: dart.bind(this[_positionedTapController], 'onLongPress'), onTapDown: dart.bind(this[_positionedTapController], 'onTapDown'), onTapUp: dart.bind(this, 'handleOnTapUp'), child: new basic.ClipRect.new({child: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new basic.OverflowBox.new({minWidth: size.x, maxWidth: size.x, minHeight: size.y, maxHeight: size.y, child: new basic.Transform.rotate({angle: this.mapState.rotationRad, child: new basic.Stack.new({children: (() => {
                                let t34 = T$.JSArrayOfWidget().of([]);
                                if (this.widget.children[$isNotEmpty]) t34[$addAll](this.widget.children);
                                if (this.widget.layers[$isNotEmpty]) t34[$addAll](this.widget.layers[$map](framework.Widget, dart.fn(layer => this[_createLayer$](layer, this.options.plugins), T$.LayerOptionsToWidget())));
                                return t34;
                              })(), $creationLocationd_0dea112b090073317d4: C[285] || CT.C285}), $creationLocationd_0dea112b090073317d4: C[288] || CT.C288}), $creationLocationd_0dea112b090073317d4: C[292] || CT.C292}), new basic.Stack.new({children: (() => {
                            let t35 = T$.JSArrayOfWidget().of([]);
                            if (this.widget.nonRotatedChildren[$isNotEmpty]) t35[$addAll](this.widget.nonRotatedChildren);
                            if (this.widget.nonRotatedLayers[$isNotEmpty]) t35[$addAll](this.widget.nonRotatedLayers[$map](framework.Widget, dart.fn(layer => this[_createLayer$](layer, this.options.plugins), T$.LayerOptionsToWidget())));
                            return t35;
                          })(), $creationLocationd_0dea112b090073317d4: C[299] || CT.C299})]), $creationLocationd_0dea112b090073317d4: C[302] || CT.C302}), $creationLocationd_0dea112b090073317d4: C[305] || CT.C305}), $creationLocationd_0dea112b090073317d4: C[308] || CT.C308}), $creationLocationd_0dea112b090073317d4: C[318] || CT.C318}), $creationLocationd_0dea112b090073317d4: C[325] || CT.C325}), $creationLocationd_0dea112b090073317d4: C[331] || CT.C331});
        }, T$.BuildContextAndBoxConstraintsToMapStateInheritedWidget()), $creationLocationd_0dea112b090073317d4: C[335] || CT.C335});
    }
    [_createLayer$](options, plugins) {
      for (let plugin of plugins) {
        if (plugin.supportsLayer(options)) {
          return plugin.createLayer(options, this.mapState, this[_merge](options));
        }
      }
      if (tile_layer.TileLayerOptions.is(options)) {
        return new tile_layer.TileLayer.new({options: options, mapState: this.mapState, stream: this[_merge](options), $creationLocationd_0dea112b090073317d4: C[338] || CT.C338});
      }
      if (marker_layer.MarkerLayerOptions.is(options)) {
        return new marker_layer.MarkerLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[343] || CT.C343});
      }
      if (polyline_layer.PolylineLayerOptions.is(options)) {
        return new polyline_layer.PolylineLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[348] || CT.C348});
      }
      if (polygon_layer.PolygonLayerOptions.is(options)) {
        return new polygon_layer.PolygonLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[353] || CT.C353});
      }
      if (circle_layer.CircleLayerOptions.is(options)) {
        return new circle_layer.CircleLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[358] || CT.C358});
      }
      if (group_layer.GroupLayerOptions.is(options)) {
        return new group_layer.GroupLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[363] || CT.C363});
      }
      if (overlay_image_layer.OverlayImageLayerOptions.is(options)) {
        return new overlay_image_layer.OverlayImageLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[368] || CT.C368});
      }
      dart.throw(new core.StateError.new("Can't find correct layer for " + dart.str(options) + ". Perhaps when you create your FlutterMap you need something like this:\n\n    options: new MapOptions(plugins: [MyFlutterMapPlugin()])"));
    }
  };
  (flutter_map_state.FlutterMapState.new = function(mapController) {
    let t33;
    this[groups] = T$.JSArrayOfStreamGroupOfNull().of([]);
    this[_positionedTapController] = new positioned_tap_detector_2.PositionedTapController.new();
    this[__FlutterMapState_mapState] = null;
    this[mapController$] = (t33 = T$.MapControllerImplN().as(mapController), t33 == null ? map.MapControllerImpl.as(flutter_map.MapController.new()) : t33);
    flutter_map_state.FlutterMapState.__proto__.new.call(this);
    ;
  }).prototype = flutter_map_state.FlutterMapState.prototype;
  dart.addTypeTests(flutter_map_state.FlutterMapState);
  dart.addTypeCaches(flutter_map_state.FlutterMapState);
  dart.setMethodSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getMethods(flutter_map_state.FlutterMapState.__proto__),
    [_disposeStreamGroups]: dart.fnType(dart.void, []),
    [_merge]: dart.fnType(async.Stream$(core.Null), [layer.LayerOptions]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_createLayer$]: dart.fnType(framework.Widget, [layer.LayerOptions, core.List$(plugin.MapPlugin)])
  }));
  dart.setGetterSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getGetters(flutter_map_state.FlutterMapState.__proto__),
    options: flutter_map.MapOptions,
    mapState: map.MapState
  }));
  dart.setSetterSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getSetters(flutter_map_state.FlutterMapState.__proto__),
    mapState: map.MapState
  }));
  dart.setLibraryUri(flutter_map_state.FlutterMapState, I[14]);
  dart.setFieldSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getFields(flutter_map_state.FlutterMapState.__proto__),
    mapController: dart.finalFieldType(map.MapControllerImpl),
    groups: dart.finalFieldType(core.List$(stream_group.StreamGroup$(core.Null))),
    [_positionedTapController]: dart.finalFieldType(positioned_tap_detector_2.PositionedTapController),
    [__FlutterMapState_mapState]: dart.fieldType(dart.nullable(map.MapState))
  }));
  flutter_map.MapController = class MapController extends core.Object {
    static new() {
      return new map.MapControllerImpl.new();
    }
  };
  (flutter_map.MapController[dart.mixinNew] = function() {
  }).prototype = flutter_map.MapController.prototype;
  dart.addTypeTests(flutter_map.MapController);
  dart.addTypeCaches(flutter_map.MapController);
  dart.setLibraryUri(flutter_map.MapController, I[12]);
  var crs$0 = dart.privateName(flutter_map, "MapOptions.crs");
  var zoom$ = dart.privateName(flutter_map, "MapOptions.zoom");
  var rotation$ = dart.privateName(flutter_map, "MapOptions.rotation");
  var debugMultiFingerGestureWinner$ = dart.privateName(flutter_map, "MapOptions.debugMultiFingerGestureWinner");
  var enableMultiFingerGestureRace$ = dart.privateName(flutter_map, "MapOptions.enableMultiFingerGestureRace");
  var rotationThreshold$ = dart.privateName(flutter_map, "MapOptions.rotationThreshold");
  var rotationWinGestures$ = dart.privateName(flutter_map, "MapOptions.rotationWinGestures");
  var pinchZoomThreshold$ = dart.privateName(flutter_map, "MapOptions.pinchZoomThreshold");
  var pinchZoomWinGestures$ = dart.privateName(flutter_map, "MapOptions.pinchZoomWinGestures");
  var pinchMoveThreshold$ = dart.privateName(flutter_map, "MapOptions.pinchMoveThreshold");
  var pinchMoveWinGestures$ = dart.privateName(flutter_map, "MapOptions.pinchMoveWinGestures");
  var minZoom$0 = dart.privateName(flutter_map, "MapOptions.minZoom");
  var maxZoom$0 = dart.privateName(flutter_map, "MapOptions.maxZoom");
  var interactiveFlags$ = dart.privateName(flutter_map, "MapOptions.interactiveFlags");
  var allowPanning$ = dart.privateName(flutter_map, "MapOptions.allowPanning");
  var onTap$ = dart.privateName(flutter_map, "MapOptions.onTap");
  var onLongPress$ = dart.privateName(flutter_map, "MapOptions.onLongPress");
  var onPositionChanged$ = dart.privateName(flutter_map, "MapOptions.onPositionChanged");
  var onMapCreated$ = dart.privateName(flutter_map, "MapOptions.onMapCreated");
  var plugins$ = dart.privateName(flutter_map, "MapOptions.plugins");
  var slideOnBoundaries$ = dart.privateName(flutter_map, "MapOptions.slideOnBoundaries");
  var screenSize$ = dart.privateName(flutter_map, "MapOptions.screenSize");
  var adaptiveBoundaries$ = dart.privateName(flutter_map, "MapOptions.adaptiveBoundaries");
  var controller$ = dart.privateName(flutter_map, "MapOptions.controller");
  var center$ = dart.privateName(flutter_map, "MapOptions.center");
  var bounds$0 = dart.privateName(flutter_map, "MapOptions.bounds");
  var boundsOptions$ = dart.privateName(flutter_map, "MapOptions.boundsOptions");
  var swPanBoundary$ = dart.privateName(flutter_map, "MapOptions.swPanBoundary");
  var nePanBoundary$ = dart.privateName(flutter_map, "MapOptions.nePanBoundary");
  var _safeAreaCache = dart.privateName(flutter_map, "_safeAreaCache");
  var _safeAreaZoom = dart.privateName(flutter_map, "_safeAreaZoom");
  var _safeArea = dart.privateName(flutter_map, "_safeArea");
  var _getControllerZoom = dart.privateName(flutter_map, "_getControllerZoom");
  var _calculateScreenHeightInDegrees = dart.privateName(flutter_map, "_calculateScreenHeightInDegrees");
  var _calculateScreenWidthInDegrees = dart.privateName(flutter_map, "_calculateScreenWidthInDegrees");
  flutter_map.MapOptions = class MapOptions extends core.Object {
    get crs() {
      return this[crs$0];
    }
    set crs(value) {
      super.crs = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get debugMultiFingerGestureWinner() {
      return this[debugMultiFingerGestureWinner$];
    }
    set debugMultiFingerGestureWinner(value) {
      super.debugMultiFingerGestureWinner = value;
    }
    get enableMultiFingerGestureRace() {
      return this[enableMultiFingerGestureRace$];
    }
    set enableMultiFingerGestureRace(value) {
      super.enableMultiFingerGestureRace = value;
    }
    get rotationThreshold() {
      return this[rotationThreshold$];
    }
    set rotationThreshold(value) {
      super.rotationThreshold = value;
    }
    get rotationWinGestures() {
      return this[rotationWinGestures$];
    }
    set rotationWinGestures(value) {
      super.rotationWinGestures = value;
    }
    get pinchZoomThreshold() {
      return this[pinchZoomThreshold$];
    }
    set pinchZoomThreshold(value) {
      super.pinchZoomThreshold = value;
    }
    get pinchZoomWinGestures() {
      return this[pinchZoomWinGestures$];
    }
    set pinchZoomWinGestures(value) {
      super.pinchZoomWinGestures = value;
    }
    get pinchMoveThreshold() {
      return this[pinchMoveThreshold$];
    }
    set pinchMoveThreshold(value) {
      super.pinchMoveThreshold = value;
    }
    get pinchMoveWinGestures() {
      return this[pinchMoveWinGestures$];
    }
    set pinchMoveWinGestures(value) {
      super.pinchMoveWinGestures = value;
    }
    get minZoom() {
      return this[minZoom$0];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$0];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get interactiveFlags() {
      return this[interactiveFlags$];
    }
    set interactiveFlags(value) {
      super.interactiveFlags = value;
    }
    get allowPanning() {
      return this[allowPanning$];
    }
    set allowPanning(value) {
      super.allowPanning = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onPositionChanged() {
      return this[onPositionChanged$];
    }
    set onPositionChanged(value) {
      super.onPositionChanged = value;
    }
    get onMapCreated() {
      return this[onMapCreated$];
    }
    set onMapCreated(value) {
      super.onMapCreated = value;
    }
    get plugins() {
      return this[plugins$];
    }
    set plugins(value) {
      super.plugins = value;
    }
    get slideOnBoundaries() {
      return this[slideOnBoundaries$];
    }
    set slideOnBoundaries(value) {
      super.slideOnBoundaries = value;
    }
    get screenSize() {
      return this[screenSize$];
    }
    set screenSize(value) {
      super.screenSize = value;
    }
    get adaptiveBoundaries() {
      return this[adaptiveBoundaries$];
    }
    set adaptiveBoundaries(value) {
      super.adaptiveBoundaries = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get bounds() {
      return this[bounds$0];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get boundsOptions() {
      return this[boundsOptions$];
    }
    set boundsOptions(value) {
      super.boundsOptions = value;
    }
    get swPanBoundary() {
      return this[swPanBoundary$];
    }
    set swPanBoundary(value) {
      super.swPanBoundary = value;
    }
    get nePanBoundary() {
      return this[nePanBoundary$];
    }
    set nePanBoundary(value) {
      super.nePanBoundary = value;
    }
    isOutOfBounds(center) {
      if (this.adaptiveBoundaries) {
        return !dart.nullCheck(this[_safeArea]).contains(center);
      }
      if (this.swPanBoundary != null && this.nePanBoundary != null) {
        if (center == null) {
          return true;
        } else if (center.latitude < dart.nullCheck(this.swPanBoundary).latitude || center.latitude > dart.nullCheck(this.nePanBoundary).latitude) {
          return true;
        } else if (center.longitude < dart.nullCheck(this.swPanBoundary).longitude || center.longitude > dart.nullCheck(this.nePanBoundary).longitude) {
          return true;
        }
      }
      return false;
    }
    containPoint(point, fallback) {
      if (this.adaptiveBoundaries) {
        return dart.nullCheck(this[_safeArea]).containPoint(point, fallback);
      } else {
        return new latlong.LatLng.new(point.latitude[$clamp](dart.nullCheck(this.swPanBoundary).latitude, dart.nullCheck(this.nePanBoundary).latitude), point.longitude[$clamp](dart.nullCheck(this.swPanBoundary).longitude, dart.nullCheck(this.nePanBoundary).longitude));
      }
    }
    get [_safeArea]() {
      let controllerZoom = this[_getControllerZoom]();
      if (controllerZoom !== this[_safeAreaZoom] || this[_safeAreaCache] == null) {
        this[_safeAreaZoom] = controllerZoom;
        let halfScreenHeight = this[_calculateScreenHeightInDegrees]() / 2;
        let halfScreenWidth = this[_calculateScreenWidthInDegrees]() / 2;
        let southWestLatitude = dart.nullCheck(this.swPanBoundary).latitude + halfScreenHeight;
        let southWestLongitude = dart.nullCheck(this.swPanBoundary).longitude + halfScreenWidth;
        let northEastLatitude = dart.nullCheck(this.nePanBoundary).latitude - halfScreenHeight;
        let northEastLongitude = dart.nullCheck(this.nePanBoundary).longitude - halfScreenWidth;
        this[_safeAreaCache] = new flutter_map._SafeArea.new(new latlong.LatLng.new(southWestLatitude, southWestLongitude), new latlong.LatLng.new(northEastLatitude, northEastLongitude));
      }
      return this[_safeAreaCache];
    }
    [_calculateScreenWidthInDegrees]() {
      let zoom = this[_getControllerZoom]();
      let degreesPerPixel = 360 / math.pow(2, zoom + 8);
      return dart.nullCheck(this.screenSize).width * degreesPerPixel;
    }
    [_calculateScreenHeightInDegrees]() {
      return dart.nullCheck(this.screenSize).height * 170.102258 / math.pow(2, this[_getControllerZoom]() + 8);
    }
    [_getControllerZoom]() {
      return dart.nullCheck(this.controller).zoom;
    }
  };
  (flutter_map.MapOptions.new = function(opts) {
    let t36;
    let crs = opts && 'crs' in opts ? opts.crs : C[10] || CT.C10;
    let center = opts && 'center' in opts ? opts.center : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let boundsOptions = opts && 'boundsOptions' in opts ? opts.boundsOptions : C[373] || CT.C373;
    let zoom = opts && 'zoom' in opts ? opts.zoom : 13;
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
    let debugMultiFingerGestureWinner = opts && 'debugMultiFingerGestureWinner' in opts ? opts.debugMultiFingerGestureWinner : false;
    let enableMultiFingerGestureRace = opts && 'enableMultiFingerGestureRace' in opts ? opts.enableMultiFingerGestureRace : false;
    let rotationThreshold = opts && 'rotationThreshold' in opts ? opts.rotationThreshold : 20;
    let rotationWinGestures = opts && 'rotationWinGestures' in opts ? opts.rotationWinGestures : 4;
    let pinchZoomThreshold = opts && 'pinchZoomThreshold' in opts ? opts.pinchZoomThreshold : 0.5;
    let pinchZoomWinGestures = opts && 'pinchZoomWinGestures' in opts ? opts.pinchZoomWinGestures : 3;
    let pinchMoveThreshold = opts && 'pinchMoveThreshold' in opts ? opts.pinchMoveThreshold : 40;
    let pinchMoveWinGestures = opts && 'pinchMoveWinGestures' in opts ? opts.pinchMoveWinGestures : 3;
    let minZoom = opts && 'minZoom' in opts ? opts.minZoom : null;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : null;
    let interactiveFlags = opts && 'interactiveFlags' in opts ? opts.interactiveFlags : 63;
    let allowPanning = opts && 'allowPanning' in opts ? opts.allowPanning : true;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let onMapCreated = opts && 'onMapCreated' in opts ? opts.onMapCreated : null;
    let plugins = opts && 'plugins' in opts ? opts.plugins : C[375] || CT.C375;
    let slideOnBoundaries = opts && 'slideOnBoundaries' in opts ? opts.slideOnBoundaries : false;
    let adaptiveBoundaries = opts && 'adaptiveBoundaries' in opts ? opts.adaptiveBoundaries : false;
    let screenSize = opts && 'screenSize' in opts ? opts.screenSize : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let swPanBoundary = opts && 'swPanBoundary' in opts ? opts.swPanBoundary : null;
    let nePanBoundary = opts && 'nePanBoundary' in opts ? opts.nePanBoundary : null;
    this[_safeAreaCache] = null;
    this[_safeAreaZoom] = null;
    this[crs$0] = crs;
    this[bounds$0] = bounds;
    this[boundsOptions$] = boundsOptions;
    this[zoom$] = zoom;
    this[rotation$] = rotation;
    this[debugMultiFingerGestureWinner$] = debugMultiFingerGestureWinner;
    this[enableMultiFingerGestureRace$] = enableMultiFingerGestureRace;
    this[rotationThreshold$] = rotationThreshold;
    this[rotationWinGestures$] = rotationWinGestures;
    this[pinchZoomThreshold$] = pinchZoomThreshold;
    this[pinchZoomWinGestures$] = pinchZoomWinGestures;
    this[pinchMoveThreshold$] = pinchMoveThreshold;
    this[pinchMoveWinGestures$] = pinchMoveWinGestures;
    this[minZoom$0] = minZoom;
    this[maxZoom$0] = maxZoom;
    this[interactiveFlags$] = interactiveFlags;
    this[allowPanning$] = allowPanning;
    this[onTap$] = onTap;
    this[onLongPress$] = onLongPress;
    this[onPositionChanged$] = onPositionChanged;
    this[onMapCreated$] = onMapCreated;
    this[plugins$] = plugins;
    this[slideOnBoundaries$] = slideOnBoundaries;
    this[adaptiveBoundaries$] = adaptiveBoundaries;
    this[screenSize$] = screenSize;
    this[controller$] = controller;
    this[swPanBoundary$] = swPanBoundary;
    this[nePanBoundary$] = nePanBoundary;
    this[center$] = (t36 = center, t36 == null ? new latlong.LatLng.new(50.5, 30.51) : t36);
    if (!(rotationThreshold >= 0.0)) dart.assertFailed(null, I[15], 279, 16, "rotationThreshold >= 0.0");
    if (!(pinchZoomThreshold >= 0.0)) dart.assertFailed(null, I[15], 280, 16, "pinchZoomThreshold >= 0.0");
    if (!(pinchMoveThreshold >= 0.0)) dart.assertFailed(null, I[15], 281, 16, "pinchMoveThreshold >= 0.0");
    this[_safeAreaZoom] = this.zoom;
    if (!(this.slideOnBoundaries || !this.isOutOfBounds(center))) dart.assertFailed(null, I[15], 283, 12, "slideOnBoundaries ||\n        !isOutOfBounds(center)");
    if (!(!this.adaptiveBoundaries || this.screenSize != null)) dart.assertFailed("screenSize must be set in order to enable adaptive boundaries.", I[15], 285, 12, "!adaptiveBoundaries || screenSize != null");
    if (!(!this.adaptiveBoundaries || this.controller != null)) dart.assertFailed("controller must be set in order to enable adaptive boundaries.", I[15], 287, 12, "!adaptiveBoundaries || controller != null");
  }).prototype = flutter_map.MapOptions.prototype;
  dart.addTypeTests(flutter_map.MapOptions);
  dart.addTypeCaches(flutter_map.MapOptions);
  dart.setMethodSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getMethods(flutter_map.MapOptions.__proto__),
    isOutOfBounds: dart.fnType(core.bool, [dart.nullable(latlong.LatLng)]),
    containPoint: dart.fnType(latlong.LatLng, [latlong.LatLng, latlong.LatLng]),
    [_calculateScreenWidthInDegrees]: dart.fnType(core.double, []),
    [_calculateScreenHeightInDegrees]: dart.fnType(core.double, []),
    [_getControllerZoom]: dart.fnType(core.double, [])
  }));
  dart.setGetterSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getGetters(flutter_map.MapOptions.__proto__),
    [_safeArea]: dart.nullable(flutter_map._SafeArea)
  }));
  dart.setLibraryUri(flutter_map.MapOptions, I[12]);
  dart.setFieldSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getFields(flutter_map.MapOptions.__proto__),
    crs: dart.finalFieldType(crs.Crs),
    zoom: dart.finalFieldType(core.double),
    rotation: dart.finalFieldType(core.double),
    debugMultiFingerGestureWinner: dart.finalFieldType(core.bool),
    enableMultiFingerGestureRace: dart.finalFieldType(core.bool),
    rotationThreshold: dart.finalFieldType(core.double),
    rotationWinGestures: dart.finalFieldType(core.int),
    pinchZoomThreshold: dart.finalFieldType(core.double),
    pinchZoomWinGestures: dart.finalFieldType(core.int),
    pinchMoveThreshold: dart.finalFieldType(core.double),
    pinchMoveWinGestures: dart.finalFieldType(core.int),
    minZoom: dart.finalFieldType(dart.nullable(core.double)),
    maxZoom: dart.finalFieldType(dart.nullable(core.double)),
    interactiveFlags: dart.finalFieldType(core.int),
    allowPanning: dart.finalFieldType(core.bool),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [latlong.LatLng]))),
    onLongPress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [latlong.LatLng]))),
    onPositionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [flutter_map.MapPosition, core.bool]))),
    onMapCreated: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [flutter_map.MapController]))),
    plugins: dart.finalFieldType(core.List$(plugin.MapPlugin)),
    slideOnBoundaries: dart.finalFieldType(core.bool),
    screenSize: dart.finalFieldType(dart.nullable(ui.Size)),
    adaptiveBoundaries: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(dart.nullable(flutter_map.MapController)),
    center: dart.finalFieldType(latlong.LatLng),
    bounds: dart.finalFieldType(dart.nullable(latlng_bounds.LatLngBounds)),
    boundsOptions: dart.finalFieldType(flutter_map.FitBoundsOptions),
    swPanBoundary: dart.finalFieldType(dart.nullable(latlong.LatLng)),
    nePanBoundary: dart.finalFieldType(dart.nullable(latlong.LatLng)),
    [_safeAreaCache]: dart.fieldType(dart.nullable(flutter_map._SafeArea)),
    [_safeAreaZoom]: dart.fieldType(dart.nullable(core.double))
  }));
  const padding$ = FitBoundsOptions_padding;
  const maxZoom$1 = FitBoundsOptions_maxZoom;
  const zoom$0 = FitBoundsOptions_zoom;
  flutter_map.FitBoundsOptions = class FitBoundsOptions extends core.Object {
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get maxZoom() {
      return this[maxZoom$1];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get zoom() {
      return this[zoom$0];
    }
    set zoom(value) {
      super.zoom = value;
    }
  };
  (flutter_map.FitBoundsOptions.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : C[374] || CT.C374;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : 17;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    this[padding$] = padding;
    this[maxZoom$1] = maxZoom;
    this[zoom$0] = zoom;
    ;
  }).prototype = flutter_map.FitBoundsOptions.prototype;
  dart.addTypeTests(flutter_map.FitBoundsOptions);
  dart.addTypeCaches(flutter_map.FitBoundsOptions);
  dart.setLibraryUri(flutter_map.FitBoundsOptions, I[12]);
  dart.setFieldSignature(flutter_map.FitBoundsOptions, () => ({
    __proto__: dart.getFields(flutter_map.FitBoundsOptions.__proto__),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    maxZoom: dart.finalFieldType(core.double),
    zoom: dart.finalFieldType(dart.nullable(core.double))
  }));
  var center$0 = dart.privateName(flutter_map, "MapPosition.center");
  var bounds$1 = dart.privateName(flutter_map, "MapPosition.bounds");
  var zoom$1 = dart.privateName(flutter_map, "MapPosition.zoom");
  var hasGesture$ = dart.privateName(flutter_map, "MapPosition.hasGesture");
  flutter_map.MapPosition = class MapPosition extends core.Object {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get bounds() {
      return this[bounds$1];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get zoom() {
      return this[zoom$1];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get hasGesture() {
      return this[hasGesture$];
    }
    set hasGesture(value) {
      super.hasGesture = value;
    }
  };
  (flutter_map.MapPosition.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
    this[center$0] = center;
    this[bounds$1] = bounds;
    this[zoom$1] = zoom;
    this[hasGesture$] = hasGesture;
    ;
  }).prototype = flutter_map.MapPosition.prototype;
  dart.addTypeTests(flutter_map.MapPosition);
  dart.addTypeCaches(flutter_map.MapPosition);
  dart.setLibraryUri(flutter_map.MapPosition, I[12]);
  dart.setFieldSignature(flutter_map.MapPosition, () => ({
    __proto__: dart.getFields(flutter_map.MapPosition.__proto__),
    center: dart.finalFieldType(dart.nullable(latlong.LatLng)),
    bounds: dart.finalFieldType(dart.nullable(latlng_bounds.LatLngBounds)),
    zoom: dart.finalFieldType(dart.nullable(core.double)),
    hasGesture: dart.finalFieldType(core.bool)
  }));
  flutter_map._SafeArea = class _SafeArea extends core.Object {
    contains(point) {
      return this.isLatitudeBlocked || this.isLongitudeBlocked ? false : this.bounds.contains(T$.LatLngN().as(point));
    }
    containPoint(point, fallback) {
      return new latlong.LatLng.new(this.isLatitudeBlocked ? fallback.latitude : point.latitude[$clamp](this.bounds.south, this.bounds.north), this.isLongitudeBlocked ? fallback.longitude : point.longitude[$clamp](this.bounds.west, this.bounds.east));
    }
  };
  (flutter_map._SafeArea.new = function(southWest, northEast) {
    this.bounds = new latlng_bounds.LatLngBounds.new(southWest, northEast);
    this.isLatitudeBlocked = southWest.latitude > northEast.latitude;
    this.isLongitudeBlocked = southWest.longitude > northEast.longitude;
    ;
  }).prototype = flutter_map._SafeArea.prototype;
  dart.addTypeTests(flutter_map._SafeArea);
  dart.addTypeCaches(flutter_map._SafeArea);
  dart.setMethodSignature(flutter_map._SafeArea, () => ({
    __proto__: dart.getMethods(flutter_map._SafeArea.__proto__),
    contains: dart.fnType(core.bool, [dart.dynamic]),
    containPoint: dart.fnType(latlong.LatLng, [latlong.LatLng, latlong.LatLng])
  }));
  dart.setLibraryUri(flutter_map._SafeArea, I[12]);
  dart.setFieldSignature(flutter_map._SafeArea, () => ({
    __proto__: dart.getFields(flutter_map._SafeArea.__proto__),
    bounds: dart.finalFieldType(latlng_bounds.LatLngBounds),
    isLatitudeBlocked: dart.finalFieldType(core.bool),
    isLongitudeBlocked: dart.finalFieldType(core.bool)
  }));
  var moveSuccess$ = dart.privateName(flutter_map, "MoveAndRotateResult.moveSuccess");
  var rotateSuccess$ = dart.privateName(flutter_map, "MoveAndRotateResult.rotateSuccess");
  flutter_map.MoveAndRotateResult = class MoveAndRotateResult extends core.Object {
    get moveSuccess() {
      return this[moveSuccess$];
    }
    set moveSuccess(value) {
      super.moveSuccess = value;
    }
    get rotateSuccess() {
      return this[rotateSuccess$];
    }
    set rotateSuccess(value) {
      super.rotateSuccess = value;
    }
  };
  (flutter_map.MoveAndRotateResult.new = function(moveSuccess, rotateSuccess) {
    this[moveSuccess$] = moveSuccess;
    this[rotateSuccess$] = rotateSuccess;
    ;
  }).prototype = flutter_map.MoveAndRotateResult.prototype;
  dart.addTypeTests(flutter_map.MoveAndRotateResult);
  dart.addTypeCaches(flutter_map.MoveAndRotateResult);
  dart.setLibraryUri(flutter_map.MoveAndRotateResult, I[12]);
  dart.setFieldSignature(flutter_map.MoveAndRotateResult, () => ({
    __proto__: dart.getFields(flutter_map.MoveAndRotateResult.__proto__),
    moveSuccess: dart.finalFieldType(core.bool),
    rotateSuccess: dart.finalFieldType(core.bool)
  }));
  dart.trackLibraries("packages/flutter_map/src/layer/tile_provider/tile_provider.dart", {
    "package:flutter_map/src/layer/tile_provider/tile_provider.dart": tile_provider,
    "package:flutter_map/src/layer/tile_layer.dart": tile_layer,
    "package:flutter_map/src/layer/tile_builder/tile_builder.dart": tile_builder,
    "package:flutter_map/src/layer/polyline_layer.dart": polyline_layer,
    "package:flutter_map/src/layer/polygon_layer.dart": polygon_layer,
    "package:flutter_map/src/layer/marker_layer.dart": marker_layer,
    "package:flutter_map/src/layer/circle_layer.dart": circle_layer,
    "package:flutter_map/src/plugins/plugin.dart": plugin,
    "package:flutter_map/src/layer/overlay_image_layer.dart": overlay_image_layer,
    "package:flutter_map/src/layer/group_layer.dart": group_layer,
    "package:flutter_map/src/map/map_state_widget.dart": map_state_widget,
    "package:flutter_map/src/map/map.dart": map,
    "package:flutter_map/src/gestures/gestures.dart": gestures,
    "package:flutter_map/src/map/flutter_map_state.dart": flutter_map_state,
    "package:flutter_map/flutter_map.dart": flutter_map
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tile_provider.dart","../tile_layer.dart","../tile_builder/tile_builder.dart","../polyline_layer.dart","../polygon_layer.dart","../marker_layer.dart","../circle_layer.dart","../../plugins/plugin.dart","../overlay_image_layer.dart","../group_layer.dart","../../map/map_state_widget.dart","../../map/map.dart","../../../flutter_map.dart","../../gestures/gestures.dart","../../map/flutter_map_state.dart"],"names":[],"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","file":"../../../../../../../../../packages/flutter_map/src/layer/tile_provider/tile_provider.dart.lib.js"}');
  // Exports:
  return {
    src__layer__tile_provider__tile_provider: tile_provider,
    src__layer__tile_layer: tile_layer,
    src__layer__tile_builder__tile_builder: tile_builder,
    src__layer__polyline_layer: polyline_layer,
    src__layer__polygon_layer: polygon_layer,
    src__layer__marker_layer: marker_layer,
    src__layer__circle_layer: circle_layer,
    src__plugins__plugin: plugin,
    src__layer__overlay_image_layer: overlay_image_layer,
    src__layer__group_layer: group_layer,
    src__map__map_state_widget: map_state_widget,
    src__map__map: map,
    src__gestures__gestures: gestures,
    src__map__flutter_map_state: flutter_map_state,
    flutter_map: flutter_map
  };
}));

//# sourceMappingURL=tile_provider.dart.lib.js.map
